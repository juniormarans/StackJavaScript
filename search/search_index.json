{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Vis\u00e3o Geral","text":"<p>Full stack JavaScript \u00e9 uma abordagem de desenvolvimento de software em que JavaScript \u00e9 utilizado tanto no lado do servidor (back-end) quanto no lado do cliente (front-end) de uma aplica\u00e7\u00e3o. Isso significa que o desenvolvedor utiliza JavaScript para escrever o c\u00f3digo que \u00e9 executado no servidor, bem como o c\u00f3digo que \u00e9 executado no navegador do usu\u00e1rio.</p> <p>No lado do servidor, o desenvolvedor pode utilizar frameworks e bibliotecas JavaScript, como Node.js, Express, Hapi, Koa, ou outros, para criar aplicativos e APIs (Application Programming Interfaces) que gerenciam a l\u00f3gica de neg\u00f3cios, o acesso a banco de dados, a autentica\u00e7\u00e3o de usu\u00e1rios e outras funcionalidades relacionadas ao back-end.</p> <p>No lado do cliente, o desenvolvedor pode utilizar frameworks e bibliotecas JavaScript, como React, Angular, Vue, ou outros, para criar interfaces de usu\u00e1rio interativas e responsivas, que s\u00e3o exibidas nos navegadores dos usu\u00e1rios. Al\u00e9m disso, o desenvolvedor pode usar JavaScript para interagir com APIs de terceiros, manipular DOM (Document Object Model) para atualizar a interface do usu\u00e1rio em tempo real e lidar com eventos do usu\u00e1rio.</p> <p>Ao utilizar JavaScript em ambos os lados, o desenvolvedor pode criar aplica\u00e7\u00f5es web completas, desde o servidor at\u00e9 o cliente, usando a mesma linguagem de programa\u00e7\u00e3o, o que pode simplificar o desenvolvimento, tornar a equipe de desenvolvimento mais eficiente e permitir a reutiliza\u00e7\u00e3o de c\u00f3digo em diferentes partes da aplica\u00e7\u00e3o.</p> <p>Para se tornar um desenvolvedor Full Stack JavaScript, \u00e9 necess\u00e1rio adquirir habilidades tanto no desenvolvimento do lado do cliente (front-end) quanto no desenvolvimento do lado do servidor (back-end). Aqui est\u00e3o alguns passos recomendados para seguir:</p> <ol> <li> <p>Aprenda os fundamentos de HTML, CSS e JavaScript: Antes de come\u00e7ar a aprender sobre desenvolvimento web, \u00e9 necess\u00e1rio ter um conhecimento s\u00f3lido dos fundamentos da web, como HTML, CSS e JavaScript. Aprender a estrutura b\u00e1sica de um documento HTML, como estilizar elementos com CSS e como manipular elementos HTML usando JavaScript \u00e9 um bom ponto de partida.</p> </li> <li> <p>Aprenda um framework back-end: Existem muitos frameworks back-end JavaScript dispon\u00edveis, como Node.js, Express, Hapi, Koa, entre outros. Escolha um framework que melhor atenda \u00e0s suas necessidades e aprenda como us\u00e1-lo para criar APIs (Application Programming Interfaces) e aplicativos web escal\u00e1veis e eficientes.</p> </li> <li> <p>Entenda como trabalhar com bancos de dados: Como desenvolvedor Full Stack JavaScript, voc\u00ea precisar\u00e1 interagir com bancos de dados para armazenar e recuperar informa\u00e7\u00f5es. \u00c9 importante entender como trabalhar com bancos de dados, como MySQL, MongoDB, PostgreSQL, entre outros.</p> </li> <li> <p>Escolha um framework front-end: Existem muitos frameworks front-end JavaScript dispon\u00edveis, como React, Angular, Vue, Svelte, entre outros. Escolha um framework que melhor atenda \u00e0s suas necessidades e aprenda como us\u00e1-lo para criar interfaces de usu\u00e1rio interativas e responsivas.</p> </li> <li> <p>Aprenda sobre DevOps: Aprender sobre DevOps \u00e9 essencial para um desenvolvedor Full Stack JavaScript. Voc\u00ea precisar\u00e1 entender como implantar e gerenciar aplicativos em servidores, como trabalhar com ferramentas de controle de vers\u00e3o, como Git, e como gerenciar depend\u00eancias e pacotes com gerenciadores de pacotes como NPM (Node Package Manager).</p> </li> <li> <p>Pratique, pratique, pratique: Como em qualquer outra \u00e1rea de desenvolvimento, a pr\u00e1tica \u00e9 fundamental. Construa projetos e desafios para praticar o que aprendeu e desenvolver suas habilidades.</p> </li> <li> <p>Mantenha-se atualizado: O mundo da tecnologia est\u00e1 em constante evolu\u00e7\u00e3o, portanto, \u00e9 essencial manter-se atualizado com as novas tend\u00eancias e tecnologias emergentes. Assine newsletters, participe de f\u00f3runs, blogs e comunidades on-line para manter-se atualizado e melhorar suas habilidades continuamente.</p> </li> </ol> <p>Seguindo esses passos, voc\u00ea pode se tornar um desenvolvedor Full Stack JavaScript competente e pronto para criar aplicativos web de ponta a ponta. Para ajudar na sua jornada separamos nos t\u00f3picos a seguir algumas dicas.</p>"},{"location":"sum%C3%A1rio/","title":"Sum\u00e1rio","text":""},{"location":"sum%C3%A1rio/#sumario","title":"Sum\u00e1rio","text":""},{"location":"sum%C3%A1rio/#visao-geral","title":"Vis\u00e3o Geral","text":""},{"location":"sum%C3%A1rio/#html-e-css","title":"HTML e CSS","text":""},{"location":"sum%C3%A1rio/#introducao-html-e-css","title":"Introdu\u00e7\u00e3o HTML e CSS","text":""},{"location":"sum%C3%A1rio/#html","title":"HTML","text":"<ul> <li>Como funciona uma p\u00e1gina web</li> <li>Os fundamentos do HTML</li> <li>Estrutura b\u00e1sica de uma p\u00e1gina html</li> <li>Como Rodar um c\u00f3digo html</li> </ul>"},{"location":"sum%C3%A1rio/#tags-e-elementos","title":"Tags e Elementos","text":"<ul> <li>T\u00edtulos e Sub-t\u00edtulos</li> <li>Par\u00e1grafo</li> <li>Coment\u00e1rios</li> <li>Identa\u00e7\u00e3o</li> </ul>"},{"location":"sum%C3%A1rio/#div","title":"Div","text":"<ul> <li>Exerc\u00edcios de Fixa\u00e7\u00e3o</li> </ul>"},{"location":"sum%C3%A1rio/#introducao-a-css","title":"Introdu\u00e7\u00e3o a CSS","text":"<ul> <li>Importando arquivos css</li> <li>Identifica\u00e7\u00e3o de elementos</li> <li>Identifica\u00e7\u00e3o por nome de tag</li> <li>Identifica\u00e7\u00e3o por classe</li> <li>Identifica\u00e7\u00e3o por ID</li> </ul>"},{"location":"sum%C3%A1rio/#posicionamento-de-elementos","title":"Posicionamento de Elementos","text":"<ul> <li>Posicionamento Est\u00e1tico</li> <li>Posicionamento Relativo</li> <li>Posicionamento Absoluto</li> <li>Posicionamento Fixo</li> <li>Posicionamento em Grade</li> </ul>"},{"location":"sum%C3%A1rio/#posicionamento-de-texto","title":"Posicionamento de Texto","text":"<ul> <li>Texto Alinhado</li> <li>Texto em Colunas</li> <li>Texto Flutuante</li> </ul>"},{"location":"sum%C3%A1rio/#posicionando","title":"Posicionando","text":"<ul> <li>Imagem Alinhada</li> <li>Imagem como Fundo</li> <li>Imagem como Link</li> <li>Exerc\u00edcios de Fixa\u00e7\u00e3o</li> </ul>"},{"location":"sum%C3%A1rio/#tipos-de-listas","title":"Tipos de Listas","text":"<ul> <li>Lista ordenada</li> <li>Lista n\u00e3o ordenada</li> <li>Lista de defini\u00e7\u00e3o</li> </ul>"},{"location":"sum%C3%A1rio/#navegacao","title":"Navega\u00e7\u00e3o","text":"<ul> <li>Links de texto</li> <li>Menus de navega\u00e7\u00e3o</li> <li>Barras de navega\u00e7\u00e3o</li> <li>Exerc\u00edcios de Fixa\u00e7\u00e3o</li> </ul>"},{"location":"sum%C3%A1rio/#elementos-de-formulario","title":"Elementos de Formul\u00e1rio","text":"<ul> <li>R\u00f3tulo</li> <li>Campo de Entrada de Dados</li> <li>Campo de texto</li> <li>Campo de senha</li> <li>Caixa de sele\u00e7\u00e3o</li> <li>Bot\u00e3o de op\u00e7\u00e3o</li> <li>Bot\u00e3o de Verifica\u00e7\u00e3o</li> <li>Bot\u00e3o Input</li> <li>Area de Texto</li> <li>Bot\u00e3o</li> <li>Bot\u00e3o padr\u00e3o</li> <li>Bot\u00e3o com imagem</li> <li>Bot\u00e3o com \u00edcone</li> <li>Bot\u00e3o de envio de formul\u00e1rio</li> <li>Bot\u00e3o de resetar formul\u00e1rio</li> <li>Bot\u00e3o com fun\u00e7\u00e3o JavaScript</li> </ul>"},{"location":"sum%C3%A1rio/#formulario","title":"Formul\u00e1rio","text":"<ul> <li>Exerc\u00edcios de Fixa\u00e7\u00e3o</li> </ul>"},{"location":"sum%C3%A1rio/#tabelas","title":"Tabelas","text":"<ul> <li>Mais tags de tabelas</li> <li>Exerc\u00edcios de Fixa\u00e7\u00e3o</li> </ul>"},{"location":"sum%C3%A1rio/#normalizacao-de-css","title":"Normaliza\u00e7\u00e3o de Css","text":""},{"location":"sum%C3%A1rio/#unidades-do-css","title":"Unidades do CSS","text":"<ul> <li>Pixels (px)</li> <li>Porcentagem (%)</li> <li>Em (em)</li> <li>Rem (rem)</li> <li>Viewport Width (vw) e Viewport Height (vh)</li> <li>Unidades Absolutas (cm, mm, in, pt)</li> </ul>"},{"location":"sum%C3%A1rio/#propriedade-do-css","title":"Propriedade do CSS","text":"<ul> <li>Exerc\u00edcios de Fixa\u00e7\u00e3o</li> </ul>"},{"location":"sum%C3%A1rio/#seletores","title":"Seletores","text":"<ul> <li>Seletor de elemento</li> <li>Seletor de classe</li> <li>Seletor de ID</li> <li>Seletor de atributo</li> <li>Seletor de descend\u00eancia</li> <li>Seletores de pseudo-classes</li> <li>Pseudo-classe \"hover\"</li> <li>Pseudo-classe \"active\"</li> <li>Pseudo-classe \"focus\"</li> <li>seletor de pseudo elementos</li> <li>Pseudo-elemento \"before\"</li> <li>Pseudo-elemento \"after\"</li> <li>Pseudo-elemento \"first-letter\"</li> </ul>"},{"location":"sum%C3%A1rio/#cores-css","title":"Cores Css","text":"<ul> <li>Nome de cor</li> <li>Valor RGB</li> <li>Valor HEX</li> <li>Transpar\u00eancia</li> <li>Cores HSL</li> <li>Exerc\u00edcios de Fixa\u00e7\u00e3o</li> </ul>"},{"location":"sum%C3%A1rio/#backgrounds-css","title":"Backgrounds CSS","text":"<ul> <li>background-color</li> <li>background-image</li> <li>background-repeat</li> <li>background-position</li> <li>background-size</li> <li>Exerc\u00edcios de Fixa\u00e7\u00e3o</li> </ul>"},{"location":"sum%C3%A1rio/#bordas-css","title":"Bordas Css","text":"<ul> <li>border-style</li> <li>border-width</li> <li>border-color</li> <li>border-radius</li> <li>border-image</li> <li>Exerc\u00edcios de Fixa\u00e7\u00e3o</li> </ul>"},{"location":"sum%C3%A1rio/#fontes","title":"Fontes","text":""},{"location":"sum%C3%A1rio/#gradientes","title":"Gradientes","text":"<ul> <li>Linear Gradient</li> <li>Radial Gradient</li> <li>Shadow</li> <li>Gradient e Shadow combinados</li> <li>Exerc\u00edcios de Fixa\u00e7\u00e3o</li> </ul>"},{"location":"sum%C3%A1rio/#resolucao-exercicios-de-fixacao","title":"Resolu\u00e7\u00e3o exercicios de fixa\u00e7\u00e3o","text":""},{"location":"sum%C3%A1rio/#introducao-ao-javascript","title":"Introdu\u00e7\u00e3o ao JavaScript","text":""},{"location":"sum%C3%A1rio/#conceitos-basicos","title":"Conceitos B\u00e1sicos","text":"<ul> <li>Como Rodar Um C\u00f3digo JavaScript</li> <li>Sintaxe Javascript</li> <li>Tipos de identificadores em JavaScript</li> <li>Escopo de Vari\u00e1veis em JavaScript</li> <li>Palavras Reservadas</li> <li>Tipos de dados em JavaScript</li> <li>Tipos de dados primitivos</li> <li>Tipos de dados n\u00e3o primitivos (Tipos estruturados)</li> <li>Como trabalhar com cole\u00e7\u00f5es</li> <li>Manipulando Arrays</li> <li>Manipulando objetos</li> <li>Formata\u00e7\u00e3o e Indenta\u00e7\u00e3o de C\u00f3digo em JavaScript</li> <li>Princ\u00edpios de Formata\u00e7\u00e3o de C\u00f3digo em JavaScript</li> <li>Princ\u00edpios de Indenta\u00e7\u00e3o de C\u00f3digo em JavaScript</li> <li>Tipos de coment\u00e1rios em JavaScript e sua aplica\u00e7\u00e3o</li> <li>Operadores JavaScript</li> <li>Operadores Aritm\u00e9ticos</li> <li>Preced\u00eancia de Operadores Aritm\u00e9ticos</li> <li>Operadores de Atribui\u00e7\u00e3o em JavaScript</li> <li>Operadores de Compara\u00e7\u00e3o</li> <li>Operadores L\u00f3gicos</li> <li>Operadores de Incremento e Decremento</li> <li>Exercicios de fixa\u00e7\u00e3o</li> <li>Respostas exercicios de fixa\u00e7\u00e3o</li> </ul>"},{"location":"sum%C3%A1rio/#estruturas-de-decisao-e-repeticao","title":"Estruturas de Decis\u00e3o e Repeti\u00e7\u00e3o","text":"<ul> <li>Estrutura de Decis\u00e3o</li> <li>if</li> <li>switch-case</li> <li>tern\u00e1rio</li> <li>try/catch/finally</li> <li>Estruturas de Repeti\u00e7\u00e3o</li> <li>WHILE</li> <li>FOR</li> <li>Condi\u00e7\u00e3o</li> <li>Incremento/Decremento</li> <li>For of</li> <li>FOR IN</li> <li>Exercicios de fixa\u00e7\u00e3o</li> <li>Exercicio de Estruturas de decis\u00e3o</li> <li>Exercicio de Estruturas de repeti\u00e7\u00e3o</li> <li>Respostas Exercicios de fixa\u00e7\u00e3o</li> <li>Estruturas de decis\u00e3o</li> <li>Resposta Estruturas de repeti\u00e7\u00e3o</li> </ul>"},{"location":"sum%C3%A1rio/#tipos-de-funcoes-e-manipulacao-de-dados","title":"Tipos de Fun\u00e7\u00f5es e Manipula\u00e7\u00e3o de Dados","text":"<ul> <li>Introdu\u00e7\u00e3o a Fun\u00e7\u00f5es em Javascript</li> <li>Ordem de fun\u00e7\u00e3o</li> <li>Arrow functions</li> <li>Fun\u00e7\u00f5es An\u00f4nimas em JavaScript</li> <li>CALLBACK</li> <li>PROMISE</li> <li>ASYNC/AWAIT</li> <li>Convers\u00f5es e manipula\u00e7\u00e3o de dados</li> <li>Convers\u00e3o de tipos de dados em JavaScript</li> <li>Manipula\u00e7\u00e3o de arrays em JavaScript</li> </ul>"},{"location":"sum%C3%A1rio/#introducao","title":"Introdu\u00e7\u00e3o","text":""},{"location":"sum%C3%A1rio/#definicao-de-classe","title":"Defini\u00e7\u00e3o de classe","text":""},{"location":"sum%C3%A1rio/#instanciacao-de-objetos","title":"Instancia\u00e7\u00e3o de objetos","text":""},{"location":"sum%C3%A1rio/#encapsulamento","title":"Encapsulamento","text":""},{"location":"sum%C3%A1rio/#heranca","title":"Heran\u00e7a","text":""},{"location":"sum%C3%A1rio/#polimorfismo","title":"Polimorfismo","text":""},{"location":"sum%C3%A1rio/#metodos-estaticos","title":"M\u00e9todos est\u00e1ticos","text":""},{"location":"sum%C3%A1rio/#pacotes","title":"Pacotes","text":""},{"location":"sum%C3%A1rio/#typescript","title":"TypeScript","text":"<ul> <li>Configura\u00e7\u00e3o</li> <li>Tipos b\u00e1sicos</li> <li>Fun\u00e7\u00f5es</li> <li>Interfaces</li> <li>Classes</li> </ul>"},{"location":"sum%C3%A1rio/#projeto-pratico","title":"Projeto Pr\u00e1tico","text":"<ul> <li>Calculadora</li> <li>Desafio</li> </ul>"},{"location":"sum%C3%A1rio/#resolucao-desafio","title":"Resolu\u00e7\u00e3o desafio","text":""},{"location":"sum%C3%A1rio/#introducao-ao-nodejs","title":"Introdu\u00e7\u00e3o ao Node.js","text":""},{"location":"sum%C3%A1rio/#apliacoes-tipicas-do-nodejs","title":"Aplia\u00e7\u00f5es t\u00edpicas do Node.js","text":"<ul> <li>Desenvolvimento de aplicativos web</li> <li>Desenvolvimento de aplicativos de rede</li> <li>Automa\u00e7\u00e3o de tarefas</li> <li>Desenvolvimento de aplicativos de desktop</li> </ul>"},{"location":"sum%C3%A1rio/#introducao-a-api","title":"Introdu\u00e7\u00e3o a API","text":"<ul> <li>Tipos de APIs</li> <li>API de Servi\u00e7o da Web (Webservice)</li> <li>API RESTful</li> <li>API SOAP</li> </ul>"},{"location":"sum%C3%A1rio/#api-restful-com-nodejs","title":"API RESTful com Node.js","text":""},{"location":"sum%C3%A1rio/#iniciando-um-projeto-nodejs","title":"Iniciando um projeto Node.js","text":"<ul> <li>1 Instalando Node.js</li> <li>Passo 1: Abra o terminal</li> <li>Passo 2: Atualize o gerenciador de pacotes</li> <li>Passo 3: Instale o Node.js</li> <li>Passo 4: Verifique a instala\u00e7\u00e3o</li> <li>2. Crie um projeto Node.js</li> <li>Passo 1 Crie um diret\u00f3rio para o projeto e navegue at\u00e9 ele</li> <li>Passo 2 Inicialize o projeto Node.js com o npm</li> </ul>"},{"location":"sum%C3%A1rio/#3-instale-os-pacotes-bibliotecas-e-frameworks-necessarios","title":"3. Instale os Pacotes, Bibliotecas e Frameworks necess\u00e1rios","text":"<ul> <li>Instale os pacotes necess\u00e1rios para criar uma API RESTful em Node.js</li> </ul>"},{"location":"sum%C3%A1rio/#4-modelo-dados","title":"4. Modelo dados","text":"<ul> <li>Modelo conceitual</li> <li>Modelo l\u00f3gico: e ORM Sequelize</li> <li>ORM</li> <li>Sequelize</li> <li>sequelizerc</li> <li>database.js</li> <li>Modelos e Migra\u00e7\u00f5es</li> <li>Conectando os Models</li> </ul>"},{"location":"sum%C3%A1rio/#introducao_1","title":"Introdu\u00e7\u00e3o","text":"<ul> <li>Criando Endpoints</li> <li>Par\u00e2metros</li> </ul>"},{"location":"sum%C3%A1rio/#configurando-o-servidor","title":"Configurando o servidor","text":""},{"location":"sum%C3%A1rio/#testando-o-servidor","title":"Testando o servidor","text":""},{"location":"sum%C3%A1rio/#insomnia","title":"Insomnia","text":"<ul> <li>Instalando o Insomnia</li> </ul>"},{"location":"sum%C3%A1rio/#atualizando-repositorios-e-instalando-insomnia","title":"Atualizando repositorios e instalando Insomnia","text":"<ul> <li>Criando uma requisi\u00e7\u00e3o</li> <li>Salvar e importar requisi\u00e7\u00f5es</li> <li>Requisi\u00e7\u00f5es da Api</li> </ul>"},{"location":"sum%C3%A1rio/#introducao-a-reactjs","title":"Introdu\u00e7\u00e3o a ReactJs","text":"<ul> <li>No\u00e7\u00f5es de programa\u00e7\u00e3o funcional</li> <li>Componentes funcionais</li> <li>Imutabilidade</li> </ul>"},{"location":"sum%C3%A1rio/#iniciando-um-projeto-com-reactjs","title":"Iniciando um projeto com ReactJS","text":"<ul> <li>Estrutura do projeto</li> <li>Selecione template</li> </ul>"},{"location":"sum%C3%A1rio/#react-dom","title":"React Dom","text":"<ul> <li>render</li> <li>hydrate</li> </ul>"},{"location":"sum%C3%A1rio/#react-router-dom","title":"React Router Dom","text":""},{"location":"sum%C3%A1rio/#react-hooks","title":"React Hooks","text":"<ul> <li>useState</li> <li>useCallback</li> <li>useMemo</li> <li>useEffect</li> </ul>"},{"location":"sum%C3%A1rio/#router-guards","title":"Router Guards","text":""},{"location":"sum%C3%A1rio/#react-context","title":"React Context","text":""},{"location":"html_css/","title":"HTML e CSS","text":""},{"location":"html_css/#introducao-html-e-css","title":"Introdu\u00e7\u00e3o HTML e CSS","text":"<p>HTML (Hypertext Markup Language) \u00e9 uma linguagem de marca\u00e7\u00e3o usada para criar e estruturar conte\u00fado na web. \u00c9 a base de todas as p\u00e1ginas web e permite que os desenvolvedores criem documentos que cont\u00eam texto, imagens, v\u00eddeos, links e outros elementos interativos.</p> <p>CSS (Cascading Style Sheets) \u00e9 uma linguagem usada para estilizar p\u00e1ginas web. Ele permite que os desenvolvedores controlem a apar\u00eancia e o layout dos elementos HTML, aplicando estilos, como cores, fontes, tamanhos, margens, bordas e anima\u00e7\u00f5es.</p> <p>Juntas, HTML e CSS formam a base da constru\u00e7\u00e3o de p\u00e1ginas web modernas e interativas. Enquanto HTML \u00e9 respons\u00e1vel pela estrutura e conte\u00fado da p\u00e1gina, CSS \u00e9 respons\u00e1vel pelo estilo e apar\u00eancia.</p>"},{"location":"html_css/_01_visao-geral/","title":"01 visao geral","text":""},{"location":"html_css/_01_visao-geral/#html","title":"HTML","text":"<p>HTML, ou Hypertext Markup Language, \u00e9 uma linguagem de marca\u00e7\u00e3o utilizada para criar e estruturar documentos na World Wide Web. Essa linguagem \u00e9 composta por uma s\u00e9rie de elementos que definem como o conte\u00fado de um documento deve ser exibido em um navegador da web.</p> <p>Os elementos HTML s\u00e3o compostos por tags, que s\u00e3o identificadas por colchetes angulares. Essas tags s\u00e3o usadas para definir a estrutura do documento, como t\u00edtulos, par\u00e1grafos, imagens, links e outros elementos que comp\u00f5em uma p\u00e1gina da web.</p> <p>A estrutura e o conte\u00fado de um documento HTML s\u00e3o interpretados por um navegador da web, que utiliza as informa\u00e7\u00f5es fornecidas pelas tags para renderizar a p\u00e1gina de forma adequada. Isso permite que os usu\u00e1rios possam acessar e visualizar o conte\u00fado de p\u00e1ginas da web de maneira consistente e padronizada.</p> <p>Em resumo, HTML \u00e9 uma linguagem de marca\u00e7\u00e3o fundamental para a cria\u00e7\u00e3o de p\u00e1ginas da web, permitindo que os desenvolvedores criem documentos bem estruturados e formatados para serem visualizados em navegadores da web.</p>"},{"location":"html_css/_01_visao-geral/#como-funciona-uma-pagina-web","title":"Como funciona uma p\u00e1gina web","text":"<p>Uma p\u00e1gina web \u00e9 composta por uma s\u00e9rie de elementos interconectados que trabalham em conjunto para fornecer uma experi\u00eancia de usu\u00e1rio consistente e interativa. Esses elementos incluem o c\u00f3digo HTML que define a estrutura e o conte\u00fado da p\u00e1gina, o CSS que define a apar\u00eancia visual da p\u00e1gina e o JavaScript que fornece interatividade e dinamicidade \u00e0 p\u00e1gina.</p> <p>Quando um usu\u00e1rio acessa uma p\u00e1gina web, o navegador da web faz uma solicita\u00e7\u00e3o ao servidor que hospeda o site, enviando as informa\u00e7\u00f5es necess\u00e1rias para exibir a p\u00e1gina. O servidor, por sua vez, envia a p\u00e1gina ao navegador, que come\u00e7a a process\u00e1-la.</p> <p>Primeiramente, o navegador interpreta o c\u00f3digo HTML e constr\u00f3i a estrutura da p\u00e1gina, criando uma \u00e1rvore de elementos que representam o conte\u00fado e a hierarquia da p\u00e1gina. Em seguida, o navegador aplica o CSS para definir a apar\u00eancia visual da p\u00e1gina, definindo o estilo, a cor, o tamanho e outras caracter\u00edsticas visuais dos elementos na p\u00e1gina.</p> <p>Depois, o navegador executa qualquer c\u00f3digo JavaScript inclu\u00eddo na p\u00e1gina, permitindo que a p\u00e1gina interaja com o usu\u00e1rio ou realize tarefas din\u00e2micas, como carregar conte\u00fado adicional ou fazer solicita\u00e7\u00f5es ao servidor.</p> <p>Finalmente, o navegador exibe a p\u00e1gina na tela do usu\u00e1rio, combinando todos os elementos processados para criar a visualiza\u00e7\u00e3o final da p\u00e1gina. Durante todo o processo, o navegador monitora as intera\u00e7\u00f5es do usu\u00e1rio com a p\u00e1gina, permitindo que a p\u00e1gina seja atualizada ou modificada dinamicamente, conforme necess\u00e1rio.</p> <p>Uma p\u00e1gina web funciona atrav\u00e9s de uma combina\u00e7\u00e3o de elementos HTML, CSS e JavaScript que s\u00e3o processados pelo navegador da web para fornecer uma experi\u00eancia interativa e consistente aos usu\u00e1rios.</p>"},{"location":"html_css/_01_visao-geral/#os-fundamentos-do-html","title":"Os fundamentos do HTML","text":"<p>HTML \u00e9 uma linguagem de marca\u00e7\u00e3o usada para definir a estrutura e o conte\u00fado de p\u00e1ginas da web. O HTML \u00e9 composto por tr\u00eas conceitos fundamentais: tags, elementos e atributos.</p> <p>As tags s\u00e3o os blocos b\u00e1sicos de constru\u00e7\u00e3o do HTML. Elas s\u00e3o identificadas por colchetes angulares (&lt; &gt;) e s\u00e3o usadas para criar elementos HTML. Existem dois tipos de tags: as tags de abertura e as tags de fechamento. As tags de abertura indicam o in\u00edcio de um elemento HTML, enquanto as tags de fechamento indicam o seu fim. Al\u00e9m disso, h\u00e1 tamb\u00e9m as tags auto-fech\u00e1veis, que n\u00e3o requerem uma tag de fechamento.</p> <p>Os elementos s\u00e3o as estruturas de dados que comp\u00f5em uma p\u00e1gina da web. Eles s\u00e3o definidos usando tags e geralmente incluem um conjunto de atributos que especificam suas caracter\u00edsticas e comportamentos. Um elemento pode conter texto, imagens, outros elementos ou qualquer combina\u00e7\u00e3o desses.</p> <p>Os atributos s\u00e3o usados para definir as propriedades de um elemento. Eles s\u00e3o definidos dentro da tag de abertura e geralmente t\u00eam um valor associado que define o comportamento ou a apar\u00eancia do elemento. Existem v\u00e1rios tipos de atributos, como os atributos de estilo, que definem o estilo visual do elemento, e os atributos de a\u00e7\u00e3o, que especificam o comportamento interativo do elemento.</p> <p>Tags, elementos e atributos s\u00e3o conceitos fundamentais do HTML que permitem aos desenvolvedores criar e estruturar p\u00e1ginas da web de forma consistente e padronizada. Tags s\u00e3o blocos b\u00e1sicos de constru\u00e7\u00e3o do HTML, elementos s\u00e3o as estruturas de dados que comp\u00f5em a p\u00e1gina e atributos definem as propriedades e comportamentos desses elementos.</p>"},{"location":"html_css/_01_visao-geral/#estrutura-basica-de-uma-pagina-html","title":"Estrutura b\u00e1sica de uma p\u00e1gina html","text":"<p>A estrutura b\u00e1sica de uma p\u00e1gina HTML \u00e9 composta por uma s\u00e9rie de elementos que definem a estrutura e o conte\u00fado da p\u00e1gina. Essa estrutura segue um padr\u00e3o comum, que inclui as seguintes se\u00e7\u00f5es principais:</p> <p>Doctype: a primeira linha de uma p\u00e1gina HTML \u00e9 o doctype, que informa ao navegador a vers\u00e3o do HTML sendo usada na p\u00e1gina.</p> <p>HTML: em seguida, vem a tag HTML, que envolve todo o conte\u00fado da p\u00e1gina. Essa tag cont\u00e9m dois atributos principais: lang, que define o idioma da p\u00e1gina, e dir, que define a dire\u00e7\u00e3o do texto.</p> <p>Head: a se\u00e7\u00e3o head \u00e9 usada para incluir informa\u00e7\u00f5es sobre a p\u00e1gina, como o t\u00edtulo da p\u00e1gina, metadados, scripts, folhas de estilo e outras informa\u00e7\u00f5es importantes. Essa se\u00e7\u00e3o n\u00e3o \u00e9 exibida na p\u00e1gina em si, mas fornece informa\u00e7\u00f5es importantes para o navegador e os mecanismos de busca.</p> <p>Body: a se\u00e7\u00e3o body \u00e9 onde o conte\u00fado real da p\u00e1gina \u00e9 definido. Ela cont\u00e9m todos os elementos vis\u00edveis na p\u00e1gina, como t\u00edtulos, par\u00e1grafos, imagens, links e outros elementos.</p> <p>A estrutura b\u00e1sica de uma p\u00e1gina HTML \u00e9 essencial para garantir a correta renderiza\u00e7\u00e3o da p\u00e1gina pelos navegadores da web. Al\u00e9m disso, seguir esse padr\u00e3o ajuda os desenvolvedores a criar p\u00e1ginas consistentes e padronizadas, facilitando a manuten\u00e7\u00e3o e a atualiza\u00e7\u00e3o do conte\u00fado da p\u00e1gina no futuro.</p> <pre><code>  &lt;!DOCTYPE html&gt;\n  &lt;html lang=\"pt-br\"&gt;\n    &lt;head&gt;\n      &lt;meta charset=\"UTF-8\"&gt;\n      &lt;title&gt;Minha P\u00e1gina HTML&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;h1&gt;Bem-vindo \u00e0 minha p\u00e1gina HTML!&lt;/h1&gt;\n      &lt;p&gt;Esta \u00e9 uma p\u00e1gina HTML b\u00e1sica.&lt;/p&gt;\n    &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre> <p>Nesse exemplo, a p\u00e1gina come\u00e7a com a declara\u00e7\u00e3o do doctype, seguida da tag HTML, que define o idioma da p\u00e1gina como portugu\u00eas do Brasil. A se\u00e7\u00e3o head inclui a meta tag que define o conjunto de caracteres da p\u00e1gina como UTF-8 e o t\u00edtulo da p\u00e1gina. A se\u00e7\u00e3o body inclui o conte\u00fado real da p\u00e1gina, que consiste em um cabe\u00e7alho h1 e um par\u00e1grafo simples.</p>"},{"location":"html_css/_01_visao-geral/#como-rodar-um-codigo-html","title":"Como Rodar um c\u00f3digo html","text":"<p>Para rodar um c\u00f3digo HTML, voc\u00ea precisa de um navegador da web, como o Google Chrome, Mozilla Firefox, Safari, ou outro.</p> <ul> <li>Abra um editor de texto simples, como o Bloco de Notas (no Windows) ou o TextEdit (no macOS).</li> <li>Digite o c\u00f3digo HTML no editor de texto, ou copie e cole o c\u00f3digo de um arquivo existente.</li> <li>Salve o arquivo com a extens\u00e3o \".html\" (por exemplo, \"meu_arquivo.html\").</li> <li>Abra o arquivo HTML em um navegador da web, clicando duas vezes no arquivo salvo ou arrastando-o para a janela do navegador.</li> </ul> <p>O navegador da web deve exibir o conte\u00fado HTML conforme definido no c\u00f3digo. Se o arquivo HTML cont\u00e9m imagens ou outros arquivos externos, certifique-se de que eles estejam no mesmo diret\u00f3rio do arquivo HTML ou que os caminhos estejam corretos.</p>"},{"location":"html_css/_02_tags_elementos/","title":"02 tags elementos","text":""},{"location":"html_css/_02_tags_elementos/#tags-e-elementos","title":"Tags e Elementos","text":"<p>A marca\u00e7\u00e3o \u00e9 feita atrav\u00e9s de tags, que s\u00e3o elementos com nomes espec\u00edficos e que envolvem o conte\u00fado da p\u00e1gina para atribuir um significado espec\u00edfico. Cada tag pode ter atributos, que fornecem informa\u00e7\u00f5es adicionais sobre a tag e seu conte\u00fado.</p> <p>Os atributos s\u00e3o pares de valores que especificam propriedades adicionais de uma tag HTML. Eles fornecem informa\u00e7\u00f5es como cor, tamanho, alinhamento, link de destino e outras propriedades que ajudam a definir a apar\u00eancia e o comportamento dos elementos da p\u00e1gina.</p> <p>Os atributos permitem que os desenvolvedores controlem v\u00e1rios aspectos do comportamento e da apar\u00eancia dos elementos HTML. Eles podem ser usados para definir a largura e a altura de imagens, especificar o destino de um link, definir o estilo de um elemento usando CSS, entre outras funcionalidades.</p> <p>Os desenvolvedores web usam tags e atributos HTML para criar documentos que possam ser interpretados e renderizados pelos navegadores. A linguagem HTML \u00e9 essencial para a cria\u00e7\u00e3o de p\u00e1ginas web, pois fornece a estrutura b\u00e1sica para a exibi\u00e7\u00e3o de conte\u00fado em um navegador da web.</p> <p>Para mais informa\u00e7\u00f5es de tags acesse o link: Elementos</p> <p>Para mais informa\u00e7\u00f5es de atributos acesse o link: Atributos</p>"},{"location":"html_css/_02_tags_elementos/#titulos-e-sub-titulos","title":"T\u00edtulos e Sub-t\u00edtulos","text":"<p>Para organizar e estruturar o conte\u00fado de uma p\u00e1gina, \u00e9 comum utilizar os t\u00edtulos e sub-t\u00edtulos HTML.</p> <p>Existem seis n\u00edveis de t\u00edtulos HTML, que v\u00e3o do <code>&lt;h1&gt;</code> ao <code>&lt;h6&gt;</code>. O <code>&lt;h1&gt;</code> \u00e9 o t\u00edtulo mais importante e deve ser usado para o t\u00edtulo principal da p\u00e1gina, enquanto o <code>&lt;h6&gt;</code> \u00e9 o t\u00edtulo menos importante. Os t\u00edtulos e sub-t\u00edtulos s\u00e3o importantes para ajudar os usu\u00e1rios a entender a hierarquia de informa\u00e7\u00e3o da p\u00e1gina e para auxiliar os mecanismos de busca a entenderem o conte\u00fado da p\u00e1gina.</p> <pre><code>  &lt;h1&gt;T\u00edtulo principal da p\u00e1gina&lt;/h1&gt;\n  &lt;h2&gt;Sub-t\u00edtulo da se\u00e7\u00e3o&lt;/h2&gt;\n  &lt;h3&gt;Sub-t\u00edtulo de uma sub-se\u00e7\u00e3o&lt;/h3&gt;\n  &lt;h4&gt;Sub-t\u00edtulo de uma sub-se\u00e7\u00e3o menor&lt;/h4&gt;\n  &lt;h5&gt;Sub-t\u00edtulo de uma sub-se\u00e7\u00e3o ainda menor&lt;/h5&gt;\n  &lt;h6&gt;Sub-t\u00edtulo de uma sub-se\u00e7\u00e3o muito pequena&lt;/h6&gt;\n</code></pre> <p>Ao utilizar os t\u00edtulos e sub-t\u00edtulos HTML, \u00e9 importante lembrar que eles n\u00e3o devem ser usados apenas para mudar o tamanho ou estilo do texto. Eles devem ser utilizados para indicar a import\u00e2ncia e a hierarquia do conte\u00fado da p\u00e1gina.</p>"},{"location":"html_css/_02_tags_elementos/#paragrafo","title":"Par\u00e1grafo","text":"<p>Em HTML, o par\u00e1grafo \u00e9 definido pela tag <code>&lt;p&gt;</code>. Essa tag \u00e9 usada para separar blocos de texto e criar par\u00e1grafos na p\u00e1gina. Os navegadores geralmente exibem o texto dentro de uma tag <code>&lt;p&gt;</code> com um espa\u00e7o em branco antes e depois do par\u00e1grafo.</p> <pre><code>  &lt;p&gt;Este \u00e9 um exemplo de par\u00e1grafo em HTML. Ele cont\u00e9m v\u00e1rias frases que s\u00e3o separadas por pontos finais. O texto dentro de um par\u00e1grafo pode incluir formata\u00e7\u00e3o, como negrito, it\u00e1lico, sublinhado e outros elementos HTML.&lt;/p&gt;\n</code></pre> <p>Os par\u00e1grafos em HTML s\u00e3o \u00fateis para separar e organizar o conte\u00fado em uma p\u00e1gina. \u00c9 importante lembrar que, para garantir a acessibilidade da p\u00e1gina, \u00e9 recomend\u00e1vel usar par\u00e1grafos curtos e dividir o conte\u00fado em se\u00e7\u00f5es bem definidas. Al\u00e9m disso, \u00e9 importante usar a tag <code>&lt;p&gt;</code> para criar par\u00e1grafos, em vez de adicionar quebras de linha ou espa\u00e7os em branco, para garantir que o conte\u00fado seja apresentado de forma consistente em diferentes dispositivos e navegadores.</p>"},{"location":"html_css/_02_tags_elementos/#comentarios","title":"Coment\u00e1rios","text":"<p>Em HTML, \u00e9 poss\u00edvel adicionar coment\u00e1rios no c\u00f3digo para fornecer informa\u00e7\u00f5es adicionais ou anota\u00e7\u00f5es que n\u00e3o s\u00e3o exibidas na p\u00e1gina web. Os coment\u00e1rios em HTML s\u00e3o \u00fateis para documentar o c\u00f3digo e explicar sua funcionalidade para outros desenvolvedores ou para si mesmo no futuro.</p> <p>Para adicionar um coment\u00e1rio em HTML, voc\u00ea pode usar a tag <code>&lt;!-- --&gt;</code>. Tudo o que estiver dentro dos s\u00edmbolos <code>&lt;!-- e --&gt;</code> ser\u00e1 tratado como um coment\u00e1rio e n\u00e3o ser\u00e1 exibido na p\u00e1gina web.</p> <pre><code>  &lt;!-- Este \u00e9 um coment\u00e1rio em HTML. Ele n\u00e3o ser\u00e1 exibido na p\u00e1gina web, mas pode ser \u00fatil para documentar o c\u00f3digo ou fornecer anota\u00e7\u00f5es adicionais. --&gt;\n</code></pre> <p>Os coment\u00e1rios em HTML s\u00e3o \u00fateis para tornar o c\u00f3digo mais f\u00e1cil de entender e manter. Eles podem ser usados para explicar o prop\u00f3sito de uma se\u00e7\u00e3o de c\u00f3digo, fornecer anota\u00e7\u00f5es para outros desenvolvedores ou para si mesmo no futuro, ou para desativar temporariamente uma se\u00e7\u00e3o de c\u00f3digo sem precisar remov\u00ea-la completamente.</p>"},{"location":"html_css/_02_tags_elementos/#identacao","title":"Identa\u00e7\u00e3o","text":"<p>A identa\u00e7\u00e3o em HTML \u00e9 a pr\u00e1tica de adicionar espa\u00e7os em branco e quebras de linha para organizar e estruturar o c\u00f3digo. A identa\u00e7\u00e3o em HTML \u00e9 uma boa pr\u00e1tica de codifica\u00e7\u00e3o e pode ajudar a tornar o c\u00f3digo mais f\u00e1cil de entender e manter.</p> <pre><code>  &lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n    &lt;head&gt;\n      &lt;title&gt;T\u00edtulo da p\u00e1gina&lt;/title&gt;\n      &lt;meta charset=\"UTF-8\"&gt;\n      &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;h1&gt;Este \u00e9 um t\u00edtulo principal&lt;/h1&gt;\n      &lt;p&gt;Este \u00e9 um exemplo de par\u00e1grafo em HTML.&lt;/p&gt;\n      &lt;ul&gt;\n        &lt;li&gt;Item 1 da lista&lt;/li&gt;\n        &lt;li&gt;Item 2 da lista&lt;/li&gt;\n        &lt;li&gt;Item 3 da lista&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre> <p>O c\u00f3digo acima mostra uma p\u00e1gina HTML simples com identa\u00e7\u00e3o. Observe que as tags HTML dentro de outras tags HTML est\u00e3o indentadas com dois espa\u00e7os para facilitar a leitura e entender a hierarquia do c\u00f3digo.</p> <p>A identa\u00e7\u00e3o em HTML \u00e9 uma boa pr\u00e1tica de codifica\u00e7\u00e3o, pois torna o c\u00f3digo mais f\u00e1cil de ler e entender. Tamb\u00e9m ajuda a detectar erros de codifica\u00e7\u00e3o e manter uma estrutura organizada do c\u00f3digo. No entanto, \u00e9 importante lembrar que a identa\u00e7\u00e3o n\u00e3o afeta o funcionamento do c\u00f3digo HTML. \u00c9 apenas uma pr\u00e1tica recomendada para tornar o c\u00f3digo mais leg\u00edvel e f\u00e1cil de manter.</p>"},{"location":"html_css/_03_div/","title":"03 div","text":""},{"location":"html_css/_03_div/#div","title":"Div","text":"<p>A tag <code>&lt;div&gt;</code> \u00e9 uma das tags mais utilizadas em HTML e \u00e9 usada para criar se\u00e7\u00f5es ou grupos de conte\u00fado em uma p\u00e1gina da web. A tag <code>&lt;div&gt;</code> n\u00e3o tem um significado espec\u00edfico, mas \u00e9 usada para criar cont\u00eaineres de bloco que podem ser estilizados ou manipulados com CSS ou JavaScript.</p> <pre><code>  &lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n    &lt;head&gt;\n      &lt;title&gt;T\u00edtulo da p\u00e1gina&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;div&gt;\n        &lt;h1&gt;Este \u00e9 um t\u00edtulo principal&lt;/h1&gt;\n        &lt;p&gt;Este \u00e9 um exemplo de par\u00e1grafo em HTML.&lt;/p&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;h2&gt;Este \u00e9 um t\u00edtulo secund\u00e1rio&lt;/h2&gt;\n        &lt;ul&gt;\n          &lt;li&gt;Item 1 da lista&lt;/li&gt;\n          &lt;li&gt;Item 2 da lista&lt;/li&gt;\n          &lt;li&gt;Item 3 da lista&lt;/li&gt;\n        &lt;/ul&gt;\n      &lt;/div&gt;\n    &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre> <p>No exemplo acima, a tag <code>&lt;div&gt;</code> \u00e9 usada para agrupar o conte\u00fado em duas se\u00e7\u00f5es separadas. A primeira se\u00e7\u00e3o cont\u00e9m um t\u00edtulo principal e um par\u00e1grafo, enquanto a segunda se\u00e7\u00e3o cont\u00e9m um t\u00edtulo secund\u00e1rio e uma lista.</p> <p>A tag <code>&lt;div&gt;</code> \u00e9 muito \u00fatil para organizar e estruturar o conte\u00fado de uma p\u00e1gina da web. Ela permite que voc\u00ea agrupe diferentes elementos em uma se\u00e7\u00e3o l\u00f3gica, o que torna o c\u00f3digo HTML mais f\u00e1cil de entender e manter. Al\u00e9m disso, a tag <code>&lt;div&gt;</code> \u00e9 frequentemente usada para criar layouts complexos em combina\u00e7\u00e3o com CSS.</p>"},{"location":"html_css/_03_div/#exercicios-de-fixacao","title":"Exerc\u00edcios de Fixa\u00e7\u00e3o","text":"<ul> <li> <p>01 - P\u00e1gina de perfil: Crie uma p\u00e1gina de perfil simples com uma imagem de perfil, nome do usu\u00e1rio, uma breve descri\u00e7\u00e3o e alguns interesses listados em par\u00e1grafos separados.</p> </li> <li> <p>02 - Lista de tarefas: Crie uma lista de tarefas com caixas de sele\u00e7\u00e3o para cada uma. Use divs para agrupar as tarefas e adicione um t\u00edtulo para a lista.</p> </li> <li> <p>03 - Card de produto: Crie um card de produto com uma imagem, nome, pre\u00e7o e descri\u00e7\u00e3o do produto.</p> </li> </ul>"},{"location":"html_css/_04_introdu%C3%A7%C3%A3o-css/","title":"04 introdu\u00e7\u00e3o css","text":""},{"location":"html_css/_04_introdu%C3%A7%C3%A3o-css/#introducao-a-css","title":"Introdu\u00e7\u00e3o a CSS","text":"<p>CSS (Cascading Style Sheets) \u00e9 uma linguagem de estilo utilizada para descrever a apar\u00eancia e o layout de p\u00e1ginas da web. Ele trabalha em conjunto com HTML e JavaScript para criar efeitos visuais, como cores, fontes, tamanhos, margens, espa\u00e7amentos, posicionamentos e outros elementos de design.</p> <p>CSS foi desenvolvido para permitir a separa\u00e7\u00e3o do conte\u00fado e da apresenta\u00e7\u00e3o em uma p\u00e1gina da web, o que facilita o desenvolvimento e a manuten\u00e7\u00e3o do c\u00f3digo. Em vez de codificar a apar\u00eancia diretamente em cada elemento HTML, as propriedades de estilo s\u00e3o definidas em uma folha de estilo CSS separada, que \u00e9 ent\u00e3o aplicada a todos os elementos HTML que compartilham as mesmas caracter\u00edsticas.</p> <p>A linguagem CSS \u00e9 composta de regras, que definem como um elemento HTML deve ser estilizado. Uma regra CSS \u00e9 composta por um seletor, que identifica o elemento HTML que ser\u00e1 estilizado, e um bloco de declara\u00e7\u00f5es, que define as propriedades de estilo que ser\u00e3o aplicadas ao elemento.</p> <pre><code>  /*Seletor*/\nh1 {\n/*Bloco de declara\u00e7\u00f5es*/\ncolor: blue;\nfont-size: 24px;\ntext-align: center;\n}\n</code></pre> <p>Neste exemplo, a regra CSS define um estilo para todos os elementos <code>&lt;h1&gt;</code> na p\u00e1gina. As declara\u00e7\u00f5es definem a cor do texto como azul, o tamanho da fonte como 24 pixels e o alinhamento do texto como centralizado.</p> <p>Tamb\u00e9m  \u00e9 poss\u00edvel incluir estilos CSS diretamente na p\u00e1gina HTML usando a tag <code>&lt;style&gt;</code> no cabe\u00e7alho da p\u00e1gina ou diretamente em um elemento HTML usando o atributo \"style\".</p> <pre><code>  &lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n    &lt;head&gt;\n      &lt;style&gt;\nh1 {\ncolor: blue;\nfont-size: 24px;\n}\n&lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;h1&gt;Este \u00e9 um cabe\u00e7alho com estilo definido em uma tag &amp;lt;style&amp;gt;.&lt;/h1&gt;\n      &lt;p style=\"color: red;\"&gt;Este \u00e9 um par\u00e1grafo com estilo definido em um atributo \"style\".&lt;/p&gt;\n    &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre> <p>Neste exemplo, a tag <code>&lt;style&gt;</code> \u00e9 usada para definir as regras CSS para os elementos HTML na p\u00e1gina. O atributo \"style\" \u00e9 usado para definir o estilo diretamente em um elemento HTML espec\u00edfico.</p>"},{"location":"html_css/_04_introdu%C3%A7%C3%A3o-css/#importando-arquivos-css","title":"Importando arquivos css","text":"<p>Para importar um arquivo CSS em uma p\u00e1gina HTML, \u00e9 necess\u00e1rio incluir uma tag <code>&lt;link&gt;</code> no cabe\u00e7alho da p\u00e1gina HTML. A tag <code>&lt;link&gt;</code> \u00e9 usada para carregar um arquivo externo, como um arquivo CSS, e conect\u00e1-lo \u00e0 p\u00e1gina HTML.</p> <p>O atributo rel define o tipo de relacionamento entre a p\u00e1gina HTML e o arquivo CSS e deve ser definido como \"stylesheet\". O atributo href especifica o caminho do arquivo CSS que ser\u00e1 carregado.</p> <p>Para importar um arquivo CSS armazenado no mesmo diret\u00f3rio da p\u00e1gina HTML, o caminho do arquivo CSS pode ser especificado simplesmente pelo nome do arquivo.</p> <pre><code>  &lt;link rel=\"stylesheet\" href=\"estilo.css\"&gt;\n</code></pre> <p>Para importar um arquivo CSS armazenado em um diret\u00f3rio diferente, o caminho do arquivo CSS deve ser especificado de acordo com a estrutura de diret\u00f3rios.</p> <pre><code>  &lt;link rel=\"stylesheet\" href=\"css/estilo.css\"&gt;\n</code></pre> <p>Essa tag <code>&lt;link&gt;</code> deve ser adicionada dentro da se\u00e7\u00e3o <code>&lt;head&gt;</code> da p\u00e1gina HTML.</p> <pre><code>  &lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n    &lt;head&gt;\n      &lt;link rel=\"stylesheet\" href=\"estilo.css\"&gt;\n      &lt;title&gt;Minha p\u00e1gina HTML&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;p&gt;Ol\u00e1, mundo!&lt;/p&gt;\n    &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre> <p>Dessa forma, a p\u00e1gina HTML pode ser estilizada com as regras CSS definidas no arquivo importado.</p>"},{"location":"html_css/_04_introdu%C3%A7%C3%A3o-css/#identificacao-de-elementos","title":"Identifica\u00e7\u00e3o de elementos","text":"<p>Existem v\u00e1rias maneiras de identificar um elemento HTML, como nome da tag, classe e ID, e cada uma delas tem sua pr\u00f3pria forma de refer\u00eancia em CSS.</p>"},{"location":"html_css/_04_introdu%C3%A7%C3%A3o-css/#identificacao-por-nome-de-tag","title":"Identifica\u00e7\u00e3o por nome de tag","text":"<p>Para identificar um elemento usando a tag, basta referenciar o nome da tag.</p> <pre><code>  &lt;p&gt;Este \u00e9 um par\u00e1grafo.&lt;/p&gt;\n</code></pre> <p>Para referenciar um elemento HTML por nome de tag em CSS, basta escrever o nome da tag sem aspas.</p> <pre><code>  p {\nfont-size: 16px;\ncolor: #333;\n}\n</code></pre> <p>O c\u00f3digo acima define um estilo para todos os elementos <code>&lt;p&gt;</code> da p\u00e1gina.</p>"},{"location":"html_css/_04_introdu%C3%A7%C3%A3o-css/#identificacao-por-classe","title":"Identifica\u00e7\u00e3o por classe","text":"<p>A classe \u00e9 um atributo que pode ser atribu\u00eddo a um elemento e permite que os elementos sejam agrupados e estilizados em conjunto. Para identificar um elemento usando a classe, basta referenciar o nome da classe.</p> <pre><code>  &lt;p class=\"destaque\"&gt;Este \u00e9 um par\u00e1grafo destacado.&lt;/p&gt;\n</code></pre> <p>Para referenciar um elemento HTML por classe em CSS, use o seletor de classe, que \u00e9 um ponto seguido pelo nome da classe.</p> <pre><code>  .destaque {\nfont-weight: bold;\ncolor: blue;\n}\n</code></pre> <p>O c\u00f3digo acima define um estilo para todos os elementos com a classe \"destaque\".</p>"},{"location":"html_css/_04_introdu%C3%A7%C3%A3o-css/#identificacao-por-id","title":"Identifica\u00e7\u00e3o por ID","text":"<p>O ID \u00e9 um atributo que \u00e9 atribu\u00eddo a um \u00fanico elemento e \u00e9 usado para identific\u00e1-lo de forma exclusiva. Para identificar um elemento usando o ID, basta referenciar o nome do ID</p> <pre><code>  &lt;p id=\"paragrafo1\"&gt;Este \u00e9 um par\u00e1grafo com ID.&lt;/p&gt;\n</code></pre> <p>Para referenciar um elemento HTML por ID em CSS, use o seletor de ID, que \u00e9 uma hashtag seguida pelo nome do ID.</p> <pre><code>  #paragrafo1 {\nbackground-color: yellow;\n}\n</code></pre> <p>O c\u00f3digo acima define um estilo para o elemento com o ID \"paragrafo1\".</p> <p>A escolha do m\u00e9todo de identifica\u00e7\u00e3o de elemento HTML depende do contexto e das necessidades espec\u00edficas do desenvolvedor. Al\u00e9m disso, \u00e9 importante lembrar que a especificidade dos seletores CSS \u00e9 levada em considera\u00e7\u00e3o quando v\u00e1rios estilos se aplicam ao mesmo elemento, o que pode levar a conflitos e resultados inesperados se n\u00e3o for gerenciado corretamente.</p>"},{"location":"html_css/_05_posicionamento_elementos/","title":"05 posicionamento elementos","text":""},{"location":"html_css/_05_posicionamento_elementos/#posicionamento-de-elementos","title":"Posicionamento de Elementos","text":"<p>O posicionamento de elementos HTML \u00e9 uma das principais maneiras de controlar o layout e a apar\u00eancia de uma p\u00e1gina. Existem v\u00e1rios tipos de posicionamento dispon\u00edveis em HTML e cada um tem sua pr\u00f3pria fun\u00e7\u00e3o e uso espec\u00edfico.</p>"},{"location":"html_css/_05_posicionamento_elementos/#posicionamento-estatico","title":"Posicionamento Est\u00e1tico","text":"<p>O posicionamento est\u00e1tico \u00e9 o tipo de posicionamento padr\u00e3o em HTML. Os elementos com posicionamento est\u00e1tico s\u00e3o posicionados na ordem em que aparecem no c\u00f3digo HTML. O posicionamento est\u00e1tico \u00e9 definido implicitamente em todos os elementos.</p> <pre><code>  &lt;div&gt;Este \u00e9 um elemento com posicionamento est\u00e1tico&lt;/div&gt;\n</code></pre>"},{"location":"html_css/_05_posicionamento_elementos/#posicionamento-relativo","title":"Posicionamento Relativo","text":"<p>Com o posicionamento relativo, \u00e9 poss\u00edvel posicionar um elemento em rela\u00e7\u00e3o \u00e0 sua posi\u00e7\u00e3o original. \u00c9 poss\u00edvel usar as propriedades \"top\", \"right\", \"bottom\" e \"left\" para especificar a dist\u00e2ncia em pixels do elemento em rela\u00e7\u00e3o \u00e0 sua posi\u00e7\u00e3o original.</p> <pre><code>  &lt;div style=\"position: relative; top: 20px; left: 30px;\"&gt;\n    Este \u00e9 um elemento com posicionamento relativo\n  &lt;/div&gt;\n</code></pre>"},{"location":"html_css/_05_posicionamento_elementos/#posicionamento-absoluto","title":"Posicionamento Absoluto","text":"<p>Com o posicionamento absoluto, \u00e9 poss\u00edvel posicionar um elemento em rela\u00e7\u00e3o \u00e0 sua posi\u00e7\u00e3o ancestral mais pr\u00f3xima que tenha posicionamento relativo ou absoluto. \u00c9 poss\u00edvel usar as propriedades \"top\", \"right\", \"bottom\" e \"left\" para especificar a dist\u00e2ncia em pixels do elemento em rela\u00e7\u00e3o \u00e0 sua posi\u00e7\u00e3o ancestral.</p> <pre><code>  &lt;div style=\"position: relative;\"&gt;\n    &lt;div style=\"position: absolute; top: 20px; left: 30px;\"&gt;\n      Este \u00e9 um elemento com posicionamento absoluto\n    &lt;/div&gt;\n  &lt;/div&gt;\n</code></pre>"},{"location":"html_css/_05_posicionamento_elementos/#posicionamento-fixo","title":"Posicionamento Fixo","text":"<p>Com o posicionamento fixo, \u00e9 poss\u00edvel posicionar um elemento em rela\u00e7\u00e3o \u00e0 janela do navegador. O elemento permanecer\u00e1 fixo em sua posi\u00e7\u00e3o, mesmo quando a p\u00e1gina for rolada. \u00c9 poss\u00edvel usar as propriedades \"top\", \"right\", \"bottom\" e \"left\" para especificar a dist\u00e2ncia em pixels do elemento em rela\u00e7\u00e3o \u00e0 borda da janela do navegador.</p> <pre><code>  &lt;div style=\"position: fixed; top: 20px; right: 30px;\"&gt;\n    Este \u00e9 um elemento com posicionamento fixo\n  &lt;/div&gt;\n</code></pre>"},{"location":"html_css/_05_posicionamento_elementos/#posicionamento-em-grade","title":"Posicionamento em Grade","text":"<p>Com o posicionamento em grade, \u00e9 poss\u00edvel criar uma estrutura de linhas e colunas em uma p\u00e1gina e posicionar elementos nessa estrutura. O posicionamento em grade \u00e9 definido usando as propriedades \"display: grid\" e \"grid-template-rows\", \"grid-template-columns\" e \"grid-gap\".</p> <pre><code>  &lt;div style=\"display: grid; grid-template-rows: 50px 50px; grid-template-columns: 100px 100px; grid-gap: 10px;\"&gt;\n    &lt;div style=\"background-color: yellow;\"&gt;A&lt;/div&gt;\n    &lt;div style=\"background-color: blue;\"&gt;B&lt;/div&gt;\n    &lt;div style=\"background-color: green;\"&gt;C&lt;/div&gt;\n    &lt;div style=\"background-color: red;\"&gt;D&lt;/div&gt;\n  &lt;/div&gt;\n</code></pre>"},{"location":"html_css/_06_posicionamento_texto/","title":"06 posicionamento texto","text":""},{"location":"html_css/_06_posicionamento_texto/#posicionamento-de-texto","title":"Posicionamento de Texto","text":"<p>O posicionamento de texto em uma p\u00e1gina HTML \u00e9 t\u00e3o importante quanto o posicionamento de elementos, pois pode afetar a legibilidade e o fluxo visual da p\u00e1gina. Existem v\u00e1rias maneiras de posicionar o texto em uma p\u00e1gina HTML.</p>"},{"location":"html_css/_06_posicionamento_texto/#texto-alinhado","title":"Texto Alinhado","text":"<p>O alinhamento do texto \u00e9 a maneira mais comum de posicion\u00e1-lo em uma p\u00e1gina HTML. O texto pode ser alinhado \u00e0 esquerda, \u00e0 direita, ao centro ou justificado (onde o espa\u00e7o entre as palavras \u00e9 ajustado para que as linhas de texto fiquem alinhadas nas bordas esquerda e direita da p\u00e1gina).</p> <pre><code>  &lt;p style=\"text-align: left;\"&gt;Este \u00e9 um texto alinhado \u00e0 esquerda.&lt;/p&gt;\n  &lt;p style=\"text-align: right;\"&gt;Este \u00e9 um texto alinhado \u00e0 direita.&lt;/p&gt;\n  &lt;p style=\"text-align: center;\"&gt;Este \u00e9 um texto centralizado.&lt;/p&gt;\n  &lt;p style=\"text-align: justify;\"&gt;Este \u00e9 um texto justificado.&lt;/p&gt;\n</code></pre>"},{"location":"html_css/_06_posicionamento_texto/#texto-em-colunas","title":"Texto em Colunas","text":"<p>O texto em colunas \u00e9 usado para dividir o conte\u00fado de um par\u00e1grafo ou uma se\u00e7\u00e3o em v\u00e1rias colunas. Isso \u00e9 \u00fatil para manter um layout organizado e aumentar a legibilidade.</p> <pre><code>  &lt;div style=\"column-count: 2;\"&gt;\n    &lt;p&gt;Este \u00e9 um texto dividido em duas colunas.&lt;/p&gt;\n    &lt;p&gt;Isso \u00e9 \u00fatil para manter um layout organizado e aumentar a legibilidade.&lt;/p&gt;\n  &lt;/div&gt;\n</code></pre>"},{"location":"html_css/_06_posicionamento_texto/#texto-flutuante","title":"Texto Flutuante","text":"<p>O texto flutuante \u00e9 usado para posicionar o texto ao lado de uma imagem ou outro elemento. O texto flutuante pode ser alinhado \u00e0 esquerda ou \u00e0 direita do elemento em que est\u00e1 flutuando.</p> <pre><code>  &lt;img src=\"imagem.jpg\" style=\"float: left;\"&gt;\n  &lt;p&gt;Este \u00e9 um texto flutuante \u00e0 esquerda de uma imagem.&lt;/p&gt;\n\n  &lt;img src=\"imagem.jpg\" style=\"float: right;\"&gt;\n  &lt;p&gt;Este \u00e9 um texto flutuante \u00e0 direita de uma imagem.&lt;/p&gt;\n</code></pre>"},{"location":"html_css/_07_posicionamento_imagem/","title":"07 posicionamento imagem","text":""},{"location":"html_css/_07_posicionamento_imagem/#posicionando","title":"Posicionando","text":"<p>O posicionamento de imagens em uma p\u00e1gina HTML \u00e9 importante para aprimorar a apar\u00eancia visual e a legibilidade da p\u00e1gina. Existem v\u00e1rias maneiras de posicionar uma imagem em uma p\u00e1gina HTML.</p>"},{"location":"html_css/_07_posicionamento_imagem/#imagem-alinhada","title":"Imagem Alinhada","text":"<p>O alinhamento da imagem \u00e9 a maneira mais comum de posicionar uma imagem em uma p\u00e1gina HTML. A imagem pode ser alinhada \u00e0 esquerda, \u00e0 direita ou centralizada.</p> <pre><code>  &lt;img src=\"imagem.jpg\" style=\"float: left;\"&gt;\n  &lt;p&gt;Esta \u00e9 uma imagem alinhada \u00e0 esquerda.&lt;/p&gt;\n\n  &lt;img src=\"imagem.jpg\" style=\"float: right;\"&gt;\n  &lt;p&gt;Esta \u00e9 uma imagem alinhada \u00e0 direita.&lt;/p&gt;\n\n  &lt;img src=\"imagem.jpg\" style=\"display: block; margin: 0 auto;\"&gt;\n  &lt;p&gt;Esta \u00e9 uma imagem centralizada.&lt;/p&gt;\n</code></pre>"},{"location":"html_css/_07_posicionamento_imagem/#imagem-como-fundo","title":"Imagem como Fundo","text":"<p>A imagem pode ser usada como fundo de uma se\u00e7\u00e3o ou de toda a p\u00e1gina HTML. \u00c9 poss\u00edvel definir a posi\u00e7\u00e3o da imagem no fundo, bem como a repeti\u00e7\u00e3o da imagem no fundo.</p> <pre><code>  &lt;style&gt;\nbody {\nbackground-image: url(\"imagem.jpg\");\nbackground-position: center;\nbackground-repeat: no-repeat;\n}\n&lt;/style&gt;\n  &lt;p&gt;Esta \u00e9 uma p\u00e1gina com imagem de fundo.&lt;/p&gt;\n</code></pre>"},{"location":"html_css/_07_posicionamento_imagem/#imagem-como-link","title":"Imagem como Link","text":"<p>Uma imagem pode ser transformada em um link, de modo que, quando clicada, a imagem direciona o usu\u00e1rio para outra p\u00e1gina ou se\u00e7\u00e3o.</p> <pre><code>  &lt;a href=\"https://exemplo.com\"&gt;\n    &lt;img src=\"imagem.jpg\"&gt;\n  &lt;/a&gt;\n  &lt;p&gt;Esta imagem \u00e9 um link para outro site.&lt;/p&gt;\n</code></pre>"},{"location":"html_css/_07_posicionamento_imagem/#exercicios-de-fixacao","title":"Exerc\u00edcios de Fixa\u00e7\u00e3o","text":"<ul> <li> <p>04 - Criando uma imagem de fundo responsiva: Crie uma imagem de fundo que se ajuste ao tamanho da tela do dispositivo. Use a tag background-image para definir a imagem de fundo e a tag background-size para ajustar o tamanho da imagem.</p> </li> <li> <p>05 - Posicionando um elemento no rodap\u00e9 da p\u00e1gina: Crie um layout onde um elemento de texto esteja sempre posicionado no rodap\u00e9 da p\u00e1gina. Use a tag position para posicionar o elemento no rodap\u00e9 e a tag bottom para alinhar o elemento \u00e0 parte inferior da p\u00e1gina.</p> </li> </ul>"},{"location":"html_css/_08_listas/","title":"08 listas","text":""},{"location":"html_css/_08_listas/#tipos-de-listas","title":"Tipos de Listas","text":"<p>Em HTML, existem tr\u00eas tipos principais de listas: lista ordenada, lista n\u00e3o ordenada e lista de defini\u00e7\u00e3o.</p>"},{"location":"html_css/_08_listas/#lista-ordenada","title":"Lista ordenada","text":"<p>Uma lista ordenada \u00e9 usada para listar itens em uma ordem espec\u00edfica, com cada item numerado ou com um marcador personalizado. Para criar uma lista ordenada, use a tag <code>&lt;ol&gt;</code> e as tags <code>&lt;li&gt;</code> para cada item da lista:</p> <pre><code>  &lt;ol&gt;\n    &lt;li&gt;Primeiro item&lt;/li&gt;\n    &lt;li&gt;Segundo item&lt;/li&gt;\n    &lt;li&gt;Terceiro item&lt;/li&gt;\n  &lt;/ol&gt;\n</code></pre>"},{"location":"html_css/_08_listas/#lista-nao-ordenada","title":"Lista n\u00e3o ordenada","text":"<p>Uma lista n\u00e3o ordenada \u00e9 usada para listar itens sem uma ordem espec\u00edfica, com cada item marcado por um ponto, c\u00edrculo ou outro s\u00edmbolo personalizado. Para criar uma lista n\u00e3o ordenada, use a tag <code>&lt;ul&gt;</code> e as tags <code>&lt;li&gt;</code> para cada item da lista:</p> <pre><code>  &lt;ul&gt;\n    &lt;li&gt;Item 1&lt;/li&gt;\n    &lt;li&gt;Item 2&lt;/li&gt;\n    &lt;li&gt;Item 3&lt;/li&gt;\n  &lt;/ul&gt;\n</code></pre>"},{"location":"html_css/_08_listas/#lista-de-definicao","title":"Lista de defini\u00e7\u00e3o","text":"<p>Uma lista de defini\u00e7\u00e3o \u00e9 usada para listar termos e suas defini\u00e7\u00f5es correspondentes. Para criar uma lista de defini\u00e7\u00e3o, use a tag <code>&lt;dl&gt;</code>, as tags <code>&lt;dt&gt;</code> para os termos e as tags <code>&lt;dd&gt;</code> para as defini\u00e7\u00f5es:</p> <pre><code>  &lt;dl&gt;\n    &lt;dt&gt;Termo 1&lt;/dt&gt;\n    &lt;dd&gt;Defini\u00e7\u00e3o do termo 1&lt;/dd&gt;\n    &lt;dt&gt;Termo 2&lt;/dt&gt;\n    &lt;dd&gt;Defini\u00e7\u00e3o do termo 2&lt;/dd&gt;\n  &lt;/dl&gt;\n</code></pre> <p>Cada tipo de lista pode ser personalizado com CSS para mudar a apar\u00eancia dos itens, marcadores e estilos de layout.</p>"},{"location":"html_css/_09_navegacao/","title":"09 navegacao","text":""},{"location":"html_css/_09_navegacao/#navegacao","title":"Navega\u00e7\u00e3o","text":"<p>A navega\u00e7\u00e3o em HTML \u00e9 uma parte importante da cria\u00e7\u00e3o de sites e permite que os usu\u00e1rios acessem diferentes p\u00e1ginas e se\u00e7\u00f5es do site com facilidade. Existem v\u00e1rias maneiras de criar navega\u00e7\u00e3o em HTML, incluindo links de texto, menus de navega\u00e7\u00e3o e barras de navega\u00e7\u00e3o. Aqui est\u00e3o alguns exemplos de como criar navega\u00e7\u00e3o em HTML.</p>"},{"location":"html_css/_09_navegacao/#links-de-texto","title":"Links de texto","text":"<p>Links de texto s\u00e3o usados para criar links clic\u00e1veis para outras p\u00e1ginas ou se\u00e7\u00f5es do site. Eles s\u00e3o criados usando a tag <code>&lt;a&gt;</code> e o atributo href para especificar o URL da p\u00e1gina de destino.</p> <pre><code>  &lt;a href=\"https://www.exemplo.com\"&gt;Link para o site exemplo&lt;/a&gt;\n</code></pre> <p>O c\u00f3digo acima cria um link de texto clic\u00e1vel que leva o usu\u00e1rio para a p\u00e1gina principal do site exemplo</p>"},{"location":"html_css/_09_navegacao/#menus-de-navegacao","title":"Menus de navega\u00e7\u00e3o","text":"<p>Menus de navega\u00e7\u00e3o s\u00e3o usados para mostrar uma lista de links de texto para diferentes se\u00e7\u00f5es do site, geralmente na parte superior ou na lateral da p\u00e1gina. Eles s\u00e3o criados usando a tag <code>&lt;ul&gt;</code> e as tags <code>&lt;li&gt;</code> para cada item de menu, junto com as tags <code>&lt;a&gt;</code> e href para criar links clic\u00e1veis.</p> <pre><code>  &lt;ul&gt;\n    &lt;li&gt;&lt;a href=\"https://www.exemplo.com/home\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"https://www.exemplo.com/sobre\"&gt;Sobre&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"https://www.exemplo.com/produtos\"&gt;Produtos&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"https://www.exemplo.com/contato\"&gt;Contato&lt;/a&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n</code></pre> <p>O c\u00f3digo acima cria um menu de navega\u00e7\u00e3o com quatro links de texto para diferentes se\u00e7\u00f5es do site.</p>"},{"location":"html_css/_09_navegacao/#barras-de-navegacao","title":"Barras de navega\u00e7\u00e3o","text":"<p>Barras de navega\u00e7\u00e3o s\u00e3o semelhantes aos menus de navega\u00e7\u00e3o, mas geralmente incluem mais elementos, como um logotipo e um formul\u00e1rio de pesquisa. Elas s\u00e3o criadas usando a tag <code>&lt;nav&gt;</code> e as mesmas tags <code>&lt;ul&gt;</code>, <code>&lt;li&gt;</code>, <code>&lt;a&gt;</code> e href usadas em menus de navega\u00e7\u00e3o.</p> <pre><code>  &lt;nav&gt;\n    &lt;ul&gt;\n      &lt;li&gt;&lt;a href=\"https://www.exemplo.com\"&gt;&lt;img src=\"logo.png\" alt=\"Logo\"&gt;&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"https://www.exemplo.com/home\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"https://www.exemplo.com/sobre\"&gt;Sobre&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"https://www.exemplo.com/produtos\"&gt;Produtos&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"https://www.exemplo.com/contato\"&gt;Contato&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;\n        &lt;form action=\"https://www.exemplo.com/pesquisa\"&gt;\n          &lt;input type=\"text\" placeholder=\"Pesquisar\"&gt;\n          &lt;button type=\"submit\"&gt;Buscar&lt;/button&gt;\n        &lt;/form&gt;\n      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/nav&gt;\n</code></pre> <p>O c\u00f3digo acima cria uma barra de navega\u00e7\u00e3o com um logotipo, links de texto para diferentes se\u00e7\u00f5es do site e um formul\u00e1rio de pesquisa.</p> <p>A navega\u00e7\u00e3o pode ser personalizada com CSS para mudar a apar\u00eancia dos links de texto, menus e barras de navega\u00e7\u00e3o.</p>"},{"location":"html_css/_09_navegacao/#exercicios-de-fixacao","title":"Exerc\u00edcios de Fixa\u00e7\u00e3o","text":"<ul> <li> <p>06 - Criando um menu horizontal: Crie um menu horizontal com links para outras p\u00e1ginas. Use a tag display para transformar a lista de links em uma barra horizontal e a tag text-align para alinhar o texto ao centro da barra.</p> </li> <li> <p>07 - Crie uma lista de navega\u00e7\u00e3o para o site de uma empresa fict\u00edcia de tecnologia. A lista deve conter links para as seguintes se\u00e7\u00f5es do site: Home, Sobre N\u00f3s, Servi\u00e7os, Produtos e Contato. Al\u00e9m disso, crie uma lista de servi\u00e7os oferecidos pela empresa, que inclua pelo menos 3 itens, e posicione-a abaixo da se\u00e7\u00e3o de servi\u00e7os da lista de navega\u00e7\u00e3o.</p> </li> </ul>"},{"location":"html_css/_10_elementos_formulario/","title":"10 elementos formulario","text":""},{"location":"html_css/_10_elementos_formulario/#elementos-de-formulario","title":"Elementos de Formul\u00e1rio","text":"<p>Elementos de formul\u00e1rio HTML s\u00e3o usados \u200b\u200bpara coletar informa\u00e7\u00f5es do usu\u00e1rio, como nome, endere\u00e7o, senha, etc.</p>"},{"location":"html_css/_10_elementos_formulario/#rotulo","title":"R\u00f3tulo","text":"<p>A tag <code>&lt;label&gt;</code> em HTML \u00e9 usada para associar um r\u00f3tulo descritivo a um elemento de formul\u00e1rio, como um campo de texto ou uma caixa de sele\u00e7\u00e3o. Isso ajuda a tornar os formul\u00e1rios mais acess\u00edveis e f\u00e1ceis de usar para usu\u00e1rios com defici\u00eancia visual, pois permite que o r\u00f3tulo seja lido em conjunto com o elemento de formul\u00e1rio correspondente.</p> <p>O atributo \"for\" deve ser usado para especificar o ID do elemento de formul\u00e1rio correspondente. Por exemplo, se voc\u00ea tiver um campo de texto com o ID \"nome\" e quiser associar um r\u00f3tulo a ele.</p> <pre><code>  &lt;label for=\"nome\"&gt;Nome:&lt;/label&gt;\n  &lt;input type=\"text\" id=\"nome\" name=\"nome\"&gt;\n</code></pre>"},{"location":"html_css/_10_elementos_formulario/#campo-de-entrada-de-dados","title":"Campo de Entrada de Dados","text":"<p>O elemento HTML <code>&lt;input&gt;</code> \u00e9 usado para coletar informa\u00e7\u00f5es do usu\u00e1rio por meio de campos de entrada, como texto, senha, caixa de sele\u00e7\u00e3o, bot\u00e3o de op\u00e7\u00e3o, etc.</p>"},{"location":"html_css/_10_elementos_formulario/#campo-de-texto","title":"Campo de texto","text":"<p>O campo de texto \u00e9 usado para permitir que o usu\u00e1rio insira texto.</p> <pre><code>  &lt;input type=\"text\" name=\"nome\" placeholder=\"Digite seu nome\"&gt;\n</code></pre>"},{"location":"html_css/_10_elementos_formulario/#campo-de-senha","title":"Campo de senha","text":"<p>O campo de senha \u00e9 usado para coletar senhas do usu\u00e1rio. Os caracteres digitados s\u00e3o mascarados para impedir que sejam vistos por outras pessoas.</p> <pre><code>  &lt;input type=\"password\" name=\"senha\" placeholder=\"Digite sua senha\"&gt;\n</code></pre>"},{"location":"html_css/_10_elementos_formulario/#caixa-de-selecao","title":"Caixa de sele\u00e7\u00e3o","text":"<p>A caixa de sele\u00e7\u00e3o \u00e9 usada para permitir que o usu\u00e1rio selecione uma ou mais op\u00e7\u00f5es de uma lista de op\u00e7\u00f5es.</p> <pre><code>  &lt;input type=\"checkbox\" name=\"aceitar-termos\" id=\"aceitar-termos\"&gt;\n  &lt;label for=\"aceitar-termos\"&gt;Eu aceito os termos e condi\u00e7\u00f5es&lt;/label&gt;\n</code></pre>"},{"location":"html_css/_10_elementos_formulario/#botao-de-opcao","title":"Bot\u00e3o de op\u00e7\u00e3o","text":"<p>O bot\u00e3o de op\u00e7\u00e3o \u00e9 usado para permitir que o usu\u00e1rio selecione uma op\u00e7\u00e3o de uma lista de op\u00e7\u00f5es.</p> <pre><code>  &lt;input type=\"radio\" name=\"genero\" value=\"masculino\" id=\"masculino\"&gt;\n  &lt;label for=\"masculino\"&gt;Masculino&lt;/label&gt;\n  &lt;input type=\"radio\" name=\"genero\" value=\"feminino\" id=\"feminino\"&gt;\n  &lt;label for=\"feminino\"&gt;Feminino&lt;/label&gt;\n</code></pre>"},{"location":"html_css/_10_elementos_formulario/#botao-de-verificacao","title":"Bot\u00e3o de Verifica\u00e7\u00e3o","text":"<p>O atributo \"type\" deve ser definido como \"checkbox\" para indicar que \u00e9 um campo de sele\u00e7\u00e3o de caixa de verifica\u00e7\u00e3o. O atributo \"name\" \u00e9 usado para identificar o campo de entrada quando o formul\u00e1rio \u00e9 enviado, e o atributo \"value\" \u00e9 usado para especificar o valor que ser\u00e1 enviado junto com o nome do campo.</p> <pre><code>  &lt;form&gt;\n    &lt;input type=\"checkbox\" name=\"opcao1\" value=\"valor1\"&gt; Op\u00e7\u00e3o 1 &lt;br&gt;\n    &lt;input type=\"checkbox\" name=\"opcao2\" value=\"valor2\"&gt; Op\u00e7\u00e3o 2 &lt;br&gt;\n    &lt;input type=\"checkbox\" name=\"opcao3\" value=\"valor3\"&gt; Op\u00e7\u00e3o 3 &lt;br&gt;\n  &lt;/form&gt;\n</code></pre> <p>Quando o formul\u00e1rio \u00e9 enviado, o nome da caixa de sele\u00e7\u00e3o selecionada ser\u00e1 enviado junto com o valor correspondente. Se a caixa de sele\u00e7\u00e3o n\u00e3o estiver marcada, o nome da caixa de sele\u00e7\u00e3o n\u00e3o ser\u00e1 enviado.</p>"},{"location":"html_css/_10_elementos_formulario/#botao-input","title":"Bot\u00e3o Input","text":"<p>O bot\u00e3o \u00e9 usado para criar bot\u00f5es clic\u00e1veis.</p> <pre><code>  &lt;input type=\"submit\" value=\"Enviar\"&gt;\n</code></pre>"},{"location":"html_css/_10_elementos_formulario/#area-de-texto","title":"Area de Texto","text":"<p>O elemento HTML <code>&lt;textarea&gt;</code> \u00e9 usado para permitir que o usu\u00e1rio insira v\u00e1rias linhas de texto.</p> <pre><code>  &lt;textarea name=\"mensagem\" rows=\"5\" cols=\"40\"&gt;\n    Digite sua mensagem aqui\n  &lt;/textarea&gt;\n</code></pre> <p>Neste exemplo, o elemento <code>&lt;textarea&gt;</code> cria uma caixa de texto com 5 linhas e 40 colunas para o usu\u00e1rio inserir sua mensagem. O texto \"Digite sua mensagem aqui\" \u00e9 o texto de preenchimento, que \u00e9 exibido na caixa de texto at\u00e9 que o usu\u00e1rio comece a digitar.</p> <p>O atributo name \u00e9 usado para identificar o campo de texto ao enviar o formul\u00e1rio. Quando o formul\u00e1rio \u00e9 enviado, o valor da caixa de texto \u00e9 enviado como parte dos dados do formul\u00e1rio com o nome especificado no atributo name.</p>"},{"location":"html_css/_10_elementos_formulario/#botao","title":"Bot\u00e3o","text":"<p>Em HTML, existem v\u00e1rios tipos de bot\u00f5es que podem ser criados usando a tag <code>&lt;button&gt;</code>.</p>"},{"location":"html_css/_10_elementos_formulario/#botao-padrao","title":"Bot\u00e3o padr\u00e3o","text":"<pre><code>  &lt;button&gt;Enviar&lt;/button&gt;\n</code></pre>"},{"location":"html_css/_10_elementos_formulario/#botao-com-imagem","title":"Bot\u00e3o com imagem","text":"<pre><code>  &lt;button&gt;&lt;img src=\"icone.png\" alt=\"\u00cdcone\"&gt;Enviar&lt;/button&gt;\n</code></pre>"},{"location":"html_css/_10_elementos_formulario/#botao-com-icone","title":"Bot\u00e3o com \u00edcone","text":"<pre><code>  &lt;button&gt;&lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt;Enviar&lt;/button&gt;\n</code></pre>"},{"location":"html_css/_10_elementos_formulario/#botao-de-envio-de-formulario","title":"Bot\u00e3o de envio de formul\u00e1rio","text":"<pre><code>  &lt;input type=\"submit\" value=\"Enviar\"&gt;\n</code></pre>"},{"location":"html_css/_10_elementos_formulario/#botao-de-resetar-formulario","title":"Bot\u00e3o de resetar formul\u00e1rio","text":"<pre><code>  &lt;input type=\"reset\" value=\"Limpar\"&gt;\n</code></pre>"},{"location":"html_css/_10_elementos_formulario/#botao-com-funcao-javascript","title":"Bot\u00e3o com fun\u00e7\u00e3o JavaScript","text":"<pre><code>  &lt;button onclick=\"alert('Bot\u00e3o clicado')\"&gt;Clique aqui&lt;/button&gt;\n</code></pre>"},{"location":"html_css/_11_formulario/","title":"11 formulario","text":""},{"location":"html_css/_11_formulario/#formulario","title":"Formul\u00e1rio","text":"<p>\u00c9 poss\u00edvel criar formul\u00e1rios para coletar informa\u00e7\u00f5es do usu\u00e1rio. Os formul\u00e1rios s\u00e3o criados usando a tag <code>&lt;form&gt;</code> e podem conter v\u00e1rios tipos de campos, como campos de texto, bot\u00f5es, caixas de sele\u00e7\u00e3o e bot\u00f5es de op\u00e7\u00e3o.</p> <pre><code>  &lt;form&gt;\n    &lt;label for=\"nome\"&gt;Nome:&lt;/label&gt;\n    &lt;input type=\"text\" id=\"nome\" name=\"nome\"&gt;&lt;br&gt;\n\n    &lt;label for=\"email\"&gt;Email:&lt;/label&gt;\n    &lt;input type=\"email\" id=\"email\" name=\"email\"&gt;&lt;br&gt;\n\n    &lt;label for=\"mensagem\"&gt;Mensagem:&lt;/label&gt;\n    &lt;textarea id=\"mensagem\" name=\"mensagem\"&gt;&lt;/textarea&gt;&lt;br&gt;\n\n    &lt;input type=\"submit\" value=\"Enviar\"&gt;\n  &lt;/form&gt;\n</code></pre> <p>O formul\u00e1rio possui tr\u00eas campos: um campo de texto para o nome do usu\u00e1rio, um campo de e-mail e uma caixa de texto para a mensagem. Cada campo \u00e9 criado usando a tag <code>&lt;input&gt;</code> ou a tag <code>&lt;textarea&gt;</code>, e o atributo \"type\" \u00e9 usado para especificar o tipo de campo. O atributo \"id\" \u00e9 usado para identificar exclusivamente cada campo, e o atributo \"name\" \u00e9 usado para enviar os valores do campo para o servidor quando o formul\u00e1rio \u00e9 enviado.</p> <p>O bot\u00e3o de envio \u00e9 criado usando a tag <code>&lt;input&gt;</code> com o atributo \"type\" definido como \"submit\". Quando o usu\u00e1rio clica no bot\u00e3o, o formul\u00e1rio \u00e9 enviado para o servidor para processamento. Tamb\u00e9m \u00e9 poss\u00edvel criar bot\u00f5es de resetar usando a tag <code>&lt;input&gt;</code> com o atributo \"type\" definido como \"reset\".</p> <p>\u00c9 poss\u00edvel estilizar os formul\u00e1rios usando CSS, e tamb\u00e9m \u00e9 poss\u00edvel adicionar valida\u00e7\u00e3o de formul\u00e1rio usando JavaScript para garantir que os usu\u00e1rios preencham os campos corretamente antes de enviar o formul\u00e1rio.</p>"},{"location":"html_css/_11_formulario/#exercicios-de-fixacao","title":"Exerc\u00edcios de Fixa\u00e7\u00e3o","text":"<ul> <li> <p>08 - Crie um formul\u00e1rio de cadastro de usu\u00e1rio com os seguintes campos: nome, sobrenome, e-mail, telefone e senha. Adicione um bot\u00e3o para enviar o formul\u00e1rio e outro para limpar os campos.</p> </li> <li> <p>09 - Crie um formul\u00e1rio de contato com os seguintes campos: nome, e-mail, assunto e mensagem. Adicione um bot\u00e3o para enviar o formul\u00e1rio e outro para limpar os campos.</p> </li> </ul>"},{"location":"html_css/_12_tabelas/","title":"12 tabelas","text":""},{"location":"html_css/_12_tabelas/#tabelas","title":"Tabelas","text":"<p>As tabelas HTML s\u00e3o usadas para exibir dados em linhas e colunas. As tabelas s\u00e3o compostas de c\u00e9lulas que s\u00e3o organizadas em linhas e colunas.</p> <pre><code>  &lt;table&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Nome&lt;/th&gt;\n      &lt;th&gt;Email&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;Jo\u00e3o&lt;/td&gt;\n      &lt;td&gt;joao@example.com&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;Maria&lt;/td&gt;\n      &lt;td&gt;maria@example.com&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/table&gt;\n</code></pre> <p>A tag <code>&lt;table&gt;</code> \u00e9 usada para criar a tabela. As linhas da tabela s\u00e3o criadas com a tag <code>&lt;tr&gt;</code>, que representa uma linha. As c\u00e9lulas da tabela s\u00e3o criadas com a tag <code>&lt;td&gt;</code>, que representa uma c\u00e9lula de dados. As c\u00e9lulas de cabe\u00e7alho da tabela s\u00e3o criadas com a tag <code>&lt;th&gt;</code>, que representa uma c\u00e9lula de cabe\u00e7alho.</p> <p>A primeira linha da tabela cont\u00e9m as c\u00e9lulas de cabe\u00e7alho. A segunda e terceira linhas cont\u00eam as c\u00e9lulas de dados.</p> <p>Al\u00e9m disso, as tabelas HTML suportam alguns atributos adicionais, como border, que define a largura da borda da tabela, e cellpadding e cellspacing, que definem o espa\u00e7amento entre as c\u00e9lulas da tabela.</p>"},{"location":"html_css/_12_tabelas/#mais-tags-de-tabelas","title":"Mais tags de tabelas","text":"<p>As tags <code>&lt;thead&gt;</code>, <code>&lt;tbody&gt;</code> e <code>&lt;tfoot&gt;</code> s\u00e3o usadas para dividir uma tabela HTML em se\u00e7\u00f5es separadas, tornando-a mais f\u00e1cil de ler e compreender.</p> <p>A tag <code>&lt;thead&gt;</code> \u00e9 usada para criar um cabe\u00e7alho de tabela, que normalmente inclui os t\u00edtulos das colunas. A tag <code>&lt;tbody&gt;</code> \u00e9 usada para criar o corpo da tabela, que cont\u00e9m as linhas e c\u00e9lulas de dados. A tag <code>&lt;tfoot&gt;</code> \u00e9 usada para criar um rodap\u00e9 de tabela, que normalmente inclui resumos e totais.</p> <pre><code>  &lt;table&gt;\n    &lt;thead&gt;\n      &lt;tr&gt;\n        &lt;th&gt;Produto&lt;/th&gt;\n        &lt;th&gt;Pre\u00e7o&lt;/th&gt;\n        &lt;th&gt;Quantidade&lt;/th&gt;\n      &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Ma\u00e7\u00e3s&lt;/td&gt;\n        &lt;td&gt;$2.00&lt;/td&gt;\n        &lt;td&gt;10&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Bananas&lt;/td&gt;\n        &lt;td&gt;$1.50&lt;/td&gt;\n        &lt;td&gt;15&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Laranjas&lt;/td&gt;\n        &lt;td&gt;$2.50&lt;/td&gt;\n        &lt;td&gt;5&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;\n    &lt;tfoot&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Total&lt;/td&gt;\n        &lt;td&gt;&lt;/td&gt;\n        &lt;td&gt;30&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tfoot&gt;\n  &lt;/table&gt;\n</code></pre> <p>A tag <code>&lt;thead&gt;</code> \u00e9 usada para criar o cabe\u00e7alho da tabela com as c\u00e9lulas de cabe\u00e7alho <code>&lt;th&gt;</code>. A tag <code>&lt;tbody&gt;</code> \u00e9 usada para criar o corpo da tabela com as c\u00e9lulas de dados <code>&lt;td&gt;</code>. A tag <code>&lt;tfoot&gt;</code> \u00e9 usada para criar o rodap\u00e9 da tabela com a c\u00e9lula Total.</p> <p>Note que a c\u00e9lula de pre\u00e7o na tag <code>&lt;tfoot&gt;</code> est\u00e1 em branco, j\u00e1 que n\u00e3o faz sentido somar pre\u00e7os.</p> <p>Ao dividir a tabela em se\u00e7\u00f5es com essas tags, \u00e9 poss\u00edvel aplicar estilos diferentes a cada se\u00e7\u00e3o usando CSS, tornando a tabela mais estilizada e f\u00e1cil de ler.</p> <p>As tabelas HTML s\u00e3o frequentemente usadas para exibir dados tabulares, como informa\u00e7\u00f5es de contato, pre\u00e7os de produtos e hor\u00e1rios de eventos. \u00c9 importante lembrar que as tabelas HTML devem ser usadas apenas para dados tabulares e n\u00e3o para formata\u00e7\u00e3o de layout. Para isso, \u00e9 recomendado o uso de CSS.</p>"},{"location":"html_css/_12_tabelas/#exercicios-de-fixacao","title":"Exerc\u00edcios de Fixa\u00e7\u00e3o","text":"<ul> <li> <p>10 - Crie uma tabela com informa\u00e7\u00f5es sobre os alunos de uma turma. A tabela deve conter as colunas: nome, sobrenome, idade e m\u00e9dia.</p> </li> <li> <p>11 - Crie uma tabela com informa\u00e7\u00f5es sobre os produtos de uma loja virtual. A tabela deve conter as colunas: produto, pre\u00e7o e disponibilidade.</p> </li> <li> <p>12 - Crie uma tabela com informa\u00e7\u00f5es sobre os funcion\u00e1rios de uma empresa. A tabela deve conter as colunas: nome, cargo, sal\u00e1rio e data de admiss\u00e3o.</p> </li> </ul>"},{"location":"html_css/_13_normalizacao_css/","title":"13 normalizacao css","text":""},{"location":"html_css/_13_normalizacao_css/#normalizacao-de-css","title":"Normaliza\u00e7\u00e3o de Css","text":"<p>Normaliza\u00e7\u00e3o de css \u00e9 um conjunto de regras que redefine as propriedades de todos os elementos HTML para um estado consistente em diferentes navegadores. Isso ajuda a garantir que a apar\u00eancia do site seja consistente em diferentes plataformas e navegadores.</p> <p>O reset \u00e9 geralmente colocado no in\u00edcio do arquivo CSS para que as propriedades dos elementos possam ser definidas a partir de uma base comum. H\u00e1 v\u00e1rias formas de fazer o reset em CSS, mas geralmente envolve a defini\u00e7\u00e3o das propriedades de margem, preenchimento, borda e fonte para zero ou valores padr\u00e3o</p> <pre><code>* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\nfont-family: Arial, sans-serif;\n}\n\nhtml, body {\nheight: 100%;\n}\n\nbody {\nbackground-color: #f0f0f0;\n}\n</code></pre> <p>Neste exemplo, todas as propriedades de margem e preenchimento s\u00e3o definidas como zero para todos os elementos, e o modelo de caixa \u00e9 definido como \"border-box\", o que significa que a largura e a altura dos elementos incluem a borda e o preenchimento. A fonte padr\u00e3o \u00e9 definida como Arial ou uma fonte sem serifa, para garantir que a fonte seja consistente em diferentes navegadores.</p> <p>As propriedades de altura e largura tamb\u00e9m s\u00e3o definidas como 100% para o elemento html e o corpo, para garantir que o site ocupe toda a janela do navegador. A cor de fundo do corpo \u00e9 definida como #f0f0f0 para dar um fundo cinza claro ao site.</p> <p>O reset de CSS \u00e9 uma boa pr\u00e1tica para garantir a consist\u00eancia na apar\u00eancia do site em diferentes navegadores e plataformas. No entanto, \u00e9 importante lembrar que o reset n\u00e3o \u00e9 uma solu\u00e7\u00e3o universal e pode n\u00e3o ser adequado para todos os projetos, pois pode afetar a apar\u00eancia de elementos personalizados e de terceiros.</p>"},{"location":"html_css/_14_unidades_css/","title":"14 unidades css","text":""},{"location":"html_css/_14_unidades_css/#unidades-do-css","title":"Unidades do CSS","text":"<p>As unidades de medida em CSS s\u00e3o usadas para definir o tamanho e a posi\u00e7\u00e3o dos elementos na p\u00e1gina. Existem v\u00e1rios tipos de unidades, cada um com um prop\u00f3sito espec\u00edfico</p>"},{"location":"html_css/_14_unidades_css/#pixels-px","title":"Pixels (px)","text":"<p>O pixel \u00e9 a unidade de medida mais comum em CSS. \u00c9 uma unidade fixa e refere-se a um \u00fanico pixel na tela. Por exemplo, a propriedade font-size: 16px; define o tamanho da fonte como 16 pixels.</p> <pre><code>  div {\nwidth: 200px;\nheight: 100px;\nfont-size: 16px;\n}\n</code></pre>"},{"location":"html_css/_14_unidades_css/#porcentagem","title":"Porcentagem (%)","text":"<p>A unidade de medida em porcentagem \u00e9 relativa ao tamanho do elemento pai. Por exemplo, a propriedade width: 50%; define a largura do elemento como metade do tamanho do elemento pai.</p> <pre><code>  .parent {\nwidth: 400px;\nheight: 200px;\n}\n\n.child {\nwidth: 50%;\nheight: 100px;\n}\n</code></pre>"},{"location":"html_css/_14_unidades_css/#em-em","title":"Em (em)","text":"<p>O \"em\" \u00e9 uma unidade de medida relativa ao tamanho da fonte do elemento pai. Por exemplo, font-size: 1.2em; define a fonte do elemento como 1,2 vezes maior do que a fonte do elemento pai.</p> <pre><code>  .parent {\nfont-size: 16px;\n}\n\n.child {\nfont-size: 1.2em;\n}\n</code></pre>"},{"location":"html_css/_14_unidades_css/#rem-rem","title":"Rem (rem)","text":"<p>O \"rem\" \u00e9 uma unidade de medida relativa ao tamanho da fonte do elemento raiz, geralmente o elemento HTML. Por exemplo, font-size: 1.2rem; define a fonte do elemento como 1,2 vezes maior do que a fonte do elemento raiz.</p> <pre><code>  html {\nfont-size: 16px;\n}\n\n.child {\nfont-size: 1.2rem;\n}\n</code></pre>"},{"location":"html_css/_14_unidades_css/#viewport-width-vw-e-viewport-height-vh","title":"Viewport Width (vw) e Viewport Height (vh)","text":"<p>Essas unidades de medida s\u00e3o relativas ao tamanho da janela do navegador. Por exemplo, width: 50vw; define a largura do elemento como metade da largura da janela do navegador.</p> <pre><code>  div {\nwidth: 50vw;\nheight: 50vh;\n}\n</code></pre>"},{"location":"html_css/_14_unidades_css/#unidades-absolutas-cm-mm-in-pt","title":"Unidades Absolutas (cm, mm, in, pt)","text":"<p>Essas unidades s\u00e3o absolutas e s\u00e3o baseadas em medidas f\u00edsicas, como polegadas (in), cent\u00edmetros (cm) e pontos (pt). No entanto, essas unidades podem ser menos \u00fateis para a web, pois as medidas f\u00edsicas podem variar em diferentes dispositivos.</p> <pre><code>  div {\nwidth: 5cm;\nheight: 2in;\n}\n</code></pre> <p>\u00c9 importante escolher a unidade certa para o tipo de propriedade que voc\u00ea est\u00e1 definindo, a fim de obter a apar\u00eancia desejada.</p>"},{"location":"html_css/_15_propriedades_css/","title":"15 propriedades css","text":""},{"location":"html_css/_15_propriedades_css/#propriedade-do-css","title":"Propriedade do CSS","text":"<p>As propriedades CSS s\u00e3o utilizadas para definir o estilo e layout dos elementos HTML em uma p\u00e1gina web. Cada propriedade define um aspecto espec\u00edfico do elemento, como cor, tamanho, posi\u00e7\u00e3o, entre outros.</p> <ul> <li> <p>background-color: define a cor de fundo de um elemento. Exemplo: background-color: #F5F5F5; (define um fundo cinza claro)</p> </li> <li> <p>font-size: define o tamanho da fonte do texto de um elemento. Exemplo: font-size: 16px; (define o tamanho da fonte para 16 pixels)</p> </li> <li> <p>border: define a borda de um elemento. Exemplo: border: 1px solid black; (define uma borda s\u00f3lida preta de 1 pixel)</p> </li> <li> <p>width: define a largura de um elemento. Exemplo: width: 300px; (define a largura de um elemento como 300 pixels)</p> </li> <li> <p>height: define a altura de um elemento. Exemplo: height: 200px; (define a altura de um elemento como 200 pixels)</p> </li> <li> <p>margin: define a margem de um elemento. Exemplo: margin: 10px; (define uma margem de 10 pixels em todos os lados do elemento)</p> </li> <li> <p>padding: define o preenchimento interno de um elemento. Exemplo: padding: 20px; (define um preenchimento interno de 20 pixels em todos os lados do elemento).</p> </li> </ul> <p>Para mais propriedades segue o link de referencia: Propriedades</p>"},{"location":"html_css/_15_propriedades_css/#exercicios-de-fixacao","title":"Exerc\u00edcios de Fixa\u00e7\u00e3o","text":"<ul> <li> <p>13 - Crie um elemento com altura de 300px e largura de 500px, com margem de 20px em todas as dire\u00e7\u00f5es e preenchimento de 10px em todas as dire\u00e7\u00f5es.</p> </li> <li> <p>14 - Crie um elemento com altura de 50% da altura do seu elemento pai e largura de 80% da largura do elemento pai.</p> </li> <li> <p>15 - Crie um elemento com borda s\u00f3lida de 2px de espessura, cor vermelha, estilo pontilhado e borda arredondada de 10px.</p> </li> </ul>"},{"location":"html_css/_16_seletores/","title":"16 seletores","text":""},{"location":"html_css/_16_seletores/#seletores","title":"Seletores","text":"<p>Os seletores CSS s\u00e3o utilizados para selecionar elementos HTML com base em suas caracter\u00edsticas ou atributos.</p>"},{"location":"html_css/_16_seletores/#seletor-de-elemento","title":"Seletor de elemento","text":"<p>Seleciona todos os elementos HTML que correspondem ao nome do elemento.</p> <pre><code>  p {\nfont-size: 16px;\ncolor: #333;\n}\n</code></pre>"},{"location":"html_css/_16_seletores/#seletor-de-classe","title":"Seletor de classe","text":"<p>Seleciona todos os elementos HTML que possuem a mesma classe. A classe \u00e9 definida no HTML utilizando o atributo \"class\".</p> <pre><code>  .destaque {\nfont-weight: bold;\ncolor: red;\n}\n</code></pre>"},{"location":"html_css/_16_seletores/#seletor-de-id","title":"Seletor de ID","text":"<p>Seleciona um \u00fanico elemento HTML que possui o mesmo ID. O ID \u00e9 definido no HTML utilizando o atributo \"id\".</p> <pre><code>  #cabecalho {\nbackground-color: #eee;\nheight: 100px;\n}\n</code></pre>"},{"location":"html_css/_16_seletores/#seletor-de-atributo","title":"Seletor de atributo","text":"<p>Seleciona todos os elementos HTML que possuem o atributo especificado.</p> <pre><code>  input[type='text'] {\nborder: 1px solid #ccc;\npadding: 5px;\n}\n</code></pre>"},{"location":"html_css/_16_seletores/#seletor-de-descendencia","title":"Seletor de descend\u00eancia","text":"<p>Seleciona todos os elementos filhos de um determinado elemento pai.</p> <pre><code>  ul li {\nlist-style: none;\nmargin: 5px 0;\n}\n</code></pre>"},{"location":"html_css/_16_seletores/#seletores-de-pseudo-classes","title":"Seletores de pseudo-classes","text":"<p>Os seletores de pseudo-classes CSS permitem selecionar elementos HTML que est\u00e3o em um estado espec\u00edfico ou que possuem caracter\u00edsticas espec\u00edficas que n\u00e3o s\u00e3o representadas no HTML.</p>"},{"location":"html_css/_16_seletores/#pseudo-classe-hover","title":"Pseudo-classe \"hover\"","text":"<p>Seleciona um elemento HTML quando o cursor do mouse \u00e9 posicionado sobre ele.</p> <pre><code>  a:hover {\ntext-decoration: underline;\n}\n</code></pre>"},{"location":"html_css/_16_seletores/#pseudo-classe-active","title":"Pseudo-classe \"active\"","text":"<p>Seleciona um elemento HTML quando ele est\u00e1 sendo clicado.</p> <pre><code>  button:active {\nbackground-color: #ccc;\ncolor: #fff;\n}\n</code></pre>"},{"location":"html_css/_16_seletores/#pseudo-classe-focus","title":"Pseudo-classe \"focus\"","text":"<p>Seleciona um elemento HTML quando ele est\u00e1 em foco.</p> <pre><code>  input:focus {\nborder: 2px solid blue;\n}\n</code></pre>"},{"location":"html_css/_16_seletores/#seletor-de-pseudo-elementos","title":"seletor de pseudo elementos","text":"<p>letores de pseudo-elementos CSS permitem selecionar elementos HTML que n\u00e3o existem no c\u00f3digo HTML, mas que s\u00e3o gerados pelo navegador.</p>"},{"location":"html_css/_16_seletores/#pseudo-elemento-before","title":"Pseudo-elemento \"before\"","text":"<p>Insere conte\u00fado antes do elemento selecionado.</p> <pre><code>  .icon:before {\ncontent: url(icon.png);\n}\n</code></pre>"},{"location":"html_css/_16_seletores/#pseudo-elemento-after","title":"Pseudo-elemento \"after\"","text":"<p>Insere conte\u00fado depois do elemento selecionado.</p> <pre><code>  .quote:after {\ncontent: '\"';\n}\n</code></pre>"},{"location":"html_css/_16_seletores/#pseudo-elemento-first-letter","title":"Pseudo-elemento \"first-letter\"","text":"<p>seleciona a primeira letra de um elemento.</p> <pre><code>  p:first-letter {\nfont-size: 2em;\nfont-weight: bold;\n}\n</code></pre>"},{"location":"html_css/_17_cores_css/","title":"17 cores css","text":""},{"location":"html_css/_17_cores_css/#cores-css","title":"Cores Css","text":"<p>As cores em CSS podem ser definidas de v\u00e1rias maneiras, desde nomes de cores predefinidos at\u00e9 valores RGB, HEX e HSL.</p>"},{"location":"html_css/_17_cores_css/#nome-de-cor","title":"Nome de cor","text":"<p>As cores mais comuns t\u00eam nomes predefinidos em CSS.</p> <pre><code>  color: red;\n</code></pre>"},{"location":"html_css/_17_cores_css/#valor-rgb","title":"Valor RGB","text":"<p>As cores tamb\u00e9m podem ser definidas por seus valores RGB (Red, Green, Blue). Cada valor de cor \u00e9 representado por um n\u00famero entre 0 e 255.</p> <pre><code>  color: rgb(0, 100, 0);\n</code></pre>"},{"location":"html_css/_17_cores_css/#valor-hex","title":"Valor HEX","text":"<p>As cores tamb\u00e9m podem ser definidas por valores HEX, que s\u00e3o representados por um conjunto de seis caracteres alfanum\u00e9ricos. Cada dois caracteres representam um valor RGB, com um valor variando entre 00 e FF</p> <pre><code>  color: #0000FF;\n</code></pre>"},{"location":"html_css/_17_cores_css/#transparencia","title":"Transpar\u00eancia","text":"<p>As cores em CSS tamb\u00e9m podem ser definidas com transpar\u00eancia. Isso pode ser \u00fatil para criar efeitos de camadas e sobreposi\u00e7\u00f5es. A transpar\u00eancia \u00e9 representada por um valor alfa, que varia entre 0 (totalmente transparente) e 1 (totalmente opaco).</p> <pre><code>  color: rgba(0, 0, 255, 0.5);\n</code></pre>"},{"location":"html_css/_17_cores_css/#cores-hsl","title":"Cores HSL","text":"<p>As cores HSL (Hue, Saturation, Lightness) em CSS s\u00e3o definidas por um modelo de cor que utiliza tr\u00eas valores: o matiz (hue), a satura\u00e7\u00e3o (saturation) e a luminosidade (lightness).</p> <p>O valor de matiz \u00e9 representado por um \u00e2ngulo, que varia de 0 a 360 graus, e representa a cor propriamente dita. A satura\u00e7\u00e3o \u00e9 representada por um valor percentual entre 0% e 100%, e indica a intensidade ou pureza da cor. A luminosidade tamb\u00e9m \u00e9 representada por um valor percentual entre 0% e 100%, e indica o brilho da cor.</p> <pre><code>  color: hsl(0, 100%, 50%);\n</code></pre> <p>Tamb\u00e9m \u00e9 poss\u00edvel definir a cor utilizando a fun\u00e7\u00e3o hsla(), que permite definir um valor alfa para transpar\u00eancia.</p> <pre><code>  color: hsla(0, 100%, 50%, 0.5);\n</code></pre>"},{"location":"html_css/_17_cores_css/#exercicios-de-fixacao","title":"Exerc\u00edcios de Fixa\u00e7\u00e3o","text":"<ul> <li>16 - Crie um arquivo HTML com um elemento <code>&lt;div&gt;</code>, defina a cor de fundo da <code>&lt;div&gt;</code> como amarela, defina a cor do texto da <code>&lt;div&gt;</code> como verde, defina a cor da borda da <code>&lt;div&gt;</code> como azul.</li> </ul>"},{"location":"html_css/_18_background_css/","title":"18 background css","text":""},{"location":"html_css/_18_background_css/#backgrounds-css","title":"Backgrounds CSS","text":"<p>As propriedades de background em CSS s\u00e3o utilizadas para definir a apar\u00eancia do fundo de um elemento. Existem v\u00e1rias propriedades que podem ser utilizadas para definir backgrounds em CSS.</p>"},{"location":"html_css/_18_background_css/#background-color","title":"background-color","text":"<p>Define a cor de fundo do elemento.</p> <pre><code>  background-color: white;\n</code></pre>"},{"location":"html_css/_18_background_css/#background-image","title":"background-image","text":"<p>Define uma imagem para ser usada como background.</p> <pre><code>  background-image: url(\"paisagem.jpg\");\n</code></pre>"},{"location":"html_css/_18_background_css/#background-repeat","title":"background-repeat","text":"<p>Define como a imagem de fundo deve se repetir. Os valores podem ser repeat (repete a imagem horizontal e verticalmente), repeat-x (repete a imagem apenas horizontalmente) ou repeat-y (repete a imagem apenas verticalmente).</p> <pre><code>  background-repeat: repeat-x;\n</code></pre>"},{"location":"html_css/_18_background_css/#background-position","title":"background-position","text":"<p>Define a posi\u00e7\u00e3o da imagem de fundo. Os valores podem ser representados por coordenadas, como \"left top\" (posiciona a imagem no canto superior esquerdo), \"center center\" (posiciona a imagem no centro) ou \"right bottom\" (posiciona a imagem no canto inferior direito)</p> <pre><code>  background-position: center center;\n</code></pre>"},{"location":"html_css/_18_background_css/#background-size","title":"background-size","text":"<p>Define o tamanho da imagem de fundo. Os valores podem ser representados em pixels, em porcentagem ou com as palavras-chave \"auto\" (mant\u00e9m a propor\u00e7\u00e3o original da imagem) ou \"cover\" (ajusta a imagem para preencher todo o elemento, cortando qualquer excesso)</p> <pre><code>  background-size: cover;\n</code></pre>"},{"location":"html_css/_18_background_css/#exercicios-de-fixacao","title":"Exerc\u00edcios de Fixa\u00e7\u00e3o","text":"<ul> <li>17 - Crie um arquivo HTML com um elemento <code>&lt;div&gt;</code>, defina uma imagem de fundo para a <code>&lt;div&gt;</code>, repita a imagem horizontalmente, posicione a imagem no centro da <code>&lt;div&gt;</code>.</li> </ul>"},{"location":"html_css/_19_bordas_css/","title":"19 bordas css","text":""},{"location":"html_css/_19_bordas_css/#bordas-css","title":"Bordas Css","text":"<p>As propriedades de borda em CSS s\u00e3o usadas para definir a apar\u00eancia das bordas de um elemento. As bordas podem ser personalizadas com diferentes cores, estilos e tamanhos.</p>"},{"location":"html_css/_19_bordas_css/#border-style","title":"border-style","text":"<p>Define o estilo da borda. Os valores podem ser solid (linha s\u00f3lida), dashed (linha tracejada), dotted (linha pontilhada) e double (linha dupla).</p> <pre><code>  border-style: solid;\n</code></pre>"},{"location":"html_css/_19_bordas_css/#border-width","title":"border-width","text":"<p>Define a largura da borda. Os valores podem ser em pixels, em em ou em rem.</p> <pre><code>  border-width: 2px;\n</code></pre>"},{"location":"html_css/_19_bordas_css/#border-color","title":"border-color","text":"<p>Define a cor da borda. Os valores podem ser nome de cor, em hexadecimal ou em RGB.</p> <pre><code>  border-color: red;\n</code></pre>"},{"location":"html_css/_19_bordas_css/#border-radius","title":"border-radius","text":"<p>Define o raio dos cantos da borda. Os valores podem ser em pixels, em em ou em rem</p> <pre><code>  border-radius: 10px;\n</code></pre>"},{"location":"html_css/_19_bordas_css/#border-image","title":"border-image","text":"<p>Define uma imagem para ser usada como borda.</p> <pre><code>  border-image: url(\"textura.jpg\");\n</code></pre>"},{"location":"html_css/_19_bordas_css/#exercicios-de-fixacao","title":"Exerc\u00edcios de Fixa\u00e7\u00e3o","text":"<ul> <li>18 - Crie um arquivo HTML com um elemento <code>&lt;div&gt;</code>, defina uma borda s\u00f3lida com 2 pixels de largura e cor vermelha para a <code>&lt;div&gt;</code>, arredonde os cantos da <code>&lt;div&gt;</code> em 10 pixels.</li> </ul>"},{"location":"html_css/_20_fontes_gradientes_sombras/","title":"20 fontes gradientes sombras","text":""},{"location":"html_css/_20_fontes_gradientes_sombras/#fontes","title":"Fontes","text":"<p>As fontes em CSS s\u00e3o definidas atrav\u00e9s da propriedade font-family, que especifica a fam\u00edlia da fonte a ser usada para o elemento HTML selecionado. Tamb\u00e9m podemos definir outras propriedades relacionadas \u00e0s fontes, como tamanho, cor, estilo e peso.</p> <pre><code>  &lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n    &lt;head&gt;\n      &lt;title&gt;Exemplo de fonte CSS&lt;/title&gt;\n      &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"estilos.css\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;p&gt;Este \u00e9 um exemplo de texto com a fonte padr\u00e3o.&lt;/p&gt;\n    &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre> <pre><code>  body {\nfont-family: Arial, sans-serif;\n}\n</code></pre>"},{"location":"html_css/_20_fontes_gradientes_sombras/#gradientes","title":"Gradientes","text":"<p>Duas formas de criar gradientes s\u00e3o com o linear-gradient e radial-gradient.</p>"},{"location":"html_css/_20_fontes_gradientes_sombras/#linear-gradient","title":"Linear Gradient","text":"<pre><code>  &lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n    &lt;head&gt;\n      &lt;title&gt;Exemplo de linear gradient CSS&lt;/title&gt;\n      &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"estilos.css\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;div class=\"exemplo\"&gt;\n        &lt;h1&gt;Exemplo de linear gradient&lt;/h1&gt;\n        &lt;p&gt;Este \u00e9 um exemplo de um gradiente linear em CSS.&lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre> <pre><code>  .exemplo {\nbackground: linear-gradient(to bottom right, #ff8c00, #ff69b4);\npadding: 20px;\n}\n</code></pre> <p>Nesse exemplo, usamos o linear-gradient para criar um gradiente que vai do canto superior esquerdo ao canto inferior direito da <code>&lt;div&gt;</code>. As cores usadas s\u00e3o #ff8c00 e #ff69b4. Tamb\u00e9m adicionamos um espa\u00e7amento interno \u00e0 <code>&lt;div&gt;</code> com a propriedade padding.</p>"},{"location":"html_css/_20_fontes_gradientes_sombras/#radial-gradient","title":"Radial Gradient","text":"<pre><code>  &lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n    &lt;head&gt;\n      &lt;title&gt;Exemplo de radial gradient CSS&lt;/title&gt;\n      &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"estilos.css\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;div class=\"exemplo\"&gt;\n        &lt;h1&gt;Exemplo de radial gradient&lt;/h1&gt;\n        &lt;p&gt;Este \u00e9 um exemplo de um gradiente radial em CSS.&lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre> <pre><code>  .exemplo {\nbackground: radial-gradient(circle, #ff8c00, #ff69b4);\npadding: 20px;\n}\n</code></pre> <p>Nesse exemplo, usamos o radial-gradient para criar um gradiente radial que come\u00e7a no centro da <code>&lt;div&gt;</code> e se espalha em todas as dire\u00e7\u00f5es. As cores usadas s\u00e3o #ff8c00 e #ff69b4. Tamb\u00e9m adicionamos um espa\u00e7amento interno \u00e0 <code>&lt;div&gt;</code> com a propriedade padding.</p>"},{"location":"html_css/_20_fontes_gradientes_sombras/#shadow","title":"Shadow","text":"<pre><code>  &lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n    &lt;head&gt;\n      &lt;title&gt;Exemplo de shadow CSS&lt;/title&gt;\n      &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"estilos.css\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;div class=\"exemplo\"&gt;\n        &lt;h1&gt;Exemplo de shadow&lt;/h1&gt;\n        &lt;p&gt;Este \u00e9 um exemplo de uma sombra em CSS.&lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre> <pre><code>  .exemplo {\nbox-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3);\npadding: 20px;\n}\n</code></pre> <p>Nesse exemplo, usamos a propriedade box-shadow para adicionar uma sombra \u00e0 <code>&lt;div&gt;</code>. A sombra \u00e9 criada com um deslocamento horizontal de 2 pixels, um deslocamento vertical de 2 pixels, um raio de 5 pixels e uma opacidade de 0.3. Tamb\u00e9m adicionamos um espa\u00e7amento interno \u00e0 <code>&lt;div&gt;</code> com a propriedade padding.</p>"},{"location":"html_css/_20_fontes_gradientes_sombras/#gradient-e-shadow-combinados","title":"Gradient e Shadow combinados","text":"<pre><code>  &lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n    &lt;head&gt;\n      &lt;title&gt;Exemplo de gradient e shadow CSS&lt;/title&gt;\n      &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"estilos.css\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;div class=\"exemplo\"&gt;\n        &lt;h1&gt;Exemplo de gradient e shadow combinados&lt;/h1&gt;\n        &lt;p&gt;Este \u00e9 um exemplo de um gradiente com sombra em CSS.&lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre> <pre><code>  .exemplo {\nbackground: linear-gradient(to bottom right, #ff8c00, #ff69b4);\nbox-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3);\npadding: 20px;\n}\n</code></pre> <p>Nesse exemplo, combinamos o gradiente linear com a sombra. A <code>&lt;div&gt;</code> tem um gradiente que vai do canto superior esquerdo ao canto inferior direito, com as cores #ff8c00 e #ff69b4. Al\u00e9m disso, tem uma sombra com um deslocamento horizontal de 2 pixels, um deslocamento vertical de 2 pixels, um raio de 5 pixels e uma opacidade de 0.3. Tamb\u00e9m adicionamos um espa\u00e7amento interno \u00e0 <code>&lt;div&gt;</code> com a propriedade padding.</p>"},{"location":"html_css/_20_fontes_gradientes_sombras/#exercicios-de-fixacao","title":"Exerc\u00edcios de Fixa\u00e7\u00e3o","text":"<ul> <li> <p>19 - Crie uma p\u00e1gina HTML com um t\u00edtulo e um par\u00e1grafo. Adicione um estilo CSS para aplicar um gradiente linear de cima para baixo com as cores #ffcccc e #ff6666 ao fundo do body.</p> </li> <li> <p>20 - Crie uma p\u00e1gina HTML com um t\u00edtulo e um par\u00e1grafo. Adicione um estilo CSS para aplicar um gradiente radial ao fundo do body com as cores #f9f9f9 e #333333.</p> </li> <li> <p>21 - Crie uma p\u00e1gina HTML com um t\u00edtulo e um par\u00e1grafo. Adicione um estilo CSS para aplicar uma sombra de 5 pixels com deslocamento horizontal e vertical de 2 pixels e uma opacidade de 0,3 ao t\u00edtulo.</p> </li> </ul>"},{"location":"html_css/_21_Respostas/","title":"21 Respostas","text":""},{"location":"html_css/_21_Respostas/#resolucao-exercicios-de-fixacao","title":"Resolu\u00e7\u00e3o exercicios de fixa\u00e7\u00e3o","text":"<ol> <li> <p>Atividade     <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Perfil&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div&gt;\n      &lt;img src=\"perfil.jpg\" alt=\"Imagem de perfil\"&gt;\n      &lt;h1&gt;Nome do usu\u00e1rio&lt;/h1&gt;\n      &lt;p&gt;Uma breve descri\u00e7\u00e3o sobre mim...&lt;/p&gt;\n      &lt;h2&gt;Interesses:&lt;/h2&gt;\n      &lt;p&gt;- Interesse 1&lt;/p&gt;\n      &lt;p&gt;- Interesse 2&lt;/p&gt;\n      &lt;p&gt;- Interesse 3&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> </li> <li> <p>Atividade</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Lista de Tarefas&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div&gt;\n      &lt;h1&gt;Minha Lista de Tarefas&lt;/h1&gt;\n      &lt;div&gt;\n        &lt;input type=\"checkbox\" id=\"tarefa1\" name=\"tarefa1\" value=\"tarefa1\"&gt;\n        &lt;label for=\"tarefa1\"&gt;Tarefa 1&lt;/label&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;input type=\"checkbox\" id=\"tarefa2\" name=\"tarefa2\" value=\"tarefa2\"&gt;\n        &lt;label for=\"tarefa2\"&gt;Tarefa 2&lt;/label&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;input type=\"checkbox\" id=\"tarefa3\" name=\"tarefa3\" value=\"tarefa3\"&gt;\n        &lt;label for=\"tarefa3\"&gt;Tarefa 3&lt;/label&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Atividade</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Produto&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div&gt;\n      &lt;img src=\"produto.jpg\" alt=\"Imagem do produto\"&gt;\n      &lt;h1&gt;Nome do Produto&lt;/h1&gt;\n      &lt;p&gt;Pre\u00e7o: R$99,99&lt;/p&gt;\n      &lt;p&gt;Descri\u00e7\u00e3o do Produto...&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Atividade</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Imagem de fundo responsiva&lt;/title&gt;\n    &lt;style&gt;\nbody {\nbackground-image: url('imagem.jpg');\nbackground-size: cover;\nbackground-repeat: no-repeat;\n}\n&lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div&gt;\n      &lt;h1&gt;Conte\u00fado da p\u00e1gina...&lt;/h1&gt;\n      &lt;p&gt;Texto da p\u00e1gina...&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Atividade</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Elemento no rodap\u00e9 da p\u00e1gina&lt;/title&gt;\n    &lt;style&gt;\nbody {\nmin-height: 100vh;\ndisplay: flex;\nflex-direction: column;\nmargin: 0;\npadding: 0;\n}\n.conteudo {\nflex: 1;\npadding: 20px;\n}\n.rodape {\nposition: fixed;\nbottom: 0;\nleft: 0;\nright: 0;\nbackground-color: #ddd;\npadding: 10px;\n}\n&lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div class=\"conteudo\"&gt;\n      &lt;h1&gt;Conte\u00fado da p\u00e1gina...&lt;/h1&gt;\n      &lt;p&gt;Texto da p\u00e1gina...&lt;/p&gt;\n    &lt;/div&gt;\n    &lt;div class=\"rodape\"&gt;\n      &lt;p&gt;Este \u00e9 o rodap\u00e9 da p\u00e1gina&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Atividade</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Menu Horizontal&lt;/title&gt;\n    &lt;style&gt;\n.menu {\ndisplay: flex;\nlist-style: none;\npadding: 0;\nmargin: 0;\nbackground-color: #ddd;\n}\n.menu li {\nflex-grow: 1;\ntext-align: center;\n}\n.menu a {\ndisplay: block;\npadding: 10px;\ntext-decoration: none;\ncolor: #333;\n}\n&lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;nav&gt;\n      &lt;ul class=\"menu\"&gt;\n        &lt;li&gt;&lt;a href=\"#\"&gt;P\u00e1gina 1&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"#\"&gt;P\u00e1gina 2&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"#\"&gt;P\u00e1gina 3&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"#\"&gt;P\u00e1gina 4&lt;/a&gt;&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/nav&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Atividade</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Empresa de Tecnologia&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n  &lt;nav&gt;\n    &lt;ul&gt;\n      &lt;li&gt;&lt;a href=\"#home\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"#sobre-nos\"&gt;Sobre N\u00f3s&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"#servicos\"&gt;Servi\u00e7os&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"#produtos\"&gt;Produtos&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"#contato\"&gt;Contato&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/nav&gt;\n  &lt;main&gt;\n    &lt;section id=\"home\"&gt;\n      &lt;h1&gt;Bem-vindo \u00e0 Empresa de Tecnologia&lt;/h1&gt;\n      &lt;p&gt;Conhe\u00e7a nossos produtos e servi\u00e7os de tecnologia, voltados para a transforma\u00e7\u00e3o digital dos nossos clientes.&lt;/p&gt;\n    &lt;/section&gt;\n    &lt;section id=\"sobre-nos\"&gt;\n      &lt;h2&gt;Sobre N\u00f3s&lt;/h2&gt;\n      &lt;p&gt;Somos uma empresa de tecnologia focada em solu\u00e7\u00f5es inovadoras, que busca a excel\u00eancia no atendimento e na entrega de projetos para nossos clientes.&lt;/p&gt;\n    &lt;/section&gt;\n    &lt;section id=\"servicos\"&gt;\n      &lt;h2&gt;Servi\u00e7os&lt;/h2&gt;\n      &lt;ul&gt;\n        &lt;li&gt;Desenvolvimento de Software&lt;/li&gt;\n        &lt;li&gt;Desenvolvimento Web&lt;/li&gt;\n        &lt;li&gt;Consultoria em TI&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/section&gt;\n    &lt;section id=\"produtos\"&gt;\n      &lt;h2&gt;Produtos&lt;/h2&gt;\n      &lt;p&gt;Conhe\u00e7a nossos produtos tecnol\u00f3gicos, voltados para a transforma\u00e7\u00e3o digital dos nossos clientes.&lt;/p&gt;\n    &lt;/section&gt;\n    &lt;section id=\"contato\"&gt;\n      &lt;h2&gt;Contato&lt;/h2&gt;\n      &lt;p&gt;Entre em contato conosco para saber mais sobre nossos produtos e servi\u00e7os de tecnologia.&lt;/p&gt;\n    &lt;/section&gt;\n  &lt;/main&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Atividade</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Cadastro de Usu\u00e1rio&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Cadastro de Usu\u00e1rio&lt;/h1&gt;\n    &lt;form&gt;\n      &lt;label for=\"nome\"&gt;Nome:&lt;/label&gt;\n      &lt;input type=\"text\" id=\"nome\" name=\"nome\" required&gt;\n      &lt;label for=\"sobrenome\"&gt;Sobrenome:&lt;/label&gt;\n      &lt;input type=\"text\" id=\"sobrenome\" name=\"sobrenome\" required&gt;\n      &lt;label for=\"email\"&gt;E-mail:&lt;/label&gt;\n      &lt;input type=\"email\" id=\"email\" name=\"email\" required&gt;\n      &lt;label for=\"telefone\"&gt;Telefone:&lt;/label&gt;\n      &lt;input type=\"tel\" id=\"telefone\" name=\"telefone\" required&gt;\n      &lt;label for=\"senha\"&gt;Senha:&lt;/label&gt;\n      &lt;input type=\"password\" id=\"senha\" name=\"senha\" required&gt;\n      &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n      &lt;button type=\"reset\"&gt;Limpar&lt;/button&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Atividade</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Formul\u00e1rio de Contato&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Formul\u00e1rio de Contato&lt;/h1&gt;\n    &lt;form&gt;\n      &lt;label for=\"nome\"&gt;Nome:&lt;/label&gt;\n      &lt;input type=\"text\" id=\"nome\" name=\"nome\" required&gt;\n      &lt;label for=\"email\"&gt;E-mail:&lt;/label&gt;\n      &lt;input type=\"email\" id=\"email\" name=\"email\" required&gt;\n      &lt;label for=\"assunto\"&gt;Assunto:&lt;/label&gt;\n      &lt;input type=\"text\" id=\"assunto\" name=\"assunto\" required&gt;\n      &lt;label for=\"mensagem\"&gt;Mensagem:&lt;/label&gt;\n      &lt;textarea id=\"mensagem\" name=\"mensagem\" required&gt;&lt;/textarea&gt;\n      &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n      &lt;button type=\"reset\"&gt;Limpar&lt;/button&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Atividade</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Tabela de Alunos&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Tabela de Alunos&lt;/h1&gt;\n    &lt;table&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;Nome&lt;/th&gt;\n          &lt;th&gt;Sobrenome&lt;/th&gt;\n          &lt;th&gt;Idade&lt;/th&gt;\n          &lt;th&gt;M\u00e9dia&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Jo\u00e3o&lt;/td&gt;\n          &lt;td&gt;Silva&lt;/td&gt;\n          &lt;td&gt;18&lt;/td&gt;\n          &lt;td&gt;8.5&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Maria&lt;/td&gt;\n          &lt;td&gt;Santos&lt;/td&gt;\n          &lt;td&gt;19&lt;/td&gt;\n          &lt;td&gt;7.2&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Lucas&lt;/td&gt;\n          &lt;td&gt;Souza&lt;/td&gt;\n          &lt;td&gt;20&lt;/td&gt;\n          &lt;td&gt;9.1&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Atividade</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Tabela de Produtos&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Tabela de Produtos&lt;/h1&gt;\n    &lt;table&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;Produto&lt;/th&gt;\n          &lt;th&gt;Pre\u00e7o&lt;/th&gt;\n          &lt;th&gt;Disponibilidade&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Camisa&lt;/td&gt;\n          &lt;td&gt;R$ 50,00&lt;/td&gt;\n          &lt;td&gt;Em estoque&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Cal\u00e7a&lt;/td&gt;\n          &lt;td&gt;R$ 80,00&lt;/td&gt;\n          &lt;td&gt;Esgotado&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Sapato&lt;/td&gt;\n          &lt;td&gt;R$ 120,00&lt;/td&gt;\n          &lt;td&gt;Em estoque&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Atividade</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Tabela de Funcion\u00e1rios&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n  &lt;h1&gt;Tabela de Funcion\u00e1rios&lt;/h1&gt;\n  &lt;table&gt;\n    &lt;thead&gt;\n      &lt;tr&gt;\n        &lt;th&gt;Nome&lt;/th&gt;\n        &lt;th&gt;Cargo&lt;/th&gt;\n        &lt;th&gt;Sal\u00e1rio&lt;/th&gt;\n        &lt;th&gt;Data de Admiss\u00e3o&lt;/th&gt;\n      &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Jo\u00e3o Silva&lt;/td&gt;\n        &lt;td&gt;Analista de Sistemas&lt;/td&gt;\n        &lt;td&gt;R$ 5.000,00&lt;/td&gt;\n        &lt;td&gt;01/01/2021&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Maria Santos&lt;/td&gt;\n        &lt;td&gt;Coordenadora de Marketing&lt;/td&gt;\n        &lt;td&gt;R$ 7.500,00&lt;/td&gt;\n        &lt;td&gt;15/05/2019&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Lucas Souza&lt;/td&gt;\n        &lt;td&gt;Gerente de Vendas&lt;/td&gt;\n        &lt;td&gt;R$ 10.000,00&lt;/td&gt;\n        &lt;td&gt;10/10/2018&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;\n  &lt;/table&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Atividade</p> <pre><code>  .elemento {\nheight: 300px;\nwidth: 500px;\nmargin: 20px;\npadding: 10px;\n}\n</code></pre> </li> <li> <p>Atividade</p> <pre><code>  .elemento {\nheight: 50%;\nwidth: 80%;\n}\n</code></pre> </li> <li> <p>Atividade</p> <pre><code>  .elemento {\nborder: 2px dotted red;\nborder-radius: 10px;\n}\n</code></pre> </li> <li> <p>Atividade</p> <pre><code>  &lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n    &lt;head&gt;\n      &lt;title&gt;Atividade de Cores CSS&lt;/title&gt;\n      &lt;link rel=\"stylesheet\" href=\"estilos.css\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;div&gt;\n        &lt;p&gt;Esta \u00e9 uma atividade de cores em CSS.&lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre> <pre><code>  div {\nbackground-color: yellow;\ncolor: green;\nborder: 1px solid blue;\n}\n</code></pre> </li> <li> <p>Atividade</p> <pre><code>  &lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n    &lt;head&gt;\n      &lt;title&gt;Atividade de Backgrounds CSS&lt;/title&gt;\n      &lt;link rel=\"stylesheet\" href=\"estilos.css\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;div&gt;\n        &lt;p&gt;Esta \u00e9 uma atividade de backgrounds em CSS.&lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre> <pre><code>  div {\nbackground-image: url(\"background.jpg\");\nbackground-repeat: repeat-x;\nbackground-position: center;\nheight: 300px;\n}\n</code></pre> </li> <li> <p>Atividade</p> <pre><code>  &lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n    &lt;head&gt;\n      &lt;title&gt;Atividade de Bordas CSS&lt;/title&gt;\n      &lt;link rel=\"stylesheet\" href=\"estilos.css\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;div&gt;\n        &lt;p&gt;Esta \u00e9 uma atividade de bordas em CSS.&lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre> <pre><code>  div {\nborder: 2px solid red;\nborder-radius: 10px;\npadding: 20px;\n}\n</code></pre> </li> <li> <p>Atividade</p> <pre><code>  &lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n    &lt;head&gt;\n      &lt;title&gt;Atividade de Gradiente Linear&lt;/title&gt;\n      &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"estilos.css\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;h1&gt;Gradiente Linear&lt;/h1&gt;\n      &lt;p&gt;Esta \u00e9 uma atividade de um gradiente linear em CSS.&lt;/p&gt;\n    &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre> <pre><code>  body {\nbackground: linear-gradient(to bottom, #ffcccc, #ff6666);\n}\n</code></pre> </li> <li> <p>Atividade</p> <pre><code>  &lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n    &lt;head&gt;\n      &lt;title&gt;Atividade de Gradiente Radial&lt;/title&gt;\n      &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"estilos.css\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;h1&gt;Gradiente Radial&lt;/h1&gt;\n      &lt;p&gt;Esta \u00e9 uma atividade de um gradiente radial em CSS.&lt;/p&gt;\n    &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre> <pre><code>  body {\nbackground: radial-gradient(circle, #f9f9f9, #333333);\n}\n</code></pre> </li> <li> <p>Atividade</p> <pre><code>  &lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n    &lt;head&gt;\n      &lt;title&gt;Atividade de Sombra&lt;/title&gt;\n      &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"estilos.css\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;h1&gt;Atividade de Sombra&lt;/h1&gt;\n      &lt;p&gt;Esta \u00e9 uma atividade de uma sombra em CSS.&lt;/p&gt;\n    &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre> <pre><code>  h1 {\nbox-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3);\n}\n</code></pre> </li> </ol>"},{"location":"javascript/","title":"Introdu\u00e7\u00e3o ao JavaScript","text":"<p>JavaScript \u00e9 uma linguagem de programa\u00e7\u00e3o de alto n\u00edvel, din\u00e2mica e interpretada. Ela foi criada por Brendan Eich em 1995 enquanto trabalhava na Netscape Communications Corporation, e atualmente \u00e9 uma das linguagens mais populares do mundo. JavaScript \u00e9 amplamente utilizada para criar e manipular conte\u00fado din\u00e2mico em p\u00e1ginas da web, permitindo que desenvolvedores adicionem interatividade a sites e aplicativos da web.</p> <p>A linguagem JavaScript \u00e9 baseada em objetos e \u00e9 executada no lado do cliente, ou seja, no navegador do usu\u00e1rio. Ela \u00e9 usada para criar anima\u00e7\u00f5es, validar formul\u00e1rios, atualizar conte\u00fado dinamicamente e realizar diversas outras funcionalidades que melhoram a experi\u00eancia do usu\u00e1rio na web. Al\u00e9m disso, JavaScript tamb\u00e9m \u00e9 utilizada em outras \u00e1reas, como no desenvolvimento de aplicativos de desktop, servidores web e at\u00e9 mesmo na cria\u00e7\u00e3o de jogos.</p> <p>JavaScript \u00e9 uma linguagem de programa\u00e7\u00e3o bastante vers\u00e1til e tem uma sintaxe relativamente simples, o que torna mais f\u00e1cil para os iniciantes aprenderem. Ela tamb\u00e9m possui uma grande variedade de bibliotecas e frameworks dispon\u00edveis, que ajudam a simplificar o processo de desenvolvimento de aplicativos da web.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/","title":"01 Conceitos B\u00e1sicos","text":""},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#conceitos-basicos","title":"Conceitos B\u00e1sicos","text":"<p>JavaScript \u00e9 uma linguagem de programa\u00e7\u00e3o de alto n\u00edvel, din\u00e2mica e interpretada, criada por Brendan Eich em 1995 enquanto trabalhava na Netscape Communications Corporation. Hoje em dia, ela \u00e9 uma das linguagens mais populares do mundo e \u00e9 amplamente utilizada para criar e manipular conte\u00fado din\u00e2mico em p\u00e1ginas da web, permitindo que desenvolvedores adicionem interatividade a sites e aplicativos da web.</p> <p>A linguagem JavaScript \u00e9 baseada em objetos e \u00e9 executada no lado do cliente, ou seja, no navegador do usu\u00e1rio. Ela \u00e9 usada para criar anima\u00e7\u00f5es, validar formul\u00e1rios, atualizar conte\u00fado dinamicamente e realizar diversas outras funcionalidades que melhoram a experi\u00eancia do usu\u00e1rio na web. Al\u00e9m disso, JavaScript tamb\u00e9m \u00e9 utilizada em outras \u00e1reas, como no desenvolvimento de aplicativos de desktop, servidores web e at\u00e9 mesmo na cria\u00e7\u00e3o de jogos.</p> <p>Apesar de sua origem estar associada ao desenvolvimento de p\u00e1ginas web, o JavaScript n\u00e3o \u00e9 limitado a ser executado apenas em navegadores da web. Por exemplo, o Node.js \u00e9 um ambiente de tempo de execu\u00e7\u00e3o do JavaScript baseado em servidor, que permite que o c\u00f3digo JavaScript seja executado no lado do servidor. O Node.js \u00e9 capaz de executar c\u00f3digo JavaScript sem a necessidade de um navegador da web, permitindo que os desenvolvedores criem aplicativos web completos no lado do servidor.</p> <p>Al\u00e9m disso, o JavaScript tamb\u00e9m pode ser usado no desenvolvimento de aplicativos desktop e m\u00f3veis por meio de tecnologias como Electron, React Native e Ionic.</p> <p>Uma das vantagens do JavaScript \u00e9 a sua sintaxe relativamente simples, o que torna mais f\u00e1cil para iniciantes aprenderem. Ela tamb\u00e9m possui uma grande variedade de bibliotecas e frameworks dispon\u00edveis, que ajudam a simplificar o processo de desenvolvimento de aplicativos da web.</p> <p>Em resumo, o JavaScript \u00e9 uma linguagem de programa\u00e7\u00e3o extremamente vers\u00e1til e amplamente utilizada em diferentes \u00e1reas. Ela \u00e9 executada no lado do cliente, mas tamb\u00e9m pode ser executada no lado do servidor e em outras plataformas. A linguagem possui uma sintaxe relativamente simples e muitas ferramentas dispon\u00edveis, o que a torna uma \u00f3tima escolha para iniciantes e desenvolvedores experientes.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#como-rodar-um-codigo-javascript","title":"Como Rodar Um C\u00f3digo JavaScript","text":"<p>O interpretador de JavaScript \u00e9 um programa que executa o c\u00f3digo escrito na linguagem de programa\u00e7\u00e3o JavaScript. Ele \u00e9 respons\u00e1vel por analisar e interpretar o c\u00f3digo fonte escrito em JavaScript, gerando uma representa\u00e7\u00e3o interna do c\u00f3digo que pode ser executada pelo computador. Existem algumas op\u00e7\u00f5es para rodar um c\u00f3digo JavaScript, dependendo do seu prop\u00f3sito. Algumas op\u00e7\u00f5es incluem:</p> <ul> <li>Usar o console do navegador: Para rodar c\u00f3digo JavaScript no navegador, abra o console de desenvolvedor pressionando F12 e selecione a guia \"Console\". Digite seu c\u00f3digo JavaScript diretamente no console e pressione Enter para rodar.</li> <li>Usar o Node.js: O Node.js \u00e9 uma plataforma para rodar c\u00f3digo JavaScript no lado do servidor. Para usar o Node.js, voc\u00ea precisa instalar o software primeiro.</li> <li>Usar um ambiente de desenvolvimento integrado (IDE): Existem muitos IDEs dispon\u00edveis para programa\u00e7\u00e3o em JavaScript, como Visual Studio Code, Atom, Sublime Text, etc. Eles t\u00eam recursos avan\u00e7ados de depura\u00e7\u00e3o e autocompletar.</li> </ul>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#utilizando-o-console-do-navegador","title":"Utilizando o console do navegador","text":"<p>Passo 1: Crie um arquivo HTML Crie um novo arquivo HTML em qualquer editor de texto. Cole o seguinte c\u00f3digo HTML no arquivo:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Meu tutorial JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Meu tutorial JavaScript&lt;/h1&gt;\n    &lt;script&gt;\n// Seu c\u00f3digo JavaScript aqui\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Salve o arquivo com o nome descritivo do que ele faz, por exemplo \"saudacao.html\".</p> <p>Passo 2: Adicione seu c\u00f3digo JavaScript dentro da tag <code>&lt;script&gt;</code> no arquivo HTML, adicione seu c\u00f3digo JavaScript. Por exemplo, o seguinte c\u00f3digo exibe um alerta na tela:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Meu tutorial JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Meu tutorial JavaScript&lt;/h1&gt;\n    &lt;script&gt;\nconsole.log(\"Ol\u00e1, mundo!\");\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Salve o arquivo.</p> <p>Passo 3: Abra o arquivo HTML no navegador Abra o arquivo HTML no navegador, clicando duas vezes no arquivo, arrastando e soltando sobre um navegador ou usando o menu \"Abrir arquivo\" do navegador. O c\u00f3digo JavaScript ser\u00e1 executado automaticamente.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#executando-javascript-com-o-nodejs","title":"Executando JavaScript com o Nodejs","text":"<p>Passo 1: Abra o terminal do seu sistema operacional.</p> <p>Passo 2: Navegue at\u00e9 o diret\u00f3rio onde o seu arquivo JavaScript est\u00e1 localizado usando o comando <code>cd</code>.</p> <p>Por exemplo, se o seu arquivo est\u00e1 na pasta <code>Documentos</code> dentro do diret\u00f3rio pessoal do seu usu\u00e1rio, voc\u00ea pode navegar at\u00e9 l\u00e1 com o seguinte comando:</p> <pre><code>cd ~/Documentos\n</code></pre> <p>Passo 3: Execute o c\u00f3digo JavaScript usando o comando <code>node</code> seguido do nome do arquivo.</p> <p>Por exemplo, se o seu arquivo se chama <code>meuCodigo.js</code>, o comando para execut\u00e1-lo seria:</p> <pre><code>node meuCodigo.js\n</code></pre> <p>Passo 4: O resultado da execu\u00e7\u00e3o do c\u00f3digo ser\u00e1 exibido no terminal.</p> <p>Se o seu c\u00f3digo tem sa\u00edda de dados usando <code>console.log</code>, ela ser\u00e1 exibida no terminal ap\u00f3s a execu\u00e7\u00e3o do comando.</p> <p>Por exemplo, se o seu c\u00f3digo cont\u00e9m o seguinte comando:</p> <pre><code>console.log(\"Hello, world!\");\n</code></pre> <p>A sa\u00edda ser\u00e1 exibida no terminal assim que o comando <code>node meuCodigo.js</code> for executado:</p> <pre><code>Hello, world!\n</code></pre> <p>Pronto! Agora voc\u00ea j\u00e1 sabe como executar um c\u00f3digo JavaScript com o Node.js. \u00c9 importante lembrar que, para usar m\u00f3dulos externos em seu c\u00f3digo, voc\u00ea precisa instalar as depend\u00eancias com o gerenciador de pacotes do Node.js, o <code>npm</code>.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#sintaxe-javascript","title":"Sintaxe Javascript","text":"<p>A sintaxe do JavaScript \u00e9 a estrutura e a ordem corretas que devem ser seguidas para escrever c\u00f3digo em JavaScript. Algumas das principais caracter\u00edsticas da sintaxe do JavaScript incluem:</p> <ol> <li> <p>Case sensitive: o JavaScript diferencia mai\u00fasculas de min\u00fasculas. Por exemplo, a vari\u00e1vel \"nome\" \u00e9 diferente da vari\u00e1vel \"Nome\".</p> </li> <li> <p>Espa\u00e7o em branco: espa\u00e7o em branco \u00e9 um s\u00edmbolo l\u00e9xico que inclui caracteres de espa\u00e7o, tabula\u00e7\u00e3o e quebra de linha. Eles s\u00e3o utilizados para melhorar a legibilidade do c\u00f3digo e n\u00e3o afetam o comportamento do programa. Espa\u00e7os em branco s\u00e3o ignorados pelo interpretador JavaScript.</p> </li> <li> <p>Ponto-e-v\u00edrgula: \u00e9 usado para indicar o final de uma instru\u00e7\u00e3o. Embora seja opcional em algumas situa\u00e7\u00f5es, \u00e9 recomendado us\u00e1-lo para evitar poss\u00edveis erros.</p> </li> <li> <p>Coment\u00e1rios: o JavaScript suporta coment\u00e1rios de uma linha (iniciando com //) e coment\u00e1rios de v\u00e1rias linhas (iniciando com '/' e terminando com '/'). Os coment\u00e1rios s\u00e3o \u00fateis para documentar o c\u00f3digo e para desativar temporariamente partes do c\u00f3digo.</p> </li> <li> <p>Vari\u00e1veis: as vari\u00e1veis s\u00e3o usadas para armazenar valores que podem ser usados posteriormente no c\u00f3digo. Elas s\u00e3o declaradas usando var, let ou const, seguido pelo nome da vari\u00e1vel.</p> </li> <li> <p>Constantes: constantes s\u00e3o valores que n\u00e3o mudam durante a execu\u00e7\u00e3o do programa. Em JavaScript, \u00e9 poss\u00edvel criar constantes utilizando a palavra reservada const. Elas devem ser declaradas e inicializadas ao mesmo tempo e n\u00e3o podem ter seu valor alterado posteriormente. Exemplo: const PI = 3.1415.</p> </li> <li> <p>Tipos de dados: o JavaScript tem diferentes tipos de dados, como string, n\u00famero, booleano, objeto, fun\u00e7\u00e3o e assim por diante.</p> </li> <li> <p>Operadores: o JavaScript tem v\u00e1rios operadores, como aritm\u00e9ticos (+, -, *, /), de atribui\u00e7\u00e3o (=), de compara\u00e7\u00e3o (==, !=, &lt;, &gt;), l\u00f3gicos (&amp;&amp;, ||) e assim por diante. Os operadores s\u00e3o usados para realizar c\u00e1lculos e compara\u00e7\u00f5es.</p> </li> <li> <p>Separadores: separadores s\u00e3o utilizados para separar elementos na linguagem. Em JavaScript, existem v\u00e1rios tipos de separadores, incluindo ; (ponto e v\u00edrgula), , (v\u00edrgula), () (par\u00eanteses), {} (chaves) e [] (colchetes).</p> </li> <li> <p>: o JavaScript tem estruturas de controle, como if/else, switch, for, while e do/while, que s\u00e3o usadas para controlar o fluxo do programa.</p> </li> </ol> <p>Essas s\u00e3o algumas das principais caracter\u00edsticas da sintaxe do JavaScript. \u00c9 importante seguir as regras de sintaxe para garantir que o c\u00f3digo seja executado corretamente. Al\u00e9m disso, \u00e9 importante manter o c\u00f3digo organizado e bem estruturado para facilitar a leitura e manuten\u00e7\u00e3o do mesmo.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#tipos-de-identificadores-em-javascript","title":"Tipos de identificadores em JavaScript","text":"<p>Vari\u00e1veis e constantes s\u00e3o elementos fundamentais em qualquer linguagem de programa\u00e7\u00e3o, incluindo JavaScript. Vari\u00e1veis s\u00e3o usadas para armazenar valores que podem ser alterados durante a execu\u00e7\u00e3o do programa, enquanto as constantes s\u00e3o usadas para armazenar valores que n\u00e3o podem ser alterados.</p> <p>As palavras-chave <code>var</code>, <code>let</code> e <code>const</code> s\u00e3o usadas em JavaScript para declarar identificadores que servem para armazenar valores. A partir da vers\u00e3o ES6 (ECMAScript 2015), foram introduzidas as palavras-chave <code>let</code> e <code>const</code>, que possuem escopo de bloco. Isso significa que uma vari\u00e1vel declarada com <code>let</code> ou <code>const</code> s\u00f3 pode ser acessada dentro do bloco de c\u00f3digo em que foi declarada. Um bloco de c\u00f3digo \u00e9 uma se\u00e7\u00e3o delimitada por chaves, como um loop, uma instru\u00e7\u00e3o if ou uma fun\u00e7\u00e3o. Esse recurso \u00e9 importante para evitar problemas de conflito de nomes e para tornar o c\u00f3digo mais seguro e previs\u00edvel.</p> <p>A diferen\u00e7a entre <code>let</code> e <code>const</code> \u00e9 que as vari\u00e1veis \u200b\u200b<code>let</code> podem ser reatribu\u00eddas dentro do seu escopo, enquanto as constantes \u200b\u200b<code>const</code> n\u00e3o podem ser reatribu\u00eddas. Isso torna <code>const</code> \u00fatil para declarar identificadores ou valores que n\u00e3o devem ser alterados.</p> <p>Para declarar um identificador em JavaScript, voc\u00ea pode usar as palavras-chave <code>var</code>, <code>let</code> ou <code>const</code>, seguida pelo nome da vari\u00e1vel e, opcionalmente, um valor inicial. Aqui est\u00e3o alguns exemplos:</p> <pre><code>var numero = 5; // vari\u00e1vel declarada com \"var\"\nlet texto = \"Hello\"; // vari\u00e1vel declarada com \"let\"\nconst pi = 3.14; // constante declarada com \"const\"\n</code></pre> <p>Observe que o valor da vari\u00e1vel pode ser alterado a qualquer momento usando a atribui\u00e7\u00e3o de valor:</p> <pre><code>numero = 10; // numero agora tem o valor 10\ntexto = \"World\"; // texto agora tem o valor \"World\"\n</code></pre> <p>No entanto, o valor de uma constante n\u00e3o pode ser alterado depois de ser definido:</p> <pre><code>pi = 2.71; // isso causaria um erro porque \"pi\" \u00e9 uma constante\n</code></pre> <p>\u00c9 uma boa pr\u00e1tica usar constantes sempre que o valor n\u00e3o precisa ser alterado e vari\u00e1veis quando o valor pode mudar durante a execu\u00e7\u00e3o do programa. Al\u00e9m disso, o uso de \"let\" em vez de \"var\" \u00e9 recomendado em vers\u00f5es mais recentes do JavaScript para evitar problemas com escopo de vari\u00e1veis.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#escopo-de-variaveis-em-javascript","title":"Escopo de Vari\u00e1veis em JavaScript","text":"<p>O escopo de vari\u00e1veis em JavaScript define a visibilidade de uma vari\u00e1vel dentro de um determinado bloco de c\u00f3digo. Em outras palavras, o escopo determina onde a vari\u00e1vel pode ser acessada e modificada dentro do programa.</p> <p>Existem dois tipos de escopo de vari\u00e1veis em JavaScript: escopo global e escopo local.</p> <p>O escopo global \u00e9 o escopo mais amplo, onde as vari\u00e1veis s\u00e3o definidas fora de qualquer bloco de c\u00f3digo, como fun\u00e7\u00f5es ou loops. Vari\u00e1veis globais podem ser acessadas e modificadas em qualquer parte do programa, o que pode levar a erros dif\u00edceis de depurar. Aqui est\u00e1 um exemplo de vari\u00e1vel global:</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#escopo-global","title":"Escopo Global","text":"<p>A vari\u00e1vel <code>var</code> foi o primeiro tipo de vari\u00e1vel introduzido em JavaScript. Ela \u00e9 global por padr\u00e3o, o que significa que ela pode ser acessada de qualquer lugar do c\u00f3digo. Al\u00e9m disso, a vari\u00e1vel <code>var</code> pode ser declarada v\u00e1rias vezes no mesmo escopo sem gerar erro. No entanto, seu escopo \u00e9 limitado ao escopo da fun\u00e7\u00e3o em que ela foi declarada, se houver.</p> <pre><code>// Vari\u00e1veis globais devem ter nomes descritivos e ser declaradas fora de qualquer bloco de c\u00f3digo\nlet contadorGlobal = 0;\n\nfunction addContadorGlobal() {\ncontadorGlobal++; // A vari\u00e1vel contadorGlobal pode ser acessada e modificada dentro da fun\u00e7\u00e3o\nconsole.log(`Contador global \u00e9 agora: ${contadorGlobal}`);\n}\n\naddContadorGlobal(); // Chama a fun\u00e7\u00e3o para incrementar a vari\u00e1vel globalCount\n</code></pre>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#escopo-local","title":"Escopo Local","text":"<p>O escopo local \u00e9 o escopo dentro de um bloco de c\u00f3digo, como uma <code>fun\u00e7\u00e3o</code> ou um <code>loop</code>. Vari\u00e1veis locais s\u00f3 podem ser acessadas dentro do bloco onde foram definidas e podem ter o mesmo nome de vari\u00e1veis globais ou de outros escopos locais sem conflitos. Aqui est\u00e1 um exemplo de vari\u00e1vel local:</p> <pre><code>function calculoAreaCirculo(raio) {\n// Vari\u00e1veis locais devem ter nomes descritivos e ser declaradas dentro do bloco de c\u00f3digo onde s\u00e3o usadas\nconst PI = 3.14159;\nlet area = PI * raio * raio; // A vari\u00e1vel area s\u00f3 pode ser acessada dentro desta fun\u00e7\u00e3o\nconsole.log(`A \u00e1rea do circulo de raio ${raio} \u00e9 ${area}`);\n}\n\ncalculoAreaCirculo(5); // Chama a fun\u00e7\u00e3o para calcular a \u00e1rea de um c\u00edrculo com raio 5\n</code></pre>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#exemplo-com-escopo-global-e-local","title":"Exemplo com Escopo global e local","text":"<pre><code>function exemplo() {\nlet variavelEscopoGlobal = 1;\nif (true) {\nlet variavelEscopoLimitado = 2;\nconsole.log(variavelEscopoGlobal); // imprime \"1\"\n}\nconsole.log(variavelEscopoLimitado); // gera um erro: \"Uncaught ReferenceError: variavelEscopoLimitado is not defined\"\n}\n\nexemplo();\n</code></pre> <p>No exemplo acima, a vari\u00e1vel <code>variavelEscopoGlobal</code> tem escopo global, enquanto a vari\u00e1vel <code>variavelEscopoLimitado</code> tem escopo limitado ao bloco de c\u00f3digo <code>if</code>. A tentativa de acessar a vari\u00e1vel <code>variavelEscopoLimitado</code> fora do bloco de c\u00f3digo resulta em um erro.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#palavras-reservadas","title":"Palavras Reservadas","text":"<p>Palavras reservadas em JavaScript s\u00e3o termos que possuem significado especial na linguagem e que n\u00e3o podem ser utilizados como identificadores (nomes de vari\u00e1veis, fun\u00e7\u00f5es ou outros elementos do c\u00f3digo). Essas palavras s\u00e3o reservadas para fins espec\u00edficos, como estruturas de controle, declara\u00e7\u00e3o de vari\u00e1veis, declara\u00e7\u00e3o de fun\u00e7\u00f5es, entre outros.</p> <p>As palavras reservadas em JavaScript incluem:</p> <ul> <li><code>break</code>: usado para interromper a execu\u00e7\u00e3o de um loop ou switch statement.</li> <li><code>case</code>: usado em conjunto com o switch statement para avaliar uma express\u00e3o e executar o bloco de c\u00f3digo correspondente.</li> <li><code>catch</code>: usado em conjunto com o try statement para capturar exce\u00e7\u00f5es lan\u00e7adas pelo bloco de c\u00f3digo.</li> <li><code>class</code>: introduz uma declara\u00e7\u00e3o de classe.</li> <li><code>const</code>: define uma constante com um valor que n\u00e3o pode ser alterado.</li> <li><code>continue</code>: usado para pular uma itera\u00e7\u00e3o de um loop.</li> <li><code>debugger</code>: interrompe a execu\u00e7\u00e3o do c\u00f3digo para fins de depura\u00e7\u00e3o.</li> <li><code>default</code>: usado em conjunto com o switch statement para executar um bloco de c\u00f3digo padr\u00e3o quando nenhuma das condi\u00e7\u00f5es \u00e9 atendida.</li> <li><code>delete</code>: exclui uma propriedade de um objeto.</li> <li><code>do</code>: inicia um loop do/while.</li> <li><code>else</code>: usado em conjunto com um if statement para executar um bloco de c\u00f3digo alternativo quando a condi\u00e7\u00e3o n\u00e3o \u00e9 atendida.</li> <li><code>export</code>: exporta uma vari\u00e1vel, fun\u00e7\u00e3o ou objeto de um m\u00f3dulo.</li> <li><code>extends</code>: especifica uma classe pai para uma classe filho.</li> <li><code>false</code>: representa o valor l\u00f3gico falso.</li> <li><code>finally</code>: usado em conjunto com o try statement para executar um bloco de c\u00f3digo ap\u00f3s a conclus\u00e3o do bloco try/catch.</li> <li><code>for</code>: inicia um loop for.</li> <li><code>function</code>: define uma fun\u00e7\u00e3o.</li> <li><code>if</code>: inicia um bloco de c\u00f3digo condicional.</li> <li><code>import</code>: importa uma vari\u00e1vel, fun\u00e7\u00e3o ou objeto de outro m\u00f3dulo.</li> <li><code>in</code>: usado para verificar se uma propriedade existe em um objeto.</li> <li><code>instanceof</code>: usado para verificar se um objeto \u00e9 uma inst\u00e2ncia de uma classe.</li> <li><code>let</code>: define uma vari\u00e1vel com escopo de bloco.</li> <li><code>new</code>: cria uma nova inst\u00e2ncia de um objeto.</li> <li><code>null</code>: representa um valor nulo.</li> <li><code>return</code>: especifica o valor de retorno de uma fun\u00e7\u00e3o.</li> <li><code>super</code>: chama um m\u00e9todo na classe pai.</li> <li><code>switch</code>: inicia um bloco de c\u00f3digo de sele\u00e7\u00e3o m\u00faltipla.</li> <li><code>this</code>: refere-se ao objeto atual.</li> <li><code>throw</code>: lan\u00e7a uma exce\u00e7\u00e3o.</li> <li><code>true</code>: representa o valor l\u00f3gico verdadeiro.</li> <li><code>try</code>: inicia um bloco de c\u00f3digo que pode gerar exce\u00e7\u00f5es.</li> <li><code>typeof</code>: retorna o tipo de uma vari\u00e1vel ou express\u00e3o.</li> <li><code>var</code>: define uma vari\u00e1vel com escopo de fun\u00e7\u00e3o.</li> <li><code>void</code>: retorna um valor vazio.</li> <li><code>while</code>: inicia um loop while.</li> <li><code>with</code>: adiciona um objeto ao escopo atual.</li> </ul> <p>Ao criar c\u00f3digo JavaScript, \u00e9 importante evitar o uso de <code>palavras reservadas</code> como identificadores, pois isso pode causar erros e tornar o c\u00f3digo mais dif\u00edcil de entender.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#tipos-de-dados-em-javascript","title":"Tipos de dados em JavaScript","text":"<p>JavaScript possui v\u00e1rios tipos de dados, como n\u00fameros, strings, booleanos, arrays, objetos e muito mais. Cada tipo de dado \u00e9 usado para representar um conjunto espec\u00edfico de valores e tem um conjunto espec\u00edfico de opera\u00e7\u00f5es que podem ser realizadas com ele.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#tipos-de-dados-primitivos","title":"Tipos de dados primitivos","text":"<p>Os tipos de dados primitivos s\u00e3o aqueles que s\u00e3o diretamente suportados pela linguagem. Eles s\u00e3o imut\u00e1veis, o que significa que seus valores n\u00e3o podem ser alterados depois de definidos. Os tipos de dados primitivos em JavaScript s\u00e3o:</p> <ul> <li>Number: s\u00e3o usados para representar valores num\u00e9ricos. Podem ser inteiros ou decimais. Exemplo:</li> </ul> <pre><code>let idade = 30; let altura = 1.75;\ntypeof idade; // imprime number\n</code></pre> <ul> <li>Strings: s\u00e3o usados para representar valores de texto. Podem ser definidos usando aspas simples ou duplas. Exemplo:</li> </ul> <pre><code>let nome = \"Jo\u00e3o\";\nlet sobrenome = 'Silva';\ntypeof nome; // imprime string\n</code></pre> <ul> <li>Booleanos: s\u00e3o usados para representar valores verdadeiro ou falso. Exemplo:</li> </ul> <pre><code>let aprovado = true;\nlet reprovado = false;\ntypeof aprovado; // imprime boolean\n</code></pre> <ul> <li>Null: \u00e9 usado para representar um valor nulo ou vazio. Exemplo:</li> </ul> <pre><code>let valor = null;\n</code></pre> <ul> <li>Undefined: \u00e9 usado para representar uma vari\u00e1vel que ainda n\u00e3o foi definida. Exemplo:</li> </ul> <pre><code>let x;\nconsole.log(x); // imprime \"undefined\"\n</code></pre> <ul> <li>Symbol: \u00e9 usado para criar valores \u00fanicos e n\u00e3o modific\u00e1veis. Exemplo:</li> </ul> <pre><code>let id = Symbol();\n</code></pre>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#tipos-de-dados-nao-primitivos-tipos-estruturados","title":"Tipos de dados n\u00e3o primitivos (Tipos estruturados)","text":"<p>Os tipos de dados n\u00e3o primitivos s\u00e3o aqueles que s\u00e3o definidos pelo usu\u00e1rio ou s\u00e3o objetos. Eles s\u00e3o mut\u00e1veis, o que significa que seus valores podem ser alterados depois de definidos. Os tipos de dados n\u00e3o primitivos em JavaScript s\u00e3o:</p> <ul> <li>Arrays: s\u00e3o usados para representar cole\u00e7\u00f5es ordenadas de valores. Podem conter qualquer tipo de dado, inclusive outros arrays. Exemplo:</li> </ul> <pre><code>let numeros = [1, 2, 3];\nlet nomes = [\"Jo\u00e3o\", \"Maria\", \"Pedro\"];\nlet misto = [[1, 2, 3], [\"Jo\u00e3o\", \"Maria\", \"Pedro\"], 2, \"Marcos\"];\n</code></pre> <ul> <li>Objetos: s\u00e3o cole\u00e7\u00f5es de pares de chave-valor, em que cada chave \u00e9 uma string e o valor pode ser qualquer tipo de dado, incluindo outros objetos. Para criar um objeto em JavaScript, voc\u00ea pode usar a sintaxe de objeto literal, que \u00e9 colocar as chaves e valores dentro de chaves <code>{}</code>:</li> </ul> <pre><code>const pessoa = {\nnome: \"Jo\u00e3o\",\nidade: 30,\nendereco: {\nrua: \"Av. Paulista\",\nnumero: 100,\ncidade: \"S\u00e3o Paulo\"\n}\n};\n</code></pre> <p>Al\u00e9m desses tipos estruturados b\u00e1sicos, JavaScript tamb\u00e9m oferece outras formas de definir estruturas mais complexas, como classes e fun\u00e7\u00f5es construtoras, que permitem criar objetos com m\u00e9todos e propriedades personalizados.Essas s\u00e3o apenas algumas das maneiras de definir tipos estruturados em JavaScript. Existem muitas outras, incluindo as bibliotecas e frameworks populares, como React e Vue, que fornecem maneiras de definir componentes reutiliz\u00e1veis e estruturas de dados personalizadas.</p> <ul> <li>Fun\u00e7\u00f5es: s\u00e3o usadas para agrupar um conjunto de a\u00e7\u00f5es em um bloco de c\u00f3digo reutiliz\u00e1vel. Podem ser declaradas com ou sem par\u00e2metros. Exemplo:</li> </ul> <pre><code>function saudacao(nome) {\nconsole.log(\"Ol\u00e1, \" + nome + \"!\");\n}\n\nsaudacao(\"Jo\u00e3o\"); // imprime \"Ol\u00e1, Jo\u00e3o!\"\n</code></pre> <ul> <li>JSON: Embora o formato de dados JSON seja frequentemente usado em aplica\u00e7\u00f5es JavaScript e possa ser facilmente representado como objetos JavaScript, o JSON em si n\u00e3o \u00e9 um tipo estruturado de JavaScript.</li> </ul> <p>O JSON (JavaScript Object Notation) \u00e9 um formato de dados que pode ser usado por qualquer linguagem de programa\u00e7\u00e3o que possa analisar texto. Enquanto isso, um objeto <code>{}</code> em JavaScript \u00e9 um tipo de dados nativo da linguagem, que pode ser usado para representar dados estruturados de forma program\u00e1tica.</p> <ul> <li> <p>Sintaxe: O JSON tem uma sintaxe espec\u00edfica que \u00e9 diferente da sintaxe usada para criar objetos JavaScript. Os objetos em JavaScript s\u00e3o definidos usando a sintaxe de chaves <code>{}</code> e pares de chave-valor, enquanto o JSON \u00e9 definido usando apenas texto em um formato espec\u00edfico.</p> </li> <li> <p>M\u00e9todos: O JSON \u00e9 um formato de dados independente que \u00e9 usado para representar informa\u00e7\u00f5es em diferentes linguagens de programa\u00e7\u00e3o, incluindo JavaScript. Embora haja alguns m\u00e9todos JavaScript nativos que permitem trabalhar com JSON (como <code>JSON.stringify()</code> e <code>JSON.parse()</code>), esses m\u00e9todos n\u00e3o est\u00e3o dispon\u00edveis para objetos JavaScript.</p> </li> <li> <p>Flexibilidade: Os objetos em JavaScript s\u00e3o muito mais flex\u00edveis do que o JSON. Em um objeto JavaScript, voc\u00ea pode adicionar, remover e modificar propriedades e valores \u00e0 vontade. No JSON, entretanto, voc\u00ea precisa seguir uma estrutura r\u00edgida e bem definida, para que possa ser interpretado corretamente por outras linguagens de programa\u00e7\u00e3o.</p> </li> <li> <p>Armazenamento: Os objetos em JavaScript podem ser armazenados em vari\u00e1veis, em mem\u00f3ria ou em bancos de dados, enquanto o JSON \u00e9 geralmente usado para transferir dados entre diferentes sistemas e aplica\u00e7\u00f5es. No entanto, o JSON tamb\u00e9m pode ser armazenado em arquivos, bancos de dados ou mesmo em vari\u00e1veis JavaScript se necess\u00e1rio.</p> </li> </ul> <p>Suponha que temos um objeto JavaScript que representa um usu\u00e1rio:</p> <pre><code>const usuario = {\nnome: 'Ana',\nidade: 28,\nendereco: {\nrua: 'Rua das Flores',\nnumero: 123,\ncidade: 'S\u00e3o Paulo'\n}\n};\n</code></pre> <p>Este objeto \u00e9 representado usando a sintaxe de chaves <code>{}</code> e pode ser facilmente manipulado no c\u00f3digo JavaScript. Por exemplo, podemos adicionar uma nova propriedade <code>email</code> ao objeto da seguinte forma:</p> <pre><code>usuario.email = 'ana@gmail.com';\n</code></pre> <p>Agora, vamos supor que precisamos enviar os dados do usu\u00e1rio para um servidor. Nesse caso, podemos usar o formato JSON para representar esses dados em uma string de texto. Para fazer isso, podemos usar o m\u00e9todo <code>JSON.stringify()</code> do JavaScript:</p> <pre><code>const usuarioJSON = JSON.stringify(usuario);\n</code></pre> <p>Isso converter\u00e1 o objeto JavaScript em uma string JSON:</p> <pre><code>{\n\"nome\": \"Ana\",\n\"idade\": 28,\n\"endereco\": {\n\"rua\": \"Rua das Flores\",\n\"numero\": 123,\n\"cidade\": \"S\u00e3o Paulo\"\n},\n\"email\": \"ana@gmail.com\"\n}\n</code></pre> <p>Observe que a sintaxe \u00e9 diferente da usada em objetos JavaScript. Al\u00e9m disso, a propriedade <code>email</code> que adicionamos ao objeto original agora est\u00e1 inclu\u00edda na string JSON.</p> <p>Para converter a string JSON de volta para um objeto JavaScript, podemos usar o m\u00e9todo <code>JSON.parse()</code>:</p> <pre><code>const usuarioDeJSON = JSON.parse(usuarioJSON);\n</code></pre> <p>Isso converter\u00e1 a string JSON de volta para um objeto JavaScript que pode ser manipulado no c\u00f3digo da mesma forma que o objeto original:</p> <pre><code>{\nnome: 'Ana',\nidade: 28,\nendereco: {\nrua: 'Rua das Flores',\nnumero: 123,\ncidade: 'S\u00e3o Paulo'\n},\nemail: 'ana@gmail.com'\n}\n</code></pre> <p>Em resumo, a principal diferen\u00e7a entre um objeto JavaScript e um objeto JSON \u00e9 a sintaxe usada para represent\u00e1-los e a forma como eles s\u00e3o manipulados no c\u00f3digo. O objeto JavaScript \u00e9 um tipo de dados nativos da linguagem, enquanto o JSON \u00e9 um formato de dados independente usado para representar dados estruturados em v\u00e1rias linguagens de programa\u00e7\u00e3o, \u00e9 amplamente utilizado para transmitir dados entre o cliente e o servidor em aplica\u00e7\u00f5es web. Ele \u00e9 especialmente \u00fatil quando se trabalha com APIs (Application Programming Interfaces), pois permite que as aplica\u00e7\u00f5es transmitam e recebam dados de forma eficiente e f\u00e1cil de ler e manipular. O JSON tamb\u00e9m \u00e9 comumente usado para armazenar dados em bancos de dados NoSQL e em arquivos de configura\u00e7\u00e3o de aplica\u00e7\u00f5es.</p> <p>Em resumo, JavaScript possui v\u00e1rios tipos de dados que s\u00e3o usados para representar diferentes tipos de valores. \u00c9 importante entender os diferentes tipos de dados para poder trabalhar com eles corretamente em seus programas.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#como-trabalhar-com-colecoes","title":"Como trabalhar com cole\u00e7\u00f5es","text":"<p>Em JavaScript, uma cole\u00e7\u00e3o \u00e9 uma estrutura de dados que pode armazenar v\u00e1rios valores ou objetos de dados em uma \u00fanica vari\u00e1vel. As cole\u00e7\u00f5es mais comuns em JavaScript s\u00e3o as Arrays e os Objetos.</p> <p>Uma Array \u00e9 uma cole\u00e7\u00e3o ordenada de valores, que podem ser n\u00fameros, strings, objetos ou outras Arrays. Os elementos em uma Array s\u00e3o numerados sequencialmente a partir do \u00edndice 0 e podem ser acessados por meio do \u00edndice.</p> <p>J\u00e1 um Objeto \u00e9 uma cole\u00e7\u00e3o de pares de chave-valor, onde cada chave \u00e9 uma string que identifica a propriedade do objeto, e cada valor pode ser qualquer tipo de dado JavaScript, incluindo outras cole\u00e7\u00f5es, como Arrays e Objetos.</p> <p>Dessa forma, tipos estruturados em JavaScript se referem a um conjunto de tipos de dados que n\u00e3o s\u00e3o primitivos, ou seja, que n\u00e3o s\u00e3o simplesmente um valor \u00fanico como um n\u00famero ou uma string. Tipos estruturados incluem Arrays, Objetos e outros tipos de dados complexos que podem armazenar m\u00faltiplos valores.</p> <p>A diferen\u00e7a entre cole\u00e7\u00f5es e tipos estruturados \u00e9 que as cole\u00e7\u00f5es s\u00e3o estruturas de dados que podem armazenar uma ou mais inst\u00e2ncias de tipos estruturados, como Arrays e Objetos. Assim, uma cole\u00e7\u00e3o \u00e9 uma inst\u00e2ncia de um tipo estruturado.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#manipulando-arrays","title":"Manipulando Arrays","text":"<p>Para criar um array, voc\u00ea pode simplesmente usar o operador de colchetes [ ] e adicionar os elementos desejados separados por v\u00edrgulas. Por exemplo:</p> <pre><code>let meuArray = [1, 2, 3, 4, 5];\n</code></pre> <ul> <li>Acessando elementos de um Array: Voc\u00ea pode acessar elementos em um array usando o \u00edndice num\u00e9rico do elemento. Lembre-se de que os \u00edndices come\u00e7am em 0. Por exemplo:</li> </ul> <pre><code>let meuArray = [1, 2, 3, 4, 5];\nconsole.log(meuArray[0]); // retorna 1\n</code></pre> <ul> <li>Adicionando e removendo elementos de um Array: Voc\u00ea pode adicionar elementos ao final de um array usando o m\u00e9todo push() e remover elementos do final do array usando o m\u00e9todo pop(). Voc\u00ea tamb\u00e9m pode adicionar elementos ao in\u00edcio do array usando o m\u00e9todo unshift() e remover elementos do in\u00edcio do array usando o m\u00e9todo shift(). Por exemplo:</li> </ul> <pre><code>let meuArray = [1, 2, 3, 4, 5];\nmeuArray.push(6); // adiciona o elemento 6 ao final do array\nconsole.log(meuArray); // retorna [1, 2, 3, 4, 5, 6]\nmeuArray.pop(); // remove o \u00faltimo elemento do array (o 6)\nconsole.log(meuArray); // retorna [1, 2, 3, 4, 5]\nmeuArray.unshift(0); // adiciona o elemento 0 ao in\u00edcio do array\nconsole.log(meuArray); // retorna [0, 1, 2, 3, 4, 5]\nmeuArray.shift(); // remove o primeiro elemento do array (o 0)\nconsole.log(meuArray); // retorna [1, 2, 3, 4, 5]\n</code></pre> <ul> <li>Percorrendo um Array: Voc\u00ea pode percorrer um array usando um loop for ou o m\u00e9todo forEach(). O m\u00e9todo forEach() executa uma fun\u00e7\u00e3o para cada elemento do array. Por exemplo:</li> </ul> <pre><code>let meuArray = [1, 2, 3, 4, 5];\nfor (let i = 0; i &lt; meuArray.length; i++) {\nconsole.log(meuArray[i]);\n}\n// ou\nmeuArray.forEach(function(elemento) {\nconsole.log(elemento);\n});\n</code></pre> <p>Esses s\u00e3o apenas alguns exemplos de como manipular Arrays em JavaScript, consulte a documenta\u00e7\u00e3o e saiba mais!</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#manipulando-objetos","title":"Manipulando objetos","text":"<p>Existem v\u00e1rias maneiras de criar objetos em JavaScript. Uma delas \u00e9 usando a sintaxe literal de objeto, que \u00e9 definida entre chaves {}:</p> <pre><code>let pessoa = {\nnome: \"Jo\u00e3o\",\nidade: 30,\nendereco: {\nrua: \"Rua A\",\ncidade: \"S\u00e3o Paulo\"\n}\n};\n</code></pre> <p>Este objeto tem tr\u00eas propriedades: <code>nome</code>, <code>idade</code> e <code>endereco</code>. A propriedade <code>endereco</code> \u00e9 ela mesma um objeto, que tem duas propriedades: <code>rua</code> e <code>cidade</code>.</p> <p>Outra forma de criar um objeto \u00e9 usando o construtor de objetos <code>Object()</code>:</p> <pre><code>let pessoa = new Object();\npessoa.nome = \"Jo\u00e3o\";\npessoa.idade = 30;\npessoa.endereco = new Object();\npessoa.endereco.rua = \"Rua A\";\npessoa.endereco.cidade = \"S\u00e3o Paulo\";\n</code></pre> <ul> <li>Acessando propriedades: Para acessar as propriedades de um objeto, voc\u00ea pode usar a nota\u00e7\u00e3o de ponto ou a nota\u00e7\u00e3o de colchetes. A nota\u00e7\u00e3o de ponto \u00e9 mais comum e f\u00e1cil de ler, mas a nota\u00e7\u00e3o de colchetes \u00e9 \u00fatil quando voc\u00ea precisa acessar uma propriedade cujo nome \u00e9 armazenado em uma vari\u00e1vel:</li> </ul> <pre><code>console.log(pessoa.nome); // Jo\u00e3o\nconsole.log(pessoa.endereco.cidade); // S\u00e3o Paulo\n\nlet propriedade = \"idade\";\nconsole.log(pessoa[propriedade]); // 30\n</code></pre> <ul> <li>Alterando propriedades: Voc\u00ea pode alterar o valor de uma propriedade de objeto atribuindo um novo valor \u00e0 propriedade:</li> </ul> <pre><code>pessoa.nome = \"Maria\";\npessoa.endereco.rua = \"Rua B\";\n</code></pre> <ul> <li>Adicionando propriedades: Voc\u00ea pode adicionar novas propriedades a um objeto simplesmente atribuindo um valor a uma propriedade que ainda n\u00e3o existe:</li> </ul> <pre><code>pessoa.telefone = \"(11) 1234-5678\";\n</code></pre> <ul> <li>Removendo propriedades: Voc\u00ea pode remover uma propriedade de objeto usando o operador <code>delete</code>:</li> </ul> <pre><code>delete pessoa.telefone;\n</code></pre> <p>Percorrendo propriedades: Para percorrer todas as propriedades de um objeto, voc\u00ea pode usar o la\u00e7o <code>for...in</code>:</p> <pre><code>for (let propriedade in pessoa) {\nconsole.log(propriedade + \": \" + pessoa[propriedade]);\n}\n</code></pre> <p>Este la\u00e7o percorre todas as propriedades de <code>pessoa</code>, e em cada itera\u00e7\u00e3o, <code>propriedade</code> \u00e9 uma string com o nome da propriedade, e <code>pessoa[propriedade]</code> \u00e9 o valor da propriedade.</p> <ul> <li>Verificando a exist\u00eancia de propriedades: Voc\u00ea pode verificar se um objeto tem uma propriedade espec\u00edfica usando o operador <code>in</code>:</li> </ul> <pre><code>console.log(\"nome\" in pessoa); // true\nconsole.log(\"telefone\" in pessoa); // false\n</code></pre> <p>Voc\u00ea tamb\u00e9m pode verificar se um objeto tem uma propriedade pr\u00f3pria (n\u00e3o herdada) usando o m\u00e9todo <code>hasOwnProperty()</code>:</p> <pre><code>console.log(pessoa.hasOwnProperty(\"nome\")); // true\nconsole.log(pessoa.hasOwnProperty(\"toString\")); // false\n</code></pre>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#formatacao-e-indentacao-de-codigo-em-javascript","title":"Formata\u00e7\u00e3o e Indenta\u00e7\u00e3o de C\u00f3digo em JavaScript","text":"<p>A formata\u00e7\u00e3o e indenta\u00e7\u00e3o de c\u00f3digo em JavaScript s\u00e3o importantes para a legibilidade e manuten\u00e7\u00e3o do c\u00f3digo. Quando o c\u00f3digo \u00e9 organizado de maneira consistente e estruturada, \u00e9 mais f\u00e1cil para outros desenvolvedores entenderem o c\u00f3digo e fazerem altera\u00e7\u00f5es.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#principios-de-formatacao-de-codigo-em-javascript","title":"Princ\u00edpios de Formata\u00e7\u00e3o de C\u00f3digo em JavaScript","text":"<p>Os princ\u00edpios de formata\u00e7\u00e3o de c\u00f3digo em JavaScript incluem a consist\u00eancia, a clareza e a simplicidade. A consist\u00eancia \u00e9 importante para que o c\u00f3digo seja organizado de maneira previs\u00edvel e f\u00e1cil de entender. Isso pode ser alcan\u00e7ado usando um conjunto de regras de formata\u00e7\u00e3o que se aplicam a todo o c\u00f3digo. A clareza refere-se \u00e0 legibilidade do c\u00f3digo, ou seja, a facilidade de compreender o que cada instru\u00e7\u00e3o faz. Isso pode ser alcan\u00e7ado usando nomes de vari\u00e1veis descritivos, coment\u00e1rios claros e c\u00f3digo bem organizado. A simplicidade envolve manter o c\u00f3digo o mais simples poss\u00edvel, eliminando instru\u00e7\u00f5es desnecess\u00e1rias e mantendo o c\u00f3digo f\u00e1cil de entender.</p> <p>A escolha de nomes descritivos para vari\u00e1veis em JavaScript \u00e9 uma pr\u00e1tica importante que ajuda a tornar o c\u00f3digo mais leg\u00edvel e f\u00e1cil de entender. Uma vari\u00e1vel descritiva \u00e9 aquela que possui um nome que descreve claramente o que a vari\u00e1vel representa ou armazena.</p> <p>A seguir, est\u00e3o alguns exemplos de vari\u00e1veis descritivas em JavaScript, demonstrando como a escolha de nomes pode ser significativa para a compreens\u00e3o do c\u00f3digo:</p> <pre><code>// Exemplo 1: Vari\u00e1veis descritivas para armazenar dados do usu\u00e1rio\nlet nomeUsuario = \"Maria\"; // vari\u00e1vel para armazenar o nome do usu\u00e1rio\nlet idadeUsuario = 30; // vari\u00e1vel para armazenar a idade do usu\u00e1rio\nlet emailUsuario = \"maria@email.com\"; // vari\u00e1vel para armazenar o e-mail do usu\u00e1rio\n</code></pre> <p>No exemplo acima, os nomes das vari\u00e1veis s\u00e3o claramente descritivos e indicam o tipo de informa\u00e7\u00e3o que cada vari\u00e1vel est\u00e1 armazenando. Isso torna o c\u00f3digo mais f\u00e1cil de entender, especialmente para outros desenvolvedores que podem precisar trabalhar com esse c\u00f3digo.</p> <pre><code>// Exemplo 2: Vari\u00e1veis descritivas para c\u00e1lculos matem\u00e1ticos\nlet valorTotal = 50.00; // vari\u00e1vel para armazenar o valor total da compra\nlet quantidadeProdutos = 3; // vari\u00e1vel para armazenar a quantidade de produtos comprados\nlet valorFrete = 10.00; // vari\u00e1vel para armazenar o valor do frete\n\nlet valorFinal = valorTotal + (quantidadeProdutos * 5) + valorFrete; // c\u00e1lculo do valor final\n</code></pre> <p>Nesse exemplo, os nomes das vari\u00e1veis refletem as informa\u00e7\u00f5es que elas representam, tornando o c\u00f3digo mais f\u00e1cil de entender. Al\u00e9m disso, a escolha de nomes descritivos ajuda a prevenir erros, como a utiliza\u00e7\u00e3o incorreta de uma vari\u00e1vel.</p> <p>Em resumo, a escolha de nomes descritivos para vari\u00e1veis em JavaScript \u00e9 uma <code>pr\u00e1tica importante</code> que pode ajudar a tornar o c\u00f3digo mais <code>leg\u00edvel</code> e <code>f\u00e1cil</code> de entender. Ao escolher <code>nomes descritivos</code>, os desenvolvedores podem facilitar o processo de <code>leitura</code> e <code>manuten\u00e7\u00e3o</code> do c\u00f3digo, bem como prevenir erros de programa\u00e7\u00e3o.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#principios-de-indentacao-de-codigo-em-javascript","title":"Princ\u00edpios de Indenta\u00e7\u00e3o de C\u00f3digo em JavaScript","text":"<p>Os princ\u00edpios de <code>indenta\u00e7\u00e3o</code> de c\u00f3digo em JavaScript incluem a <code>hierarquia</code> e a <code>clareza</code>. A <code>hierarquia</code> refere-se \u00e0 estrutura\u00e7\u00e3o do c\u00f3digo em blocos, fun\u00e7\u00f5es e outras estruturas. Cada <code>n\u00edvel da hierarquia</code> deve ser indentado para que seja f\u00e1cil de entender a estrutura do c\u00f3digo. A <code>clareza</code> refere-se \u00e0 legibilidade do c\u00f3digo, ou seja, a facilidade de entender a rela\u00e7\u00e3o entre as instru\u00e7\u00f5es. Isso pode ser alcan\u00e7ado usando uma <code>indenta\u00e7\u00e3o</code> consistente e adequada, que torne claro quais instru\u00e7\u00f5es pertencem a quais blocos de c\u00f3digo.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#exemplos-praticos","title":"Exemplos Pr\u00e1ticos","text":"<p>Aqui est\u00e3o alguns exemplos pr\u00e1ticos de formata\u00e7\u00e3o e indenta\u00e7\u00e3o de c\u00f3digo em JavaScript:</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#exemplo-1-formatacao-de-codigo","title":"Exemplo 1: Formata\u00e7\u00e3o de c\u00f3digo","text":"<pre><code>// c\u00f3digo sem formata\u00e7\u00e3o\nlet a=2;let b=3;let c=a+b;console.log(c);\n\n// c\u00f3digo com formata\u00e7\u00e3o e usando nomes de vari\u00e1veis descritivos\nlet valorInicial = 2;\nlet valorRecebido = 3;\nlet valorTotal = valorInicial + valorRecebido;\nconsole.log(valorTotal);\n</code></pre> <p>O c\u00f3digo formatado usando nomes de vari\u00e1veis descritivos \u00e9 muito mais f\u00e1cil de ler e entender, com instru\u00e7\u00f5es separadas por linhas e com espa\u00e7amento adequado.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#exemplo-2-indentacao-de-codigo","title":"Exemplo 2: Indenta\u00e7\u00e3o de c\u00f3digo","text":"<pre><code>// c\u00f3digo sem indenta\u00e7\u00e3o\nif (saldo == 0) {\nlet emprestimo = 2;\nif (emprestimo == 2) {\nlet divida = 3;\nconsole.log(divida);\n}\n}\n\n// c\u00f3digo com indenta\u00e7\u00e3o\nif (saldo == 0) {\nlet emprestimo = 2;\nif (emprestimo == 2) {\nlet divida = 3;\nconsole.log(divida);\n}\n}\n</code></pre> <p>O <code>c\u00f3digo indentado</code> torna a hierarquia mais clara, indicando qual bloco de c\u00f3digo pertence a qual n\u00edvel da hierarquia.</p> <p>A <code>formata\u00e7\u00e3o</code> e <code>indenta\u00e7\u00e3o</code> adequadas de c\u00f3digo s\u00e3o importantes para que o c\u00f3digo seja mais <code>leg\u00edvel</code> e <code>f\u00e1cil</code> de entender. Quando o c\u00f3digo \u00e9 organizado de maneira <code>consistente</code> e <code>estruturada</code>, \u00e9 mais f\u00e1cil para outros desenvolvedores entenderem o c\u00f3digo e fazerem altera\u00e7\u00f5es. Al\u00e9m disso, a <code>formata\u00e7\u00e3o</code> e a <code>indenta\u00e7\u00e3o</code> adequadas podem ajudar a prevenir erros de sintaxe e tornar o processo de depura\u00e7\u00e3o mais f\u00e1cil. Em resumo, a <code>formata\u00e7\u00e3o</code> e a <code>indenta\u00e7\u00e3o</code> adequadas s\u00e3o fundamentais para um c\u00f3digo JavaScript de qualidade.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#tipos-de-comentarios-em-javascript-e-sua-aplicacao","title":"Tipos de coment\u00e1rios em JavaScript e sua aplica\u00e7\u00e3o","text":"<p><code>Coment\u00e1rios</code> s\u00e3o uma parte importante da programa\u00e7\u00e3o em JavaScript. Eles ajudam os desenvolvedores a entender o c\u00f3digo e a manter a <code>documenta\u00e7\u00e3o</code> do projeto. Existem dois tipos principais de coment\u00e1rios em JavaScript: <code>coment\u00e1rios de uma linha</code> e <code>coment\u00e1rios de v\u00e1rias linhas</code>. Al\u00e9m disso, existem coment\u00e1rios especiais chamados <code>JSDoc</code> que s\u00e3o usados para documentar o c\u00f3digo e gerar documenta\u00e7\u00e3o autom\u00e1tica.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#comentarios-de-uma-linha","title":"Coment\u00e1rios de uma linha","text":"<p><code>Coment\u00e1rios de uma linha</code> s\u00e3o usados para incluir anota\u00e7\u00f5es curtas em uma \u00fanica linha de c\u00f3digo. Eles come\u00e7am com <code>//</code> e s\u00e3o ignorados pelo interpretador JavaScript. Os coment\u00e1rios de uma linha s\u00e3o usados para explicar o que o c\u00f3digo faz, ou para deixar uma nota para outro desenvolvedor. Veja o exemplo abaixo:</p> <pre><code>// Define uma vari\u00e1vel chamada 'idade' com o valor de 20\nlet idade = 20;\n</code></pre>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#comentarios-de-varias-linhas","title":"Coment\u00e1rios de v\u00e1rias linhas","text":"<p><code>Coment\u00e1rios de v\u00e1rias linhas</code> s\u00e3o usados para comentar blocos de c\u00f3digo ou para incluir anota\u00e7\u00f5es mais longas. Eles come\u00e7am com <code>/*</code> e terminam com <code>*/</code>. Coment\u00e1rios de v\u00e1rias linhas s\u00e3o \u00fateis para explicar em mais detalhes como o c\u00f3digo funciona. Veja o exemplo abaixo:</p> <pre><code>/*\nEsta fun\u00e7\u00e3o calcula o cubo de um n\u00famero.\nPara calcular o cubo, o n\u00famero \u00e9 multiplicado por si mesmo tr\u00eas vezes.\n*/\nfunction calcularCubo(numero) {\nreturn numero * numero * numero;\n}\n</code></pre>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#documentacao-de-programas-javascript","title":"Documenta\u00e7\u00e3o de Programas JavaScript","text":"<p>A documenta\u00e7\u00e3o de um programa JavaScript \u00e9 um conjunto de informa\u00e7\u00f5es escritas sobre o programa, incluindo como usar o programa, quais fun\u00e7\u00f5es e m\u00e9todos ele oferece, quais par\u00e2metros essas fun\u00e7\u00f5es e m\u00e9todos aceitam, quais valores eles retornam, exemplos de uso e outros detalhes relevantes.</p> <p>A documenta\u00e7\u00e3o \u00e9 essencial para ajudar outros desenvolvedores a entenderem e usarem o programa com facilidade, especialmente em projetos colaborativos. Al\u00e9m disso, a documenta\u00e7\u00e3o tamb\u00e9m \u00e9 uma ferramenta valiosa para ajudar os pr\u00f3prios desenvolvedores a lembrarem de como seu pr\u00f3prio c\u00f3digo funciona e como us\u00e1-lo corretamente.</p> <p>Em JavaScript, a documenta\u00e7\u00e3o pode ser criada em diferentes formatos, incluindo arquivos de texto simples, arquivos Markdown, documenta\u00e7\u00e3o HTML gerada automaticamente a partir de c\u00f3digo-fonte, entre outros.</p> <p>A documenta\u00e7\u00e3o pode ser criada manualmente ou com a ajuda de ferramentas de documenta\u00e7\u00e3o automatizadas, como o JSDoc ou o Docco. Com essas ferramentas, os desenvolvedores podem escrever coment\u00e1rios especiais em seu c\u00f3digo que s\u00e3o usados para gerar a documenta\u00e7\u00e3o automaticamente a partir do c\u00f3digo-fonte. Isso ajuda a manter a documenta\u00e7\u00e3o atualizada \u00e0 medida que o c\u00f3digo \u00e9 atualizado e a reduzir o trabalho manual envolvido na cria\u00e7\u00e3o de documenta\u00e7\u00e3o.</p> <ul> <li>Coment\u00e1rios JSDoc s\u00e3o uma forma especializada de coment\u00e1rios em JavaScript que s\u00e3o usados para documentar o c\u00f3digo. Eles s\u00e3o usados para documentar fun\u00e7\u00f5es, vari\u00e1veis, par\u00e2metros e valores de retorno. Os coment\u00e1rios JSDoc come\u00e7am com <code>/**</code> e terminam com <code>*/</code>. Os coment\u00e1rios JSDoc possuem uma sintaxe espec\u00edfica que permite especificar informa\u00e7\u00f5es sobre as fun\u00e7\u00f5es, vari\u00e1veis e outros elementos do c\u00f3digo.</li> </ul> <p>Veja o exemplo abaixo:</p> <pre><code>/**\n * Calcula a m\u00e9dia de um conjunto de n\u00fameros.\n *\n * @param {number[]} numeros - O conjunto de n\u00fameros para calcular a m\u00e9dia.\n * @returns {number} A m\u00e9dia dos n\u00fameros fornecidos.\n */\nfunction calcularMedia(numeros) {\nconst total = numeros.reduce((soma, numero) =&gt; soma + numero, 0);\nreturn total / numeros.length;\n}\n</code></pre> <p>O exemplo acima usa coment\u00e1rios JSDoc para documentar uma fun\u00e7\u00e3o que calcula a m\u00e9dia de um conjunto de n\u00fameros. O coment\u00e1rio come\u00e7a com <code>/**</code> e termina com <code>*/</code>. Os coment\u00e1rios JSDoc incluem informa\u00e7\u00f5es sobre os par\u00e2metros da fun\u00e7\u00e3o (<code>@param</code>) e o valor de retorno (<code>@returns</code>). Essas informa\u00e7\u00f5es s\u00e3o usadas por ferramentas de documenta\u00e7\u00e3o, como o JSDoc ou o DocumentJS, para gerar documenta\u00e7\u00e3o automatizada para o c\u00f3digo.</p> <p><code>Coment\u00e1rios</code> s\u00e3o uma parte importante da programa\u00e7\u00e3o em JavaScript. Eles ajudam os desenvolvedores a entender o c\u00f3digo e a manter a documenta\u00e7\u00e3o do projeto. Existem dois tipos principais de coment\u00e1rios em JavaScript: <code>coment\u00e1rios de uma linha</code> e <code>coment\u00e1rios de v\u00e1rias linhas</code>. Al\u00e9m disso, existem coment\u00e1rios especiais chamados <code>coment\u00e1rios JSDoc</code>.</p> <p>Em resumo, a documenta\u00e7\u00e3o \u00e9 uma parte importante do processo de desenvolvimento de software e pode ajudar a melhorar a qualidade do c\u00f3digo e a facilidade de uso do programa.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#operadores-javascript","title":"Operadores JavaScript","text":"<p>Introdu\u00e7\u00e3o</p> <p>Operadores em JavaScript s\u00e3o usados para realizar opera\u00e7\u00f5es matem\u00e1ticas, l\u00f3gicas e de atribui\u00e7\u00e3o em vari\u00e1veis. Eles s\u00e3o ferramentas essenciais para escrever um c\u00f3digo limpo e eficiente.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#operadores-aritmeticos","title":"Operadores Aritm\u00e9ticos","text":"<p>Os operadores aritm\u00e9ticos em JavaScript s\u00e3o utilizados para realizar opera\u00e7\u00f5es matem\u00e1ticas em vari\u00e1veis. Abaixo segue uma lista dos operadores aritm\u00e9ticos em JavaScript:</p> Operador Descri\u00e7\u00e3o + Operador de adi\u00e7\u00e3o - Operador de subtra\u00e7\u00e3o * Operador de multiplica\u00e7\u00e3o / Operador de divis\u00e3o % Operador de resto ** Operador de exponencia\u00e7\u00e3o <p>E aqui est\u00e3o exemplos de uso de cada um desses operadores:</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#operador-de-adicao","title":"Operador de Adi\u00e7\u00e3o (+)","text":"<p>O operador de adi\u00e7\u00e3o (<code>+</code>) \u00e9 usado para adicionar dois valores.</p> <p>Exemplo:</p> <pre><code>let valor1 = 5;\nlet valor2 = 2;\nlet resultado = valor1 + valor2;\nconsole.log(resultado); // Sa\u00edda: 7\n</code></pre> <p>Neste exemplo, <code>valor1</code> e <code>valor2</code> s\u00e3o adicionados atrav\u00e9s do operador <code>+</code>, resultando em <code>resultado</code> com valor 7.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#operador-de-subtracao-","title":"Operador de Subtra\u00e7\u00e3o (-)","text":"<p>O operador de subtra\u00e7\u00e3o (<code>-</code>) \u00e9 usado para subtrair um valor de outro.</p> <p>Exemplo:</p> <pre><code>let valor1 = 5;\nlet valor2 = 2;\nlet resultado = valor1 - valor2;\nconsole.log(resultado); // Sa\u00edda: 3\n</code></pre> <p>Neste exemplo, <code>valor2</code> \u00e9 subtra\u00eddo de <code>valor1</code> atrav\u00e9s do operador <code>-</code>, resultando em <code>resultado</code> com valor 3.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#operador-de-multiplicacao","title":"Operador de Multiplica\u00e7\u00e3o (*)","text":"<p>O operador de multiplica\u00e7\u00e3o (<code>*</code>) \u00e9 usado para multiplicar dois valores.</p> <p>Exemplo:</p> <pre><code>let valor1 = 5;\nlet valor2 = 2;\nlet resultado = valor1 * valor2;\nconsole.log(resultado); // Sa\u00edda: 10\n</code></pre> <p>Neste exemplo, <code>valor1</code> e <code>valor2</code> s\u00e3o multiplicados atrav\u00e9s do operador <code>*</code>, resultando em <code>resultado</code> com valor 10.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#operador-de-divisao","title":"Operador de Divis\u00e3o (/)","text":"<p>O operador de divis\u00e3o (<code>/</code>) \u00e9 usado para dividir um valor por outro.</p> <p>Exemplo:</p> <pre><code>let valor1 = 6;\nlet valor2 = 3;\nlet resultado = valor1 / valor2;\nconsole.log(resultado); // Sa\u00edda: 2\n</code></pre> <p>Neste exemplo, <code>valor1</code> \u00e9 dividido por <code>valor2</code> atrav\u00e9s do operador <code>/</code>, resultando em <code>resultado</code> com valor 2.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#operador-de-resto","title":"Operador de Resto (%)","text":"<p>O operador de resto (<code>%</code>) \u00e9 usado para obter o resto da divis\u00e3o de um valor por outro.</p> <p>Exemplo:</p> <pre><code>let valor1 = 7;\nlet valor2 = 2;\nlet resultado = valor1 % valor2;\nconsole.log(resultado); // Sa\u00edda: 1\n</code></pre> <p>Neste exemplo, <code>valor1</code> \u00e9 dividido por <code>valor2</code> atrav\u00e9s do operador <code>%</code>, resultando em <code>resultado</code> com valor 1, que \u00e9 o resto da divis\u00e3o.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#operador-de-exponenciacao","title":"Operador de Exponencia\u00e7\u00e3o (**)","text":"<p>O operador de exponencia\u00e7\u00e3o (<code>**</code>) \u00e9 usado para elevar um valor a uma pot\u00eancia.</p> <p>Exemplo:</p> <pre><code>let valor1 = 2;\nlet valor2 = 3;\nlet resultado = valor1 ** valor2;\nconsole.log(resultado); // Sa\u00edda: 8\n</code></pre> <p>Neste exemplo, <code>valor1</code> \u00e9 elevado \u00e0 pot\u00eancia de <code>valor2</code> atrav\u00e9s do operador <code>**</code>, resultando em <code>resultado</code> com valor 8.</p> <p>Os operadores aritm\u00e9ticos s\u00e3o muito \u00fateis em JavaScript e podem ser usados em diversas situa\u00e7\u00f5es para realizar c\u00e1lculos. \u00c9 importante, no entanto, us\u00e1-los com cuidado para evitar erros ou comportamentos inesper</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#precedencia-de-operadores-aritmeticos","title":"Preced\u00eancia de Operadores Aritm\u00e9ticos","text":"<p>Os operadores aritm\u00e9ticos t\u00eam uma preced\u00eancia definida em JavaScript, o que significa que algumas opera\u00e7\u00f5es ser\u00e3o realizadas antes de outras, mesmo que n\u00e3o estejam entre par\u00eanteses. Abaixo segue uma tabela com a ordem de preced\u00eancia dos operadores aritm\u00e9ticos em JavaScript:</p> Operador Descri\u00e7\u00e3o ** Exponencia\u00e7\u00e3o * / % Multiplica\u00e7\u00e3o, divis\u00e3o e resto da divis\u00e3o + - Adi\u00e7\u00e3o e subtra\u00e7\u00e3o <p>Exemplo:</p> <pre><code>let valor1 = 10;\nlet valor2 = 5;\nlet valor3 = 2;\n\nlet resultado = valor1 + valor2 * valor3; // resultado = 20\n</code></pre> <p>Nesse exemplo, a multiplica\u00e7\u00e3o entre <code>valor2</code> e <code>valor3</code> \u00e9 realizada primeiro, devido \u00e0 sua maior preced\u00eancia em rela\u00e7\u00e3o \u00e0 adi\u00e7\u00e3o entre <code>valor1</code> e o resultado da multiplica\u00e7\u00e3o.</p> <p>\u00c9 importante lembrar que, se necess\u00e1rio, \u00e9 poss\u00edvel alterar a ordem de preced\u00eancia utilizando par\u00eanteses. Por exemplo, se quisermos que a adi\u00e7\u00e3o seja realizada antes da multiplica\u00e7\u00e3o no exemplo anterior, podemos escrever da seguinte forma:</p> <pre><code>let resultado = (valor1 + valor2) * valor3; // resultado = 30\n</code></pre> <p>Os operadores aritm\u00e9ticos em JavaScript s\u00e3o muito importantes para realizar c\u00e1lculos matem\u00e1ticos em vari\u00e1veis. Al\u00e9m disso, entender a preced\u00eancia dos operadores aritm\u00e9ticos \u00e9 fundamental para escrever c\u00f3digos corretos e eficientes. Por isso, \u00e9 importante seguir as conven\u00e7\u00f5es de boas pr\u00e1ticas de c\u00f3digo, utilizar nomes descritivos para as vari\u00e1veis e utilizar par\u00eanteses quando necess\u00e1rio para garantir a ordem correta de execu\u00e7\u00e3o das opera\u00e7\u00f5es.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#operadores-de-atribuicao-em-javascript","title":"Operadores de Atribui\u00e7\u00e3o em JavaScript","text":"<p>Os operadores de atribui\u00e7\u00e3o em JavaScript s\u00e3o utilizados para atribuir valores a vari\u00e1veis. Abaixo segue uma lista dos operadores de atribui\u00e7\u00e3o em JavaScript:</p> Operador Descri\u00e7\u00e3o = Atribui\u00e7\u00e3o simples += Atribui\u00e7\u00e3o com adi\u00e7\u00e3o -= Atribui\u00e7\u00e3o com subtra\u00e7\u00e3o *= Atribui\u00e7\u00e3o com multiplica\u00e7\u00e3o /= Atribui\u00e7\u00e3o com divis\u00e3o %= Atribui\u00e7\u00e3o com resto da divis\u00e3o **= Atribui\u00e7\u00e3o com exponencia\u00e7\u00e3o &lt;&lt;= Atribui\u00e7\u00e3o com deslocamento \u00e0 esquerda &gt;&gt;= Atribui\u00e7\u00e3o com deslocamento \u00e0 direita &gt;&gt;&gt;= Atribui\u00e7\u00e3o com deslocamento sem sinal &amp;= Atribui\u00e7\u00e3o com AND bit a bit ^= Atribui\u00e7\u00e3o com XOR bit a bit |= Atribui\u00e7\u00e3o com OR bit a bit"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#atribuicao-simples","title":"Atribui\u00e7\u00e3o Simples","text":"<p>O operador de atribui\u00e7\u00e3o simples (<code>=</code>) \u00e9 utilizado para atribuir um valor a uma vari\u00e1vel.</p> <p>Exemplo:</p> <pre><code>let valor = 10;\n</code></pre>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#atribuicao-com-adicao","title":"Atribui\u00e7\u00e3o com Adi\u00e7\u00e3o","text":"<p>O operador de atribui\u00e7\u00e3o com adi\u00e7\u00e3o (<code>+=</code>) \u00e9 utilizado para somar um valor a uma vari\u00e1vel.</p> <p>Exemplo:</p> <pre><code>let valor = 10;\nvalor += 5; // valor = 15\n</code></pre>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#atribuicao-com-subtracao","title":"Atribui\u00e7\u00e3o com Subtra\u00e7\u00e3o","text":"<p>O operador de atribui\u00e7\u00e3o com subtra\u00e7\u00e3o (<code>-=</code>) \u00e9 utilizado para subtrair um valor de uma vari\u00e1vel.</p> <p>Exemplo:</p> <pre><code>let valor = 10;\nvalor -= 3; // valor = 7\n</code></pre>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#atribuicao-com-multiplicacao","title":"Atribui\u00e7\u00e3o com Multiplica\u00e7\u00e3o","text":"<p>O operador de atribui\u00e7\u00e3o com multiplica\u00e7\u00e3o (<code>*=</code>) \u00e9 utilizado para multiplicar uma vari\u00e1vel por um valor.</p> <p>Exemplo:</p> <pre><code>let valor = 10;\nvalor *= 2; // valor = 20\n</code></pre>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#atribuicao-com-divisao","title":"Atribui\u00e7\u00e3o com Divis\u00e3o","text":"<p>O operador de atribui\u00e7\u00e3o com divis\u00e3o (<code>/=</code>) \u00e9 utilizado para dividir uma vari\u00e1vel por um valor.</p> <p>Exemplo:</p> <pre><code>let valor = 10;\nvalor /= 4; // valor = 2.5\n</code></pre>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#atribuicao-com-resto-da-divisao","title":"Atribui\u00e7\u00e3o com Resto da Divis\u00e3o","text":"<p>O operador de atribui\u00e7\u00e3o com resto da divis\u00e3o (<code>%=</code>) \u00e9 utilizado para obter o resto da divis\u00e3o de uma vari\u00e1vel por um valor.</p> <p>Exemplo:</p> <pre><code>let valor = 10;\nvalor %= 3; // valor = 1\n</code></pre>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#atribuicao-com-exponenciacao","title":"Atribui\u00e7\u00e3o com Exponencia\u00e7\u00e3o","text":"<p>O operador de atribui\u00e7\u00e3o com exponencia\u00e7\u00e3o (<code>**=</code>) \u00e9 utilizado para elevar uma vari\u00e1vel a uma pot\u00eancia.</p> <p>Exemplo:</p> <pre><code>let valor = 2;\nvalor **= 3; // valor = 8\n</code></pre>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#atribuicao-com-deslocamento-a-esquerda","title":"Atribui\u00e7\u00e3o com Deslocamento \u00e0 Esquerda","text":"<p>O operador de atribui\u00e7\u00e3o com deslocamento \u00e0 esquerda (<code>&lt;&lt;=</code>) \u00e9 utilizado para deslocar os bits de uma vari\u00e1vel para a esquerda.</p> <p>Exemplo:</p> <pre><code>let valor = 10;\nvalor &lt;&lt;= 2; // valor = 40\n</code></pre>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#atribuicao-com-deslocamento-a-direita","title":"Atribui\u00e7\u00e3o com Deslocamento \u00e0 Direita","text":"<p>O operador de atribui\u00e7\u00e3o com deslocamento \u00e0 direita (<code>&gt;&gt;=</code>) \u00e9 utilizado para deslocar os bits de uma vari\u00e1vel para a direita.</p> <p>Exemplo:</p> <pre><code>let valor = 10;\nvalor &gt;&gt;= 1; // valor = 5\n</code></pre>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#atribuicao-com-deslocamento-sem-sinal","title":"Atribui\u00e7\u00e3o com Deslocamento Sem Sinal","text":"<p>O operador de atribui\u00e7\u00e3o com deslocamento sem sinal (<code>&gt;&gt;&gt;=</code>) \u00e9 utilizado para deslocar os bits de uma vari\u00e1vel para a direita, preenchendo os bits mais significativos com zero.</p> <p>Exemplo:</p> <pre><code>let valor = -10;\nvalor &gt;&gt;&gt;= 1; // valor = 2147483643\n</code></pre>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#atribuicao-com-and-bit-a-bit","title":"Atribui\u00e7\u00e3o com AND Bit a Bit","text":"<p>O operador de atribui\u00e7\u00e3o com AND bit a bit (<code>&amp;=</code>) \u00e9 utilizado para realizar uma opera\u00e7\u00e3o AND bit a bit entre uma vari\u00e1vel e um valor.</p> <p>Exemplo:</p> <pre><code>let valor = 10;\nvalor &amp;= 3; // valor = 2\n</code></pre>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#operadores-de-comparacao","title":"Operadores de Compara\u00e7\u00e3o","text":"<p>Os operadores de compara\u00e7\u00e3o em JavaScript permitem que voc\u00ea compare dois valores e verifique se eles s\u00e3o iguais ou diferentes, maiores ou menores que um determinado valor. Eles retornam um valor booleano (<code>true</code> ou <code>false</code>) dependendo do resultado da compara\u00e7\u00e3o.</p> <p>Tabela com os operadores de compara\u00e7\u00e3o em JavaScript:</p> Operador Descri\u00e7\u00e3o == Verifica se os valores s\u00e3o iguais, sem levar em conta o tipo de dado. === Verifica se os valores s\u00e3o iguais, levando em conta o tipo de dado. != Verifica se os valores s\u00e3o diferentes, sem levar em conta o tipo de dado. !== Verifica se os valores s\u00e3o diferentes, levando em conta o tipo de dado. &gt; Verifica se o valor da esquerda \u00e9 maior que o da direita. &lt; Verifica se o valor da esquerda \u00e9 menor que o da direita. &gt;= Verifica se o valor da esquerda \u00e9 maior ou igual ao da direita. &lt;= Verifica se o valor da esquerda \u00e9 menor ou igual ao da direita. <p>\u00c9 importante lembrar que a utiliza\u00e7\u00e3o correta dos operadores de compara\u00e7\u00e3o em JavaScript \u00e9 essencial para o bom funcionamento do programa e para evitar poss\u00edveis erros e bugs.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#igualdade","title":"Igualdade (==)","text":"<p>O operador de igualdade (<code>==</code>) \u00e9 utilizado para comparar se dois valores s\u00e3o iguais. Ele realiza uma convers\u00e3o de tipo antes da compara\u00e7\u00e3o, o que pode levar a resultados inesperados em alguns casos.</p> <p>Exemplo:</p> <pre><code>let valor1 = 10;\nlet valor2 = \"10\";\nconsole.log(valor1 == valor2); // true\n</code></pre> <p>Neste exemplo, o operador <code>==</code> compara se <code>valor1</code> \u00e9 igual a <code>valor2</code>, mesmo que <code>valor2</code> seja uma string. Como o valor num\u00e9rico da string \"10\" \u00e9 igual a 10, a compara\u00e7\u00e3o retorna verdadeiro.</p> <p>Para evitar resultados inesperados como este, \u00e9 recomendado utilizar o operador de igualdade estrita (<code>===</code>) que n\u00e3o realiza convers\u00e3o de tipo antes da compara\u00e7\u00e3o.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#igualdade-estrita","title":"Igualdade Estrita (===)","text":"<p>O operador de igualdade estrita (<code>===</code>) \u00e9 utilizado para comparar se dois valores s\u00e3o iguais, sem realizar convers\u00e3o de tipo antes da compara\u00e7\u00e3o. Ele leva em considera\u00e7\u00e3o tanto o valor quanto o tipo dos valores.</p> <p>Exemplo:</p> <pre><code>let valor1 = 10;\nlet valor2 = \"10\";\nconsole.log(valor1 === valor2); // false\n</code></pre> <p>Neste exemplo, o operador <code>===</code> compara se <code>valor1</code> \u00e9 igual a <code>valor2</code>, levando em considera\u00e7\u00e3o o tipo dos valores. Como <code>valor1</code> \u00e9 do tipo <code>number</code> e <code>valor2</code> \u00e9 do tipo <code>string</code>, a compara\u00e7\u00e3o retorna falso.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#desigualdade","title":"Desigualdade (!=)","text":"<p>O operador de desigualdade (<code>!=</code>) \u00e9 utilizado para comparar se dois valores s\u00e3o diferentes. Assim como o operador de igualdade, ele realiza uma convers\u00e3o de tipo antes da compara\u00e7\u00e3o.</p> <p>Exemplo:</p> <pre><code>let valor1 = 10;\nlet valor2 = \"10\";\nconsole.log(valor1 != valor2); // false\n</code></pre> <p>Neste exemplo, o operador <code>!=</code> compara se <code>valor1</code> \u00e9 diferente de <code>valor2</code>. Como o valor num\u00e9rico da string \"10\" \u00e9 igual a 10, a compara\u00e7\u00e3o retorna falso.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#desigualdade-estrita","title":"Desigualdade Estrita (!==)","text":"<p>O operador de desigualdade estrita (<code>!==</code>) \u00e9 utilizado para comparar se dois valores s\u00e3o diferentes, sem realizar convers\u00e3o de tipo antes da compara\u00e7\u00e3o. Ele leva em considera\u00e7\u00e3o tanto o valor quanto o tipo dos valores.</p> <p>Exemplo:</p> <pre><code>let valor1 = 10;\nlet valor2 = \"10\";\nconsole.log(valor1 !== valor2); // true\n</code></pre> <p>Neste exemplo, o operador <code>!==</code> compara se <code>valor1</code> \u00e9 diferente de <code>valor2</code>, levando em considera\u00e7\u00e3o o tipo dos valores. Como <code>valor1</code> \u00e9 do tipo <code>number</code> e <code>valor2</code> \u00e9 do tipo <code>string</code>, a compara\u00e7\u00e3o retorna verdadeiro.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#maior-que","title":"Maior que (&gt;)","text":"<p>O operador de maior que (<code>&gt;</code>) \u00e9 utilizado para comparar se um valor \u00e9 maior do que outro.</p> <p>Exemplo:</p> <pre><code>let valor1 = 10;\nlet valor2 = 5;\nconsole.log(valor1 &gt; valor2); // true\n</code></pre> <p>Neste exemplo, o operador <code>&gt;</code> compara se <code>valor1</code> \u00e9 maior do que <code>valor2</code>, retornando verdadeiro.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#menor-que","title":"Menor que (&lt;)","text":"<p>O operador de menor que (<code>&lt;</code>) \u00e9 utilizado para comparar se um valor \u00e9 menor do que outro.</p> <p>Exemplo:</p> <pre><code>let valor1 = 10;\nlet valor2 = 5;\nconsole.log(valor1 &lt; valor2); // false\n</code></pre> <p>Neste exemplo, o operador <code>&lt;</code> compara se <code>valor1</code> \u00e9 menor do que <code>valor2</code>, retornando falso.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#maior-ou-igual-que","title":"Maior ou igual que (&gt;=)","text":"<p>O operador de maior ou igual que (<code>&gt;=</code>) \u00e9 utilizado para comparar se um valor \u00e9 maior ou igual a outro.</p> <p>Exemplo:</p> <pre><code>let valor1 = 10;\nlet valor2 = 5;\nconsole.log(valor1 &gt;= valor2); // true\n</code></pre> <p>Neste exemplo, o operador <code>&gt;=</code> compara se <code>valor1</code> \u00e9 maior ou igual a <code>valor2</code>, retornando verdadeiro.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#menor-ou-igual-que","title":"Menor ou igual que (&lt;=)","text":"<p>O operador de menor ou igual que (<code>&lt;=</code>) \u00e9 utilizado para comparar se um valor \u00e9 menor ou igual a outro.</p> <p>Exemplo:</p> <pre><code>let valor1 = 10;\nlet valor2 = 5;\nconsole.log(valor1 &lt;= valor2); // false\n</code></pre> <p>Neste exemplo, o operador <code>&lt;=</code> compara se <code>valor1</code> \u00e9 menor ou igual a <code>valor2</code>, retornando falso.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#operador-ternario","title":"Operador Tern\u00e1rio (?)","text":"<p>O operador tern\u00e1rio (<code>?</code>) \u00e9 utilizado para realizar uma opera\u00e7\u00e3o condicional, retornando um valor de acordo com uma condi\u00e7\u00e3o. Ele \u00e9 uma forma simplificada de escrever uma estrutura condicional if-else.</p> <p>Exemplo:</p> <pre><code>let idade = 18;\nlet podeDirigir = (idade &gt;= 18) ? \"Pode dirigir\" : \"N\u00e3o pode dirigir\";\nconsole.log(podeDirigir); // \"Pode dirigir\"\n</code></pre> <p>Neste exemplo, o operador tern\u00e1rio <code>?</code> verifica se a <code>idade</code> \u00e9 maior ou igual a 18. Se for, retorna a string \"Pode dirigir\". Caso contr\u00e1rio, retorna a string \"N\u00e3o pode dirigir\".</p> <p>Os operadores de compara\u00e7\u00e3o em JavaScript s\u00e3o fundamentais para a cria\u00e7\u00e3o de express\u00f5es condicionais e tomada de decis\u00f5es em um programa. \u00c9 importante utiliz\u00e1-los corretamente e de acordo com as boas pr\u00e1ticas de c\u00f3digo, visando garantir a legibilidade e manuten\u00e7\u00e3o do c\u00f3digo.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#operadores-logicos","title":"Operadores L\u00f3gicos","text":"Operador Descri\u00e7\u00e3o &amp;&amp; Operador \"E\". Retorna verdadeiro se ambos os operandos s\u00e3o verdadeiros. || Operador \"OU\". Retorna verdadeiro se um dos operandos \u00e9 verdadeiro. ! Operador \"N\u00c3O\". Inverte o valor do operando. Retorna verdadeiro se o operando \u00e9 falso e vice-versa. <p>E aqui est\u00e3o exemplos de uso de cada um desses operadores:</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#operador-e","title":"Operador \"E\" (&amp;&amp;)","text":"<p>O operador \"E\" (<code>&amp;&amp;</code>) \u00e9 utilizado para avaliar se duas ou mais express\u00f5es s\u00e3o verdadeiras.</p> <p>Exemplo:</p> <pre><code>let valor1 = 10;\nlet valor2 = 5;\nif (valor1 &gt; 5 &amp;&amp; valor2 &lt; 10) {\nconsole.log(\"valor1 \u00e9 maior que 5 e valor2 \u00e9 menor que 10\");\n}\n</code></pre> <p>Neste exemplo, o operador <code>&amp;&amp;</code> avalia se <code>valor1</code> \u00e9 maior que 5 e se <code>valor2</code> \u00e9 menor que 10. Se as duas condi\u00e7\u00f5es forem verdadeiras, a mensagem \"valor1 \u00e9 maior que 5 e valor2 \u00e9 menor que 10\" \u00e9 exibida no console.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#operador-ou","title":"Operador \"OU\" (||)","text":"<p>O operador \"OU\" (<code>||</code>) \u00e9 utilizado para avaliar se pelo menos uma das express\u00f5es \u00e9 verdadeira.</p> <p>Exemplo:</p> <pre><code>let valor1 = 10;\nlet valor2 = 5;\nif (valor1 &gt; 10 || valor2 &lt; 10) {\nconsole.log(\"Pelo menos uma das condi\u00e7\u00f5es \u00e9 verdadeira\");\n}\n</code></pre> <p>Neste exemplo, o operador <code>||</code> avalia se <code>valor1</code> \u00e9 maior que 10 ou se <code>valor2</code> \u00e9 menor que 10. Se pelo menos uma das condi\u00e7\u00f5es for verdadeira, a mensagem \"Pelo menos uma das condi\u00e7\u00f5es \u00e9 verdadeira\" \u00e9 exibida no console.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#operador-nao","title":"Operador \"N\u00c3O\" (!)","text":"<p>O operador \"N\u00c3O\" (<code>!</code>) \u00e9 utilizado para inverter o valor de uma express\u00e3o.</p> <p>Exemplo:</p> <pre><code>let valor1 = 10;\nlet valor2 = 5;\nif (!(valor1 &lt; valor2)) {\nconsole.log(\"valor1 n\u00e3o \u00e9 menor que valor2\");\n}\n</code></pre> <p>Neste exemplo, o operador <code>!</code> inverte o resultado da express\u00e3o <code>valor1 &lt; valor2</code>, que seria falsa neste caso. Dessa forma, a mensagem \"x n\u00e3o \u00e9 menor que y\" \u00e9 exibida no console.</p> <p>Os operadores l\u00f3gicos em JavaScript s\u00e3o fundamentais para a cria\u00e7\u00e3o de express\u00f5es condicionais mais complexas, que envolvem a avalia\u00e7\u00e3o de m\u00faltiplas condi\u00e7\u00f5es. \u00c9 importante utiliz\u00e1-los corretamente e de acordo com as boas pr\u00e1ticas de c\u00f3digo, visando garantir a legibilidade e manuten\u00e7\u00e3o do c\u00f3digo.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#operadores-de-incremento-e-decremento","title":"Operadores de Incremento e Decremento","text":"<p>Os operadores de incremento e decremento em JavaScript permitem que voc\u00ea adicione ou subtraia um valor de uma vari\u00e1vel em uma unidade, s\u00e3o eles:</p> Operador Descri\u00e7\u00e3o ++ Operador de incremento, adiciona 1 ao valor da vari\u00e1vel -- Operador de decremento, subtrai 1 do valor da vari\u00e1vel"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#operador-de-incremento","title":"Operador de Incremento (++)","text":"<p>O operador de incremento (<code>++</code>) \u00e9 usado para adicionar 1 ao valor de uma vari\u00e1vel.</p> <p>Exemplo:</p> <pre><code>let valor1 = 5;\nvalor1++;\nconsole.log(valor1); // Sa\u00edda: 6\n</code></pre> <p>Neste exemplo, o valor de <code>valor1</code> \u00e9 incrementado em 1 atrav\u00e9s do operador <code>++</code>.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#operador-de-decremento-","title":"Operador de Decremento (--)","text":"<p>O operador de decremento (<code>--</code>) \u00e9 usado para subtrair 1 do valor de uma vari\u00e1vel.</p> <p>Exemplo:</p> <pre><code>let valor1 = 5;\nvalor1--;\nconsole.log(valor1); // Sa\u00edda: 4\n</code></pre> <p>Neste exemplo, o valor de <code>valor1</code> \u00e9 decrementado em 1 atrav\u00e9s do operador <code>--</code>.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#utilizando-operadores-em-expressoes","title":"Utilizando Operadores em Express\u00f5es","text":"<p>Os operadores de incremento e decremento tamb\u00e9m podem ser usados em express\u00f5es.</p> <p>Exemplo:</p> <pre><code>let valor1 = 5;\nlet valor2 = valor1++ + 2;\nconsole.log(valor2); // Sa\u00edda: 7\nconsole.log(valor1); // Sa\u00edda: 6\n</code></pre> <p>Neste exemplo, o operador de incremento <code>++</code> \u00e9 usado ap\u00f3s a vari\u00e1vel <code>valor1</code> na express\u00e3o <code>valor1++ + 2</code>. O valor de <code>valor1</code> \u00e9 incrementado em 1, mas a adi\u00e7\u00e3o \u00e9 realizada antes do incremento, resultando em <code>valor2</code> com valor 7 e <code>valor1</code> com valor 6.</p> <p>Os operadores de incremento e decremento s\u00e3o muito \u00fateis em JavaScript e podem ser usados para facilitar a escrita de c\u00f3digo e melhorar sua legibilidade. \u00c9 importante, no entanto, us\u00e1-los com modera\u00e7\u00e3o e ter cuidado com seu uso em express\u00f5es mais complexas, para evitar erros ou comportamentos inesperados. Al\u00e9m disso, \u00e9 importante seguir as conven\u00e7\u00f5es de boas pr\u00e1ticas de c\u00f3digo em rela\u00e7\u00e3o \u00e0 nomenclatura das vari\u00e1veis e \u00e0 clareza do c\u00f3digo. Os operadores em JavaScript s\u00e3o fundamentais para escrever um c\u00f3digo limpo e eficiente. Eles permitem que voc\u00ea realize opera\u00e7\u00f5es matem\u00e1ticas, l\u00f3gicas e de atribui\u00e7\u00e3o em vari\u00e1veis. Lembre-se, o uso de nomes descritivos para as vari\u00e1veis ajuda a tornar o c\u00f3digo mais leg\u00edvel e f\u00e1cil de entender.</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#exercicios-de-fixacao","title":"Exercicios de fixa\u00e7\u00e3o","text":"<ol> <li> <p>Crie um programa que verifique se um n\u00famero \u00e9 par ou \u00edmpar e imprima na tela.</p> </li> <li> <p>Crie um programa que verifique se um n\u00famero \u00e9 positivo, negativo ou zero e imprima na tela.</p> </li> <li> <p>Crie um programa que calcule a \u00e1rea de um tri\u00e2ngulo com base e altura informadas pelo usu\u00e1rio e imprima na tela.</p> </li> <li> <p>Crie um programa que calcule o per\u00edmetro de um quadrado com lado informado pelo usu\u00e1rio e imprima na tela.</p> </li> <li> <p>Crie um programa que concatene duas strings informadas pelo usu\u00e1rio e imprima na tela.</p> </li> </ol> <p>Espero que esses exerc\u00edcios sejam \u00fateis para voc\u00ea praticar suas habilidades em JavaScript com declara\u00e7\u00e3o de variaveis, operadores l\u00f3gicos, compara\u00e7\u00e3o, atribui\u00e7\u00e3o e aritm\u00e9ticos!</p>"},{"location":"javascript/_01_Conceitos-B%C3%A1sicos/#respostas-exercicios-de-fixacao","title":"Respostas exercicios de fixa\u00e7\u00e3o","text":"<ol> <li> <p>Crie um programa que verifique se um n\u00famero \u00e9 par ou \u00edmpar e imprima na tela.</p> <pre><code>let numero = 7;\nlet resto = numero % 2;\nlet resultado = resto === 0 &amp;&amp; 'par' || '\u00edmpar';\nconsole.log(resultado);\n</code></pre> </li> <li> <p>Crie um programa que verifique se um n\u00famero \u00e9 positivo, negativo ou zero e imprima na tela.</p> <pre><code>let numero = 5;\nlet resultado = numero &gt; 0 &amp;&amp; 'positivo' || numero &lt; 0 &amp;&amp; 'negativo' || 'zero';\nconsole.log(resultado);\n</code></pre> </li> <li> <p>Crie um programa que calcule a \u00e1rea de um tri\u00e2ngulo com base e altura informadas pelo usu\u00e1rio e imprima na tela.</p> <pre><code>let base = 5;\nlet altura = 10;\nlet area = (base * altura) / 2;\nconsole.log(area);\n</code></pre> </li> <li> <p>Crie um programa que calcule o per\u00edmetro de um quadrado com lado informado pelo usu\u00e1rio e imprima na tela.</p> <pre><code>let lado = 5;\nlet perimetro = lado * 4;\nconsole.log(perimetro);\n</code></pre> </li> <li> <p>Crie um programa que concatene duas strings informadas pelo usu\u00e1rio e imprima na tela.</p> <pre><code>let string1 = 'Ol\u00e1, ';\nlet string2 = 'mundo!';\nlet resultado = string1 + string2;\nconsole.log(resultado);\n</code></pre> </li> </ol> <p>Espero que esses exerc\u00edcios sejam \u00fateis para voc\u00ea praticar suas habilidades em JavaScript com declara\u00e7\u00e3o de variaveis, operadores l\u00f3gicos, compara\u00e7\u00e3o, atribui\u00e7\u00e3o e aritm\u00e9ticos!</p>"},{"location":"javascript/_02_Estruturas-de-Decis%C3%A3o-e-Repeti%C3%A7%C3%A3o/","title":"02 Estruturas de Decis\u00e3o e Repeti\u00e7\u00e3o","text":""},{"location":"javascript/_02_Estruturas-de-Decis%C3%A3o-e-Repeti%C3%A7%C3%A3o/#estruturas-de-decisao-e-repeticao","title":"Estruturas de Decis\u00e3o e Repeti\u00e7\u00e3o","text":""},{"location":"javascript/_02_Estruturas-de-Decis%C3%A3o-e-Repeti%C3%A7%C3%A3o/#estrutura-de-decisao","title":"Estrutura de Decis\u00e3o","text":"<p>As estruturas de decis\u00e3o em JavaScript s\u00e3o respons\u00e1veis por permitir que o programa fa\u00e7a escolhas l\u00f3gicas e tome diferentes caminhos de acordo com as condi\u00e7\u00f5es estabelecidas. As estruturas de decis\u00e3o mais comuns s\u00e3o: if, if-else, switch-case e operador tern\u00e1rio.</p> <p>Tabela:</p> Estrutura Descri\u00e7\u00e3o if Verifica se uma condi\u00e7\u00e3o \u00e9 verdadeira e executa um bloco de c\u00f3digo caso a condi\u00e7\u00e3o seja atendida if-else Verifica se uma condi\u00e7\u00e3o \u00e9 verdadeira e executa um bloco de c\u00f3digo caso a condi\u00e7\u00e3o seja atendida, caso contr\u00e1rio, executa um outro bloco de c\u00f3digo switch-case Verifica uma express\u00e3o e executa um bloco de c\u00f3digo dependendo do valor dessa express\u00e3o operador tern\u00e1rio \u00c9 uma forma abreviada de escrever uma estrutura if-else em apenas uma linha"},{"location":"javascript/_02_Estruturas-de-Decis%C3%A3o-e-Repeti%C3%A7%C3%A3o/#if","title":"if","text":"<p>O <code>if</code> \u00e9 uma das estruturas de decis\u00e3o mais b\u00e1sicas em JavaScript. Ele permite que o c\u00f3digo execute uma determinada a\u00e7\u00e3o somente se uma condi\u00e7\u00e3o for verdadeira. A sintaxe do <code>if</code> \u00e9 a seguinte:</p> <pre><code>if (condi\u00e7\u00e3o) {\n// c\u00f3digo a ser executado se a condi\u00e7\u00e3o for verdadeira\n}\n</code></pre> <p>Por exemplo, vamos supor que queremos exibir uma mensagem somente se uma pessoa tiver idade suficiente para votar nas elei\u00e7\u00f5es. O c\u00f3digo ficaria assim:</p> <pre><code>let idade = 20;\n\nif (idade &gt;= 18) {\nconsole.log(\"Voc\u00ea pode votar nas elei\u00e7\u00f5es.\");\n}\n</code></pre> <p>Nesse caso, como a idade \u00e9 maior ou igual a 18, a mensagem \"Voc\u00ea pode votar nas elei\u00e7\u00f5es.\" ser\u00e1 exibida no console.</p> <p>Tamb\u00e9m \u00e9 poss\u00edvel usar uma cl\u00e1usula <code>else</code> para executar um c\u00f3digo caso a condi\u00e7\u00e3o seja falsa. A sintaxe do <code>if-else</code> \u00e9 a seguinte:</p> <pre><code>if (condi\u00e7\u00e3o) {\n// c\u00f3digo a ser executado se a condi\u00e7\u00e3o for verdadeira\n} else {\n// c\u00f3digo a ser executado se a condi\u00e7\u00e3o for falsa\n}\n</code></pre> <p>Por exemplo, vamos supor que queremos exibir uma mensagem informando se uma pessoa pode votar ou n\u00e3o nas elei\u00e7\u00f5es. O c\u00f3digo ficaria assim:</p> <pre><code>let idade = 14;\n\nif (idade &gt;= 16) {\nconsole.log(\"Voc\u00ea pode votar nas elei\u00e7\u00f5es.\");\n} else {\nconsole.log(\"Voc\u00ea n\u00e3o pode votar nas elei\u00e7\u00f5es.\");\n}\n</code></pre> <p>Nesse caso, como a idade \u00e9 menor que 16, a mensagem \"Voc\u00ea n\u00e3o pode votar nas elei\u00e7\u00f5es.\" ser\u00e1 exibida no console.</p> <p>Tamb\u00e9m \u00e9 poss\u00edvel usar v\u00e1rias cl\u00e1usulas <code>else if</code> para testar v\u00e1rias condi\u00e7\u00f5es diferentes. A sintaxe do <code>if-else if</code> \u00e9 a seguinte:</p> <pre><code>if (condi\u00e7\u00e3o1) {\n// c\u00f3digo a ser executado se a condi\u00e7\u00e3o1 for verdadeira\n} else if (condi\u00e7\u00e3o2) {\n// c\u00f3digo a ser executado se a condi\u00e7\u00e3o2 for verdadeira e a condi\u00e7\u00e3o1 for falsa\n} else if (condi\u00e7\u00e3o3) {\n// c\u00f3digo a ser executado se a condi\u00e7\u00e3o3 for verdadeira e as condi\u00e7\u00f5es 1 e 2 forem falsas\n} else {\n// c\u00f3digo a ser executado se nenhuma das condi\u00e7\u00f5es anteriores for verdadeira\n}\n</code></pre> <p>Por exemplo, vamos supor que queremos exibir uma mensagem informando em que faixa et\u00e1ria uma pessoa se encontra. O c\u00f3digo ficaria assim:</p> <pre><code>let idade = 25;\n\nif (idade &lt; 18) {\nconsole.log(\"Voc\u00ea \u00e9 menor de idade.\");\n} else if (idade &gt;= 18 &amp;&amp; idade &lt; 60) {\nconsole.log(\"Voc\u00ea \u00e9 adulto.\");\n} else {\nconsole.log(\"Voc\u00ea \u00e9 idoso.\");\n}\n</code></pre> <p>Nesse caso, como a idade \u00e9 maior ou igual a 18 e menor que 60, a mensagem \"Voc\u00ea \u00e9 adulto.\" ser\u00e1 exibida no console. Dessa forma, a utiliza\u00e7\u00e3o do else if permite uma maior flexibilidade e precis\u00e3o na tomada de decis\u00f5es, especialmente quando h\u00e1 m\u00faltiplas condi\u00e7\u00f5es a serem avaliadas.</p> <p>o trecho de codigo abaixo teria o mesmo resultado mas devemos evit\u00e1-lo:</p> <pre><code>let idade = 25;\n\nif (idade &lt; 18) {\nconsole.log(\"Voc\u00ea \u00e9 menor de idade.\");\n}\nif (idade &gt;= 18 &amp;&amp; idade &lt; 60) {\nconsole.log(\"Voc\u00ea \u00e9 adulto.\");\n}\nif (idade &gt;= 60) {\nconsole.log(\"Voc\u00ea \u00e9 adulto.\");\n}\n</code></pre>"},{"location":"javascript/_02_Estruturas-de-Decis%C3%A3o-e-Repeti%C3%A7%C3%A3o/#switch-case","title":"switch-case","text":"<p>O <code>switch-case</code> \u00e9 uma estrutura condicional que permite executar um determinado bloco de c\u00f3digo dependendo do valor de uma express\u00e3o. A sintaxe do <code>switch-case</code> \u00e9 a seguinte:</p> <pre><code>switch (express\u00e3o) {\ncase valor1:\n// c\u00f3digo a ser executado se a express\u00e3o for igual a valor1\nbreak;\ncase valor2:\n// c\u00f3digo a ser executado se a express\u00e3o for igual a valor2\nbreak;\ndefault:\n// c\u00f3digo a ser executado se a express\u00e3o n\u00e3o for igual a nenhum dos valores\n}\n</code></pre> <p>Por exemplo, vamos supor que queremos exibir o nome de um dia da semana com base no n\u00famero correspondente. O c\u00f3digo ficaria assim:</p> <pre><code>let dia = 3;\n\nswitch (dia) {\ncase 1:\nconsole.log(\"Domingo\");\nbreak;\ncase 2:\nconsole.log(\"Segunda-feira\");\nbreak;\ncase 3:\nconsole.log(\"Ter\u00e7a-feira\");\nbreak;\ncase 4:\nconsole.log(\"Quarta-feira\");\nbreak;\ncase 5:\nconsole.log(\"Quinta-feira\");\nbreak;\ncase 6:\nconsole.log(\"Sexta-feira\");\nbreak;\ncase 7:\nconsole.log(\"S\u00e1bado\");\nbreak;\ndefault:\nconsole.log(\"Dia inv\u00e1lido\");\n}\n</code></pre> <p>Nesse caso, como o valor de <code>dia</code> \u00e9 3, a mensagem \"Ter\u00e7a-feira\" ser\u00e1 exibida no console.</p>"},{"location":"javascript/_02_Estruturas-de-Decis%C3%A3o-e-Repeti%C3%A7%C3%A3o/#ternario","title":"tern\u00e1rio","text":"<p>O operador tern\u00e1rio \u00e9 uma forma concisa de escrever uma estrutura <code>if-else</code>. A sintaxe do operador tern\u00e1rio \u00e9 a seguinte:</p> <pre><code>condi\u00e7\u00e3o ? valorSeVerdadeiro : valorSeFalso\n</code></pre> <p>Por exemplo, vamos supor que queremos exibir uma mensagem informando se uma pessoa pode votar nas elei\u00e7\u00f5es. O c\u00f3digo usando o operador tern\u00e1rio ficaria assim:</p> <pre><code>let idade = 20;\nlet mensagem = idade &gt;= 16 ? \"Voc\u00ea pode votar nas elei\u00e7\u00f5es.\" : \"Voc\u00ea n\u00e3o pode votar nas elei\u00e7\u00f5es.\";\nconsole.log(mensagem);\n</code></pre> <p>Nesse caso, como a idade \u00e9 maior ou igual a 16, a mensagem \"Voc\u00ea pode votar nas elei\u00e7\u00f5es.\" ser\u00e1 exibida no console.</p>"},{"location":"javascript/_02_Estruturas-de-Decis%C3%A3o-e-Repeti%C3%A7%C3%A3o/#trycatchfinally","title":"try/catch/finally","text":"<p>O bloco try envolve um conjunto de instru\u00e7\u00f5es que podem gerar exce\u00e7\u00f5es (ou erros). Se ocorrer uma exce\u00e7\u00e3o dentro do bloco try, o controle \u00e9 transferido para o bloco catch. O bloco catch \u00e9 respons\u00e1vel por tratar a exce\u00e7\u00e3o, e pode conter um conjunto de instru\u00e7\u00f5es que lidam com o erro.</p> <p>Veja um exemplo:</p> <pre><code>try {\n// c\u00f3digo que pode gerar exce\u00e7\u00f5es\n} catch (e) {\n// tratamento da exce\u00e7\u00e3o\n}\n</code></pre> <p>Neste exemplo, o c\u00f3digo que pode gerar exce\u00e7\u00f5es \u00e9 colocado dentro do bloco try. Se ocorrer uma exce\u00e7\u00e3o, o controle \u00e9 transferido para o bloco catch, onde a exce\u00e7\u00e3o \u00e9 tratada. O par\u00e2metro e representa a exce\u00e7\u00e3o que foi lan\u00e7ada.</p> <p>Vamos ver um exemplo simples de como usar o try-catch em JavaScript:</p> <pre><code>try {\n// C\u00f3digo que pode lan\u00e7ar uma exce\u00e7\u00e3o\nconsole.log('Executando o c\u00f3digo do bloco try...');\nthrow new Error('Ocorreu um erro!');\n} catch (excecao) {\n// Tratamento de exce\u00e7\u00e3o\nconsole.log('Executando o c\u00f3digo do bloco catch...');\nconsole.log(excecao.message);\n}\n</code></pre> <p>Al\u00e9m disso, \u00e9 poss\u00edvel utilizar a cl\u00e1usula finally para definir um bloco de c\u00f3digo que ser\u00e1 executado independentemente de ocorrer ou n\u00e3o uma exce\u00e7\u00e3o. Este bloco \u00e9 opcional e pode ser utilizado para limpar recursos, por exemplo.</p> <p>Veja um exemplo completo:</p> <p>try {   // c\u00f3digo que pode gerar exce\u00e7\u00f5es } catch (e) {   // tratamento da exce\u00e7\u00e3o } finally {   // c\u00f3digo que ser\u00e1 executado independentemente de ocorrer ou n\u00e3o uma exce\u00e7\u00e3o }</p> <p>Em resumo, a utiliza\u00e7\u00e3o dos blocos try, catch e finally \u00e9 importante para garantir que exce\u00e7\u00f5es sejam tratados de forma adequada durante a execu\u00e7\u00e3o de um programa em JavaScript.</p>"},{"location":"javascript/_02_Estruturas-de-Decis%C3%A3o-e-Repeti%C3%A7%C3%A3o/#estruturas-de-repeticao","title":"Estruturas de Repeti\u00e7\u00e3o","text":"<p>Estruturas de repeti\u00e7\u00e3o s\u00e3o uma das principais ferramentas dispon\u00edveis em linguagens de programa\u00e7\u00e3o, permitindo que o programador execute uma sequ\u00eancia de instru\u00e7\u00f5es repetidamente. Em JavaScript, existem duas estruturas de repeti\u00e7\u00e3o dispon\u00edveis: <code>while</code> e <code>for</code>.</p>"},{"location":"javascript/_02_Estruturas-de-Decis%C3%A3o-e-Repeti%C3%A7%C3%A3o/#while","title":"WHILE","text":"<p>A instru\u00e7\u00e3o <code>while</code> \u00e9 usada para executar um bloco de c\u00f3digo enquanto uma determinada condi\u00e7\u00e3o for verdadeira. A sintaxe \u00e9 a seguinte:</p> <pre><code>while (condi\u00e7\u00e3o) {\n// c\u00f3digo a ser executado enquanto a condi\u00e7\u00e3o for verdadeira\n}\n</code></pre> <p>A condi\u00e7\u00e3o pode ser qualquer express\u00e3o que possa ser avaliada como verdadeira ou falsa. Enquanto a condi\u00e7\u00e3o for verdadeira, o bloco de c\u00f3digo dentro das chaves ser\u00e1 executado repetidamente. Quando a condi\u00e7\u00e3o se tornar falsa, a execu\u00e7\u00e3o ser\u00e1 interrompida e o controle ser\u00e1 passado para a pr\u00f3xima instru\u00e7\u00e3o ap\u00f3s o bloco <code>while</code>.</p> <p>Veja um exemplo simples de como utilizar o <code>while</code>:</p> <pre><code>let contador = 0;\n\nwhile (contador &lt; 5) {\nconsole.log(\"O contador \u00e9: \" + contador);\ncontador++;\n}\n</code></pre> <p>Nesse exemplo, o <code>while</code> \u00e9 usado para imprimir o valor de \"contador\" enquanto ele for menor que 5. A cada itera\u00e7\u00e3o, o valor de \"contador\" \u00e9 incrementado em 1. O resultado desse c\u00f3digo seria:</p> <pre><code>O contador \u00e9: 0\nO contador \u00e9: 1\nO contador \u00e9: 2\nO contador \u00e9: 3\nO contador \u00e9: 4\n</code></pre>"},{"location":"javascript/_02_Estruturas-de-Decis%C3%A3o-e-Repeti%C3%A7%C3%A3o/#for","title":"FOR","text":"<p>A instru\u00e7\u00e3o <code>for</code> \u00e9 usada para executar um bloco de c\u00f3digo um n\u00famero fixo de vezes. Ela \u00e9 composta por tr\u00eas partes:</p> <ul> <li>A inicializa\u00e7\u00e3o: onde \u00e9 definida a vari\u00e1vel de controle e atribu\u00eddo o seu valor inicial;</li> <li>A condi\u00e7\u00e3o: que define a condi\u00e7\u00e3o de parada da repeti\u00e7\u00e3o;</li> <li>O incremento/decremento: que define como a vari\u00e1vel de controle ser\u00e1 modificada a cada itera\u00e7\u00e3o.</li> </ul> <p>A sintaxe da estrutura <code>for</code> \u00e9 a seguinte:</p> <pre><code>for (inicializa\u00e7\u00e3o; condi\u00e7\u00e3o; incremento/decremento) {\n// c\u00f3digo a ser executado enquanto a condi\u00e7\u00e3o for verdadeira\n}\n</code></pre> <p>A seguir, vou explicar cada parte da estrutura <code>for</code> em mais detalhes.</p>"},{"location":"javascript/_02_Estruturas-de-Decis%C3%A3o-e-Repeti%C3%A7%C3%A3o/#incializacao","title":"Incializa\u00e7\u00e3o","text":"<p>A inicializa\u00e7\u00e3o \u00e9 a primeira parte da estrutura <code>for</code>. Ela \u00e9 usada para definir a vari\u00e1vel de controle e atribuir o seu valor inicial. A vari\u00e1vel de controle \u00e9 usada para contar o n\u00famero de itera\u00e7\u00f5es do la\u00e7o e \u00e9 geralmente denominada de <code>i</code> (embora possa ter outro nome).</p> <p>A inicializa\u00e7\u00e3o pode conter uma ou mais instru\u00e7\u00f5es separadas por v\u00edrgulas. Por exemplo:</p> <p>Veja um exemplo  de como utilizar o <code>for</code> contendo somente uma variavel de inicializa\u00e7\u00e3o :</p> <pre><code>for (let i = 0; i &lt; 5; i++) {\nconsole.log(\"O valor de i \u00e9: \" + i);\n}\n</code></pre> <p>Nesse exemplo, o <code>for</code> \u00e9 usado para imprimir o valor de \"i\" enquanto ele for menor que 5. A cada itera\u00e7\u00e3o, o valor de \"i\" \u00e9 incrementado em 1. O resultado desse c\u00f3digo seria:</p> <pre><code>for (let i = 0, j = 10; i &lt; 10; i++, j--) {\n// c\u00f3digo a ser executado enquanto a condi\u00e7\u00e3o for verdadeira\n}\n</code></pre> <p>Nesta inicializa\u00e7\u00e3o, definimos duas vari\u00e1veis de controle: <code>i</code> e <code>j</code>. A vari\u00e1vel <code>i</code> \u00e9 iniciada em <code>0</code> e a vari\u00e1vel <code>j</code> em <code>10</code>. Na maioria dos casos, usamos apenas uma vari\u00e1vel de controle.</p>"},{"location":"javascript/_02_Estruturas-de-Decis%C3%A3o-e-Repeti%C3%A7%C3%A3o/#condicao","title":"Condi\u00e7\u00e3o","text":"<p>A condi\u00e7\u00e3o \u00e9 a segunda parte da estrutura <code>for</code>. Ela define a condi\u00e7\u00e3o de parada da repeti\u00e7\u00e3o. A condi\u00e7\u00e3o \u00e9 avaliada no in\u00edcio de cada itera\u00e7\u00e3o e, se for verdadeira, o bloco de c\u00f3digo dentro das chaves ser\u00e1 executado. Se a condi\u00e7\u00e3o for falsa, o bloco de c\u00f3digo n\u00e3o ser\u00e1 executado e o controle ser\u00e1 passado para a pr\u00f3xima instru\u00e7\u00e3o ap\u00f3s o bloco <code>for</code>.</p> <p>A condi\u00e7\u00e3o pode ser qualquer express\u00e3o que possa ser avaliada como verdadeira ou falsa. Por exemplo:</p> <pre><code>for (let i = 0; i &lt; 10; i++) {\n// c\u00f3digo a ser executado enquanto i for menor que 10\n}\n</code></pre> <p>Nesse exemplo, a condi\u00e7\u00e3o \u00e9 <code>i &lt; 10</code>, o que significa que o bloco de c\u00f3digo ser\u00e1 executado enquanto o valor da vari\u00e1vel <code>i</code> for menor que <code>10</code>.</p>"},{"location":"javascript/_02_Estruturas-de-Decis%C3%A3o-e-Repeti%C3%A7%C3%A3o/#incrementodecremento","title":"Incremento/Decremento","text":"<p>O incremento/decremento \u00e9 a terceira parte da estrutura <code>for</code>. Ela define como a vari\u00e1vel de controle ser\u00e1 modificada a cada itera\u00e7\u00e3o. O incremento/decremento \u00e9 executado no final de cada itera\u00e7\u00e3o, depois que o bloco de c\u00f3digo dentro das chaves \u00e9 executado.</p> <p>O incremento/decremento pode ser uma instru\u00e7\u00e3o \u00fanica ou uma s\u00e9rie de instru\u00e7\u00f5es separadas por v\u00edrgulas. Por exemplo:</p> <pre><code>for (let i = 0; i &lt; 10; i += 2) {\n// c\u00f3digo a ser executado enquanto i for menor que 10\n}\n</code></pre> <p>Nesse exemplo, a vari\u00e1vel <code>i</code> \u00e9 incrementada em <code>2</code> a cada itera\u00e7\u00e3o, em vez do valor padr\u00e3o de <code>1</code>.</p>"},{"location":"javascript/_02_Estruturas-de-Decis%C3%A3o-e-Repeti%C3%A7%C3%A3o/#for-of","title":"For of","text":"<p>O <code>for...of</code> \u00e9 uma estrutura de repeti\u00e7\u00e3o introduzida no ECMAScript 6 (tamb\u00e9m conhecido como ES6 ou ECMAScript 2015) que permite iterar sobre elementos iter\u00e1veis, como arrays, strings, objetos do tipo Map e Set, entre outros.</p> <p>A sintaxe do <code>for...of</code> \u00e9 a seguinte:</p> <pre><code>for (vari\u00e1vel of iter\u00e1vel) {\n// c\u00f3digo a ser executado para cada elemento do iter\u00e1vel\n}\n</code></pre> <p>Onde <code>vari\u00e1vel</code> \u00e9 a vari\u00e1vel que receber\u00e1 o valor de cada elemento do iter\u00e1vel em cada itera\u00e7\u00e3o, e <code>iter\u00e1vel</code> \u00e9 o objeto iter\u00e1vel a ser percorrido.</p> <p>Por exemplo, podemos usar o <code>for...of</code> para iterar sobre um array:</p> <pre><code>const array = [1, 2, 3];\n\nfor (const elemento of array) {\nconsole.log(elemento);\n}\n</code></pre> <p>Nesse caso, a cada itera\u00e7\u00e3o, a vari\u00e1vel <code>elemento</code> receber\u00e1 o valor de cada elemento do array, na ordem em que aparecem. O resultado impresso no console seria:</p> <pre><code>1\n2\n3\n</code></pre> <p>Podemos tamb\u00e9m usar o <code>for...of</code> para iterar sobre uma string:</p> <pre><code>const string = \"JavaScript\";\n\nfor (const caractere of string) {\nconsole.log(caractere);\n}\n</code></pre> <p>Nesse caso, a cada itera\u00e7\u00e3o, a vari\u00e1vel <code>caractere</code> receber\u00e1 um dos caracteres da string, na ordem em que aparecem. O resultado impresso no console seria:</p> <pre><code>J\na\nv\na\nS\nc\nr\ni\np\nt\n</code></pre> <p>\u00c9 importante notar que o <code>for...of</code> n\u00e3o permite acessar o \u00edndice de cada elemento do iter\u00e1vel. Se for necess\u00e1rio acessar o \u00edndice, \u00e9 recomendado utilizar o <code>for</code> convencional ou o m\u00e9todo <code>forEach</code> dos arrays.</p> <p>Em resumo, o <code>for...of</code> \u00e9 uma estrutura de repeti\u00e7\u00e3o que permite iterar sobre elementos iter\u00e1veis de forma simples e concisa, tornando o c\u00f3digo mais leg\u00edvel e f\u00e1cil de entender.</p>"},{"location":"javascript/_02_Estruturas-de-Decis%C3%A3o-e-Repeti%C3%A7%C3%A3o/#for-in","title":"FOR IN","text":"<p>O <code>for...in</code> \u00e9 uma estrutura de repeti\u00e7\u00e3o em JavaScript que permite iterar sobre as propriedades enumer\u00e1veis de um objeto. A sintaxe do <code>for...in</code> \u00e9 a seguinte:</p> <pre><code>for (propriedade in objeto) {\n// c\u00f3digo a ser executado para cada propriedade do objeto\n}\n</code></pre> <p>Onde <code>propriedade</code> \u00e9 o nome de cada propriedade enumer\u00e1vel do objeto em cada itera\u00e7\u00e3o, e <code>objeto</code> \u00e9 o objeto a ser percorrido.</p> <p>Por exemplo, podemos usar o <code>for...in</code> para iterar sobre as propriedades de um objeto:</p> <pre><code>const objeto = {\nnome: \"Jo\u00e3o\",\nidade: 30,\nprofissao: \"Desenvolvedor\",\n};\n\nfor (const propriedade in objeto) {\nconsole.log(`${propriedade}: ${objeto[propriedade]}`);\n}\n</code></pre> <p>Nesse caso, a cada itera\u00e7\u00e3o, a vari\u00e1vel <code>propriedade</code> receber\u00e1 o nome de cada propriedade enumer\u00e1vel do objeto, e o valor de cada propriedade ser\u00e1 acessado usando a sintaxe de colchetes <code>objeto[propriedade]</code>. O resultado impresso no console seria:</p> <pre><code>nome: Jo\u00e3o\nidade: 30\nprofissao: Desenvolvedor\n</code></pre> <p>\u00c9 importante notar que o <code>for...in</code> itera apenas sobre as propriedades enumer\u00e1veis do objeto, ou seja, aquelas que t\u00eam a flag <code>enumerable</code> definida como <code>true</code>. Algumas propriedades padr\u00e3o dos objetos, como <code>length</code> de arrays e <code>prototype</code> de fun\u00e7\u00f5es, por exemplo, t\u00eam a flag <code>enumerable</code> definida como <code>false</code> e, portanto, n\u00e3o s\u00e3o iteradas pelo <code>for...in</code>.</p> <p>Al\u00e9m disso, \u00e9 recomendado usar o <code>for...in</code> apenas em objetos simples, como objetos literais, e n\u00e3o em objetos complexos que podem herdar propriedades indesejadas de seus prot\u00f3tipos. Para iterar sobre elementos de arrays e outros tipos de cole\u00e7\u00f5es, \u00e9 recomendado utilizar o <code>for...of</code> ou o <code>forEach</code> dos arrays.</p> <p>Em resumo, o <code>for...in</code> \u00e9 uma estrutura de repeti\u00e7\u00e3o que permite iterar sobre as propriedades enumer\u00e1veis de um objeto, acessando seus nomes e valores de forma simples e direta.</p>"},{"location":"javascript/_02_Estruturas-de-Decis%C3%A3o-e-Repeti%C3%A7%C3%A3o/#exercicios-de-fixacao","title":"Exercicios de fixa\u00e7\u00e3o","text":""},{"location":"javascript/_02_Estruturas-de-Decis%C3%A3o-e-Repeti%C3%A7%C3%A3o/#exercicio-de-estruturas-de-decisao","title":"Exercicio de Estruturas de decis\u00e3o","text":"<ol> <li> <p>Crie um programa utilizando operador <code>if</code> e <code>else</code> que: leia um n\u00famero inteiro e verifique se ele \u00e9 par ou \u00edmpar.</p> </li> <li> <p>Crie um programa utilizando operador <code>if</code> e <code>else</code> que: verifique se uma pessoa \u00e9 maior ou menor de idade (considere que a idade m\u00ednima \u00e9 18 anos).</p> </li> <li> <p>Crie um programa utilizando operador <code>if</code> e <code>else</code> que: leia duas notas de um aluno, calcule a media e verifique se ele foi aprovado ou reprovado (nota m\u00ednima de aprova\u00e7\u00e3o \u00e9 6).</p> </li> <li> <p>Crie um programa utilizando operador <code>switch-case</code> que: leia um n\u00famero inteiro de 1 a 7 e imprima o dia da semana correspondente.</p> </li> <li> <p>Crie um programa utilizando operador <code>switch-case</code> que: leia uma letra e verifique se ela \u00e9 vogal ou consoante.</p> </li> <li> <p>Crie um programa utilizando operador <code>switch-case</code> que: leia um n\u00famero inteiro de 1 a 12 e imprima o nome do m\u00eas correspondente.</p> </li> <li> <p>Crie um programa utilizando operador <code>ternario</code> que: leia um n\u00famero e informe se ele \u00e9 positivo ou negativo.</p> </li> <li> <p>Crie um programa utilizando operador <code>ternario</code> que: leia a idade de uma pessoa e informe se ela \u00e9 maior ou menor de idade.</p> </li> <li> <p>Crie um programa utilizando operador <code>ternario</code> que: leia dois n\u00fameros e informe qual deles \u00e9 o maior.</p> </li> <li> <p>Crie um programa utilizando operador <code>try-catch-finally</code> que: tente converter uma string em um n\u00famero, e caso ocorra um erro, informe uma mensagem amig\u00e1vel ao usu\u00e1rio.</p> </li> <li> <p>Crie um programa utilizando operador <code>try-catch-finally</code> que: tente acessar uma propriedade de um objeto que n\u00e3o existe, e caso ocorra um erro, informe uma mensagem amig\u00e1vel ao usu\u00e1rio.</p> </li> <li> <p>Crie um programa utilizando operador <code>try-catch-finally</code> que: tente dividir um n\u00famero por zero, e caso ocorra um erro, informe uma mensagem amig\u00e1vel ao usu\u00e1rio.</p> </li> </ol>"},{"location":"javascript/_02_Estruturas-de-Decis%C3%A3o-e-Repeti%C3%A7%C3%A3o/#exercicio-de-estruturas-de-repeticao","title":"Exercicio de Estruturas de repeti\u00e7\u00e3o","text":"<ol> <li> <p>Crie um programa utilizando a estrutura <code>for</code> que: exiba no console os n\u00fameros de 1 a 10.</p> </li> <li> <p>Crie um programa  utilizando a estrutura <code>for</code> que: exiba no console os n\u00fameros pares de 1 a 20.</p> </li> <li> <p>Crie um programa utilizando a estrutura <code>for</code> que: exiba no console os n\u00fameros de 50 a 1 em ordem decrescente, pulando de 5 em 5.</p> </li> <li> <p>Crie um programa utilizando a estrutura <code>while</code> que: exiba no console a soma dos n\u00fameros de 1 a 10.</p> </li> <li> <p>Crie um programa utilizando a estrutura <code>while</code> que: exiba no console os n\u00fameros \u00edmpares de 1 a 20.</p> </li> </ol>"},{"location":"javascript/_02_Estruturas-de-Decis%C3%A3o-e-Repeti%C3%A7%C3%A3o/#respostas-exercicios-de-fixacao","title":"Respostas Exercicios de fixa\u00e7\u00e3o","text":""},{"location":"javascript/_02_Estruturas-de-Decis%C3%A3o-e-Repeti%C3%A7%C3%A3o/#estruturas-de-decisao","title":"Estruturas de decis\u00e3o","text":"<ol> <li> <p>Crie um programa utilizando operador <code>if</code> e <code>else</code> que: leia um n\u00famero inteiro e verifique se ele \u00e9 par ou \u00edmpar.</p> <pre><code>let numero = 10; // exemplo\nif (numero % 2 === 0) {\nconsole.log(numero + \" \u00e9 par.\");\n} else {\nconsole.log(numero + \" \u00e9 \u00edmpar.\");\n}\n</code></pre> </li> <li> <p>Crie um programa utilizando operador <code>if</code> e <code>else</code> que: verifique se uma pessoa \u00e9 maior ou menor de idade (considere que a idade m\u00ednima \u00e9 18 anos).</p> <pre><code>let idade = 20; // exemplo\nif (idade &gt;= 18) {\nconsole.log(\"Maior de idade.\");\n} else {\nconsole.log(\"Menor de idade.\");\n}\n</code></pre> </li> <li> <p>Crie um programa utilizando operador <code>if</code> e <code>else</code> que: leia duas notas de um aluno, calcule a media e verifique se ele foi aprovado ou reprovado (nota m\u00ednima de aprova\u00e7\u00e3o \u00e9 6).</p> <pre><code>let nota1 = 7; // primeira nota\nlet nota2 = 5; // segunda nota\nlet media = (nota1 + nota2) / 2;\nif (media &gt;= 6) {\nconsole.log(\"Aprovado.\");\n} else {\nconsole.log(\"Reprovado.\");\n}\n</code></pre> </li> <li> <p>Crie um programa utilizando operador <code>switch-case</code> que: leia um n\u00famero inteiro de 1 a 7 e imprima o dia da semana correspondente.</p> <pre><code>let numero = 5; // exemplo\nswitch (numero) {\ncase 1:\nconsole.log(\"Domingo\");\nbreak;\ncase 2:\nconsole.log(\"Segunda-feira\");\nbreak;\ncase 3:\nconsole.log(\"Ter\u00e7a-feira\");\nbreak;\ncase 4:\nconsole.log(\"Quarta-feira\");\nbreak;\ncase 5:\nconsole.log(\"Quinta-feira\");\nbreak;\ncase 6:\nconsole.log(\"Sexta-feira\");\nbreak;\ncase 7:\nconsole.log(\"S\u00e1bado\");\nbreak;\ndefault:\nconsole.log(\"N\u00famero inv\u00e1lido\");\n}\n</code></pre> </li> <li> <p>Crie um programa utilizando operador <code>switch-case</code> que: leia uma letra e verifique se ela \u00e9 vogal ou consoante.</p> <pre><code>let letra = \"a\"; // exemplo\nswitch (letra) {\ncase \"a\":\ncase \"e\":\ncase \"i\":\ncase \"o\":\ncase \"u\":\nconsole.log(\"Vogal\");\nbreak;\ndefault:\nconsole.log(\"Consoante\");\n}\n</code></pre> </li> <li> <p>Crie um programa utilizando operador <code>switch-case</code> que: leia um n\u00famero inteiro de 1 a 12 e imprima o nome do m\u00eas correspondente.</p> <pre><code>let numero = 9; // exemplo\nswitch (numero) {\ncase 1:\nconsole.log(\"Janeiro\");\nbreak;\ncase 2:\nconsole.log(\"Fevereiro\");\nbreak;\ncase 3:\nconsole.log(\"Mar\u00e7o\");\nbreak;\ncase 4:\nconsole.log(\"Abril\");\nbreak;\ncase 5:\nconsole.log(\"Maio\");\nbreak;\ncase 6:\nconsole.log(\"Junho\");\nbreak;\ncase 7:\nconsole.log(\"Julho\");\nbreak;\ncase 8:\nconsole.log(\"Agosto\");\nbreak;\ncase 9:\nconsole.log(\"Setembro\");\nbreak;\ncase 10:\nconsole.log(\"Outubro\");\nbreak;\ncase 11:\nconsole.log(\"Novembro\");\nbreak;\ncase 12:\nconsole.log(\"Dezembro\");\nbreak;\ndefault:\nconsole.log(\"N\u00famero inv\u00e1lido\");\n}\n</code></pre> </li> <li> <p>Crie um programa utilizando operador <code>ternario</code> que: leia um n\u00famero e informe se ele \u00e9 positivo ou negativo.</p> <pre><code>let numero = 5; // exemplo\nlet resultado = numero &gt;= 0 ? \"positivo\" : \"negativo\";\nconsole.log(resultado);\n</code></pre> </li> <li> <p>Crie um programa utilizando operador <code>ternario</code> que: leia a idade de uma pessoa e informe se ela \u00e9 maior ou menor de idade.</p> <pre><code>let idade = 20; // exemplo\nlet resultado = idade &gt;= 18 ? \"maior de idade\" : \"menor de idade\";\nconsole.log(resultado);\n</code></pre> </li> <li> <p>Crie um programa utilizando operador <code>ternario</code> que: leia dois n\u00fameros e informe qual deles \u00e9 o maior.</p> <pre><code>let numero1 = 10; // exemplo\nlet numero2 = 5; // exemplo\nlet maior = numero1 &gt; numero2 ? numero1 : numero2;\nconsole.log(maior);\n</code></pre> </li> <li> <p>Crie um programa utilizando operador <code>try-catch-finally</code> que: tente converter uma string em um n\u00famero, e caso ocorra um erro, informe uma mensagem amig\u00e1vel ao usu\u00e1rio.</p> <pre><code>let texto = \"123abc\"; // exemplo\nlet numero;\n\ntry {\nnumero = Number(texto);\nif (isNaN(numero)) {\nthrow new Error(\"O texto n\u00e3o pode ser convertido em n\u00famero\");\n}\nconsole.log(`O n\u00famero \u00e9 ${numero}`);\n} catch (error) {\nconsole.log(error.message);\n} finally {\nconsole.log(\"Fim da execu\u00e7\u00e3o do programa\");\n}\n</code></pre> </li> <li> <p>Crie um programa utilizando operador <code>try-catch-finally</code> que: tente acessar uma propriedade de um objeto que n\u00e3o existe, e caso ocorra um erro, informe uma mensagem amig\u00e1vel ao usu\u00e1rio.</p> <pre><code>let objeto = {nome: \"Jo\u00e3o\", idade: 30}; // exemplo\nlet propriedade = \"endereco\";\nlet valor;\n\ntry {\nvalor = objeto[propriedade];\nif (!valor) {\nthrow new Error(`A propriedade ${propriedade} n\u00e3o existe no objeto`);\n}\nconsole.log(`O valor da propriedade \u00e9 ${valor}`);\n} catch (error) {\nconsole.log(error.message);\n} finally {\nconsole.log(\"Fim da execu\u00e7\u00e3o do programa\");\n}\n</code></pre> </li> <li> <p>Crie um programa utilizando operador <code>try-catch-finally</code> que: tente dividir um n\u00famero por zero, e caso ocorra um erro, informe uma mensagem amig\u00e1vel ao usu\u00e1rio.</p> <pre><code>let numero = 10; // exemplo\nlet divisor = 0;\nlet resultado;\n\ntry {\nresultado = numero / divisor;\nconsole.log(`O resultado da divis\u00e3o \u00e9 ${resultado}`);\n} catch (error) {\nconsole.log(\"Ocorreu um erro ao tentar dividir o n\u00famero:\", error.message);\n} finally {\nconsole.log(\"Fim da execu\u00e7\u00e3o do programa\");\n}\n</code></pre> </li> </ol>"},{"location":"javascript/_02_Estruturas-de-Decis%C3%A3o-e-Repeti%C3%A7%C3%A3o/#resposta-estruturas-de-repeticao","title":"Resposta Estruturas de repeti\u00e7\u00e3o","text":"<ol> <li> <p>Crie um programa utilizando a estrutura <code>for</code> que: exiba no console os n\u00fameros de 1 a 10.</p> <pre><code>for (let i = 1; i &lt;= 10; i++) {\nconsole.log(i);\n}\n</code></pre> </li> <li> <p>Crie um programa  utilizando a estrutura <code>for</code> que: exiba no console os n\u00fameros pares de 1 a 20.</p> <pre><code>for (let i = 2; i &lt;= 20; i += 2) {\nconsole.log(i);\n}\n</code></pre> </li> <li> <p>Crie um programa utilizando a estrutura <code>for</code> que: exiba no console os n\u00fameros de 50 a 1 em ordem decrescente, pulando de 5 em 5.</p> <pre><code>for (let i = 50; i &gt;= 1; i -= 5) {\nconsole.log(i);\n}\n</code></pre> </li> <li> <p>Crie um programa utilizando a estrutura <code>while</code> que: exiba no console a soma dos n\u00fameros de 1 a 10.</p> <pre><code>let i = 1;\nlet soma = 0;\n\nwhile (i &lt;= 10) {\nsoma += i;\ni++;\n}\n\nconsole.log(`A soma dos n\u00fameros de 1 a 10 \u00e9 ${soma}`);\n</code></pre> </li> <li> <p>Crie um programa utilizando a estrutura <code>while</code> que: exiba no console os n\u00fameros \u00edmpares de 1 a 20.</p> <pre><code>let i = 1;\n\nwhile (i &lt;= 20) {\nif (i % 2 !== 0) {\nconsole.log(i);\n}\ni++;\n}\n</code></pre> </li> </ol>"},{"location":"javascript/_03_Tipos-de-Fun%C3%A7%C3%B5es-e-Manipula%C3%A7%C3%A3o-de-Dados/","title":"03 Tipos de Fun\u00e7\u00f5es e Manipula\u00e7\u00e3o de Dados","text":""},{"location":"javascript/_03_Tipos-de-Fun%C3%A7%C3%B5es-e-Manipula%C3%A7%C3%A3o-de-Dados/#tipos-de-funcoes-e-manipulacao-de-dados","title":"Tipos de Fun\u00e7\u00f5es e Manipula\u00e7\u00e3o de Dados","text":""},{"location":"javascript/_03_Tipos-de-Fun%C3%A7%C3%B5es-e-Manipula%C3%A7%C3%A3o-de-Dados/#introducao-a-funcoes-em-javascript","title":"Introdu\u00e7\u00e3o a Fun\u00e7\u00f5es em Javascript","text":"<p>Uma fun\u00e7\u00e3o em JavaScript \u00e9 um bloco de c\u00f3digo que executa uma tarefa espec\u00edfica. As fun\u00e7\u00f5es s\u00e3o usadas para modularizar o c\u00f3digo, tornando-o mais f\u00e1cil de ler e manter. As fun\u00e7\u00f5es tamb\u00e9m s\u00e3o usadas para reutilizar c\u00f3digo, permitindo que voc\u00ea escreva uma vez e use v\u00e1rias vezes em seu programa.</p> <p>Sintaxe de Fun\u00e7\u00e3o em JavaScript</p> <p>A sintaxe b\u00e1sica de uma fun\u00e7\u00e3o em JavaScript \u00e9 a seguinte:</p> <pre><code>function nome_da_funcao(parametro1, parametro2, ..., parametroN) {\n// Bloco de c\u00f3digo que executa a tarefa da fun\u00e7\u00e3o\n}\n</code></pre> <p>Onde:</p> <ul> <li><code>nome_da_funcao</code>: \u00e9 o nome que voc\u00ea escolhe para sua fun\u00e7\u00e3o.</li> <li><code>parametro1, parametro2, ..., parametroN</code>: s\u00e3o os par\u00e2metros opcionais que voc\u00ea pode passar para a fun\u00e7\u00e3o. Os par\u00e2metros s\u00e3o usados para receber valores que a fun\u00e7\u00e3o ir\u00e1 processar.</li> <li><code>Bloco de c\u00f3digo que executa a tarefa da fun\u00e7\u00e3o</code>: \u00e9 o c\u00f3digo que a fun\u00e7\u00e3o ir\u00e1 executar quando for chamada.</li> </ul> <p>Por exemplo, vamos criar uma fun\u00e7\u00e3o simples que recebe dois par\u00e2metros e retorna a soma desses par\u00e2metros:</p> <pre><code>function somar(valor1, valor2) {\nreturn valor1 + valor2;\n}\n</code></pre> <p>Chamando uma Fun\u00e7\u00e3o em JavaScript</p> <p>Uma vez que voc\u00ea tenha criado uma fun\u00e7\u00e3o, voc\u00ea pode cham\u00e1-la em qualquer lugar em seu programa. Para chamar uma fun\u00e7\u00e3o, voc\u00ea simplesmente usa seu nome seguido por par\u00eanteses com os argumentos (se houver) que voc\u00ea deseja passar para a fun\u00e7\u00e3o.</p> <p>Por exemplo, para chamar a fun\u00e7\u00e3o <code>somar</code> que criamos anteriormente, voc\u00ea pode fazer o seguinte:</p> <pre><code>var resultado = somar(2, 3);\nconsole.log(resultado); // Sa\u00edda: 5\n</code></pre> <p>O que aconteceu aqui \u00e9 que chamamos a fun\u00e7\u00e3o <code>somar</code> passando os valores <code>2</code> e <code>3</code> como argumentos. A fun\u00e7\u00e3o <code>somar</code> ent\u00e3o retorna a soma desses valores, que \u00e9 <code>5</code>, que \u00e9 atribu\u00eddo \u00e0 vari\u00e1vel <code>resultado</code>. Em seguida, imprimimos o resultado usando a fun\u00e7\u00e3o <code>console.log</code>.</p> <p>Retorno de Valores em Fun\u00e7\u00f5es em JavaScript</p> <p>As fun\u00e7\u00f5es em JavaScript podem retornar valores usando a palavra-chave <code>return</code>. Quando uma fun\u00e7\u00e3o encontra a palavra-chave <code>return</code>, ela interrompe a execu\u00e7\u00e3o e retorna um valor para quem chamou a fun\u00e7\u00e3o.</p> <p>Por exemplo, considere a seguinte fun\u00e7\u00e3o que verifica se um n\u00famero \u00e9 par ou \u00edmpar:</p> <pre><code>function par_ou_impar(numero) {\nif(numero % 2 === 0) {\nreturn \"par\";\n} else {\nreturn \"\u00edmpar\";\n}\n}\n</code></pre> <p>Podemos chamar essa fun\u00e7\u00e3o e armazenar o resultado em uma vari\u00e1vel:</p> <pre><code>var resultado = par_ou_impar(3);\nconsole.log(resultado); // Sa\u00edda: \"\u00edmpar\"\n</code></pre> <p>Par\u00e2metros de Fun\u00e7\u00f5es em JavaScript</p> <p>As fun\u00e7\u00f5es em JavaScript podem receber par\u00e2metros para processar valores espec\u00edficos. Os par\u00e2metros s\u00e3o passados \u200b\u200bpara a fun\u00e7\u00e3o como argumentos quando a fun\u00e7\u00e3o \u00e9 chamada. Os par\u00e2metros s\u00e3o opcionais e voc\u00ea pode passar quantos par\u00e2metros desejar.</p> <p>Por exemplo, a fun\u00e7\u00e3o <code>somar</code> que criamos anteriormente recebe dois par\u00e2metros. Voc\u00ea pode passar qualquer valor para esses par\u00e2metros, desde que correspondam ao tipo de dados que a fun\u00e7\u00e3o espera.</p> <pre><code>function somar(valor1, valor2) {\nreturn valor1 + valor2;\n}\n\nvar resultado = somar(2, 3);\nconsole.log(resultado); // Sa\u00edda: 5\n</code></pre> <p>Aqui, a fun\u00e7\u00e3o <code>somar</code> espera dois par\u00e2metros, <code>valor1</code> e <code>valor2</code>, que s\u00e3o usados \u200b\u200bpara somar os valores e retornar o resultado.</p>"},{"location":"javascript/_03_Tipos-de-Fun%C3%A7%C3%B5es-e-Manipula%C3%A7%C3%A3o-de-Dados/#ordem-de-funcao","title":"Ordem de fun\u00e7\u00e3o","text":"<p>A ordem de fun\u00e7\u00e3o em JavaScript se refere \u00e0 ordem em que as fun\u00e7\u00f5es s\u00e3o definidas e executadas no c\u00f3digo. </p> <p>Quando uma fun\u00e7\u00e3o \u00e9 definida em JavaScript, ela \u00e9 armazenada em mem\u00f3ria, mas seu c\u00f3digo n\u00e3o \u00e9 executado imediatamente. Em vez disso, o c\u00f3digo dentro da fun\u00e7\u00e3o s\u00f3 ser\u00e1 executado quando a fun\u00e7\u00e3o for chamada. </p> <p>Por exemplo, considere o seguinte c\u00f3digo:</p> <pre><code>function soma(a, b) {\nreturn a + b;\n}\n\nfunction subtracao(a, b) {\nreturn a - b;\n}\n\nconsole.log(soma(1, 2)); // output: 3\nconsole.log(subtracao(4, 2)); // output: 2\n</code></pre> <p>Nesse exemplo, as fun\u00e7\u00f5es \"soma\" e \"subtracao\" s\u00e3o definidas primeiro e, em seguida, s\u00e3o chamadas para realizar c\u00e1lculos. A ordem em que as fun\u00e7\u00f5es s\u00e3o definidas n\u00e3o afeta o resultado final.</p> <p>No entanto, se houver depend\u00eancias entre as fun\u00e7\u00f5es, a ordem de defini\u00e7\u00e3o pode ser importante. Se uma fun\u00e7\u00e3o A chama uma fun\u00e7\u00e3o B, a fun\u00e7\u00e3o B deve ser definida antes da fun\u00e7\u00e3o A. Caso contr\u00e1rio, o c\u00f3digo ir\u00e1 gerar um erro. </p> <p>Por exemplo:</p> <pre><code>function soma(a, b) {\nreturn a + b;\n}\n\nfunction multiplicacao(a, b) {\nreturn a * b;\n}\n\nfunction somaMultiplicacao(a, b, c) {\nreturn soma(multiplicacao(a, b), c);\n}\n\nconsole.log(somaMultiplicacao(2, 3, 4)); // output: 10\n</code></pre> <p>Neste exemplo, a fun\u00e7\u00e3o \"somaMultiplicacao\" chama as fun\u00e7\u00f5es \"soma\" e \"multiplicacao\". Essas fun\u00e7\u00f5es devem ser definidas antes da fun\u00e7\u00e3o \"somaMultiplicacao\" para que o c\u00f3digo funcione corretamente.</p>"},{"location":"javascript/_03_Tipos-de-Fun%C3%A7%C3%B5es-e-Manipula%C3%A7%C3%A3o-de-Dados/#arrow-functions","title":"Arrow functions","text":"<p>Arrow functions (ou \"fun\u00e7\u00f5es de seta\" em portugu\u00eas) s\u00e3o uma sintaxe alternativa para escrever fun\u00e7\u00f5es em JavaScript. Elas foram introduzidas na especifica\u00e7\u00e3o ECMAScript 6 e s\u00e3o uma maneira mais concisa e expressiva de definir fun\u00e7\u00f5es.</p> <p>A sintaxe de uma arrow function \u00e9 a seguinte:</p> <pre><code>(param1, param2, ..., paramN) =&gt; { // corpo da fun\u00e7\u00e3o\n}\n</code></pre> <p>Aqui, <code>param1</code>, <code>param2</code>, ..., <code>paramN</code> s\u00e3o os par\u00e2metros da fun\u00e7\u00e3o e o <code>=&gt;</code> \u00e9 a \"seta\" que indica que estamos definindo uma arrow function. O corpo da fun\u00e7\u00e3o \u00e9 definido dentro das chaves <code>{}</code> e pode conter uma ou mais instru\u00e7\u00f5es. Se o corpo da fun\u00e7\u00e3o tiver apenas uma instru\u00e7\u00e3o, podemos omitir as chaves e a palavra-chave <code>return</code>, como no exemplo a seguir:</p> <pre><code>(param1, param2, ..., paramN) =&gt; instrucao;\n</code></pre> <p>Aqui, <code>instrucao</code> \u00e9 a instru\u00e7\u00e3o que ser\u00e1 retornada pela fun\u00e7\u00e3o.</p> <p>Por exemplo, considere a seguinte fun\u00e7\u00e3o tradicional:</p> <pre><code>function soma(a, b) {\nreturn a + b;\n}\n</code></pre> <p>Podemos reescrev\u00ea-la usando arrow function da seguinte forma:</p> <pre><code>const soma = (a, b) =&gt; a + b;\n</code></pre> <p>Observe como a sintaxe da arrow function \u00e9 mais concisa e expressiva, tornando o c\u00f3digo mais f\u00e1cil de ler e entender.</p> <p>As arrow functions tamb\u00e9m t\u00eam algumas diferen\u00e7as comportamentais em rela\u00e7\u00e3o \u00e0s fun\u00e7\u00f5es tradicionais. Em particular, elas t\u00eam um <code>this</code> l\u00e9xico, o que significa que o valor de <code>this</code> \u00e9 definido no momento em que a fun\u00e7\u00e3o \u00e9 definida, e n\u00e3o quando ela \u00e9 executada. Al\u00e9m disso, as arrow functions n\u00e3o t\u00eam o objeto <code>arguments</code>, o que pode afetar a forma como lidamos com os argumentos da fun\u00e7\u00e3o.</p>"},{"location":"javascript/_03_Tipos-de-Fun%C3%A7%C3%B5es-e-Manipula%C3%A7%C3%A3o-de-Dados/#funcoes-anonimas-em-javascript","title":"Fun\u00e7\u00f5es An\u00f4nimas em JavaScript","text":"<p>Em JavaScript, voc\u00ea pode criar fun\u00e7\u00f5es an\u00f4nimas, que s\u00e3o fun\u00e7\u00f5es que n\u00e3o possuem nome. As fun\u00e7\u00f5es an\u00f4nimas s\u00e3o usadas em situa\u00e7\u00f5es em que voc\u00ea precisa passar uma fun\u00e7\u00e3o como argumento para outra fun\u00e7\u00e3o.</p> <p>Por exemplo, a fun\u00e7\u00e3o <code>setTimeout</code> em JavaScript espera uma fun\u00e7\u00e3o como argumento para ser executada ap\u00f3s um certo per\u00edodo de tempo.</p> <pre><code>setTimeout(function() {\nconsole.log(\"Executado ap\u00f3s 3 segundos\");\n}, 3000);\n</code></pre> <p>Aqui, passamos uma fun\u00e7\u00e3o an\u00f4nima como argumento para <code>setTimeout</code>. A fun\u00e7\u00e3o ser\u00e1 executada ap\u00f3s 3 segundos e imprimir\u00e1 a mensagem \"Executado ap\u00f3s 3 segundos\" no console.</p> <p>Fun\u00e7\u00f5es s\u00e3o uma parte fundamental de JavaScript e s\u00e3o usadas para modularizar o c\u00f3digo, tornando-o mais f\u00e1cil de ler e manter. As fun\u00e7\u00f5es tamb\u00e9m s\u00e3o usadas para reutilizar c\u00f3digo, permitindo que voc\u00ea escreva uma vez e use v\u00e1rias vezes em seu programa. At\u00e9 agora, discutimos a sintaxe b\u00e1sica de uma fun\u00e7\u00e3o em JavaScript, como chamar fun\u00e7\u00f5es, retornar valores e usar fun\u00e7\u00f5es an\u00f4nimas. Com uma compreens\u00e3o s\u00f3lida de como as fun\u00e7\u00f5es funcionam em JavaScript, voc\u00ea estar\u00e1 pronto para escrever c\u00f3digo mais complexo e eficiente em JavaScript.</p>"},{"location":"javascript/_03_Tipos-de-Fun%C3%A7%C3%B5es-e-Manipula%C3%A7%C3%A3o-de-Dados/#callback","title":"CALLBACK","text":"<p>Em JavaScript, um callback \u00e9 uma fun\u00e7\u00e3o que \u00e9 passada como argumento para outra fun\u00e7\u00e3o e \u00e9 executada quando essa fun\u00e7\u00e3o \u00e9 conclu\u00edda. O termo \"callback\" \u00e9 usado porque a fun\u00e7\u00e3o passada \u00e9 \"chamada de volta\" para executar uma a\u00e7\u00e3o adicional.</p> <p>Callbacks s\u00e3o comuns em JavaScript porque a linguagem permite o uso de fun\u00e7\u00f5es como valores de vari\u00e1veis, tornando-as cidad\u00e3os de primeira classe na linguagem. Isso significa que as fun\u00e7\u00f5es podem ser tratadas como qualquer outra vari\u00e1vel, incluindo pass\u00e1-las como argumentos para outras fun\u00e7\u00f5es.</p> <p>Callbacks s\u00e3o frequentemente usados para lidar com tarefas ass\u00edncronas em JavaScript, como fazer chamadas de API ou ler arquivos, onde \u00e9 necess\u00e1rio esperar uma resposta antes de executar uma a\u00e7\u00e3o adicional. Em vez de bloquear a execu\u00e7\u00e3o do programa enquanto espera pela resposta, o c\u00f3digo pode continuar executando e chamar o callback quando a resposta for recebida.</p> <p>Por exemplo, a fun\u00e7\u00e3o <code>setTimeout()</code> em JavaScript \u00e9 um exemplo comum de uma fun\u00e7\u00e3o que usa callbacks. A fun\u00e7\u00e3o <code>setTimeout()</code> recebe dois argumentos: uma fun\u00e7\u00e3o de callback e um tempo em milissegundos. A fun\u00e7\u00e3o de callback \u00e9 executada depois que o tempo especificado passa:</p> <pre><code>setTimeout(function() {\nconsole.log('Essa mensagem ser\u00e1 exibida ap\u00f3s 3 segundos');\n}, 3000);\n</code></pre> <p>Nesse exemplo, uma fun\u00e7\u00e3o an\u00f4nima \u00e9 passada como um callback para a fun\u00e7\u00e3o <code>setTimeout()</code>. Essa fun\u00e7\u00e3o de callback ser\u00e1 chamada ap\u00f3s um atraso de 3 segundos.</p> <p>Callbacks s\u00e3o uma parte fundamental do modelo de programa\u00e7\u00e3o ass\u00edncrona em JavaScript, e s\u00e3o amplamente usados em bibliotecas e frameworks populares, como jQuery, React, Node.js, entre outros.</p>"},{"location":"javascript/_03_Tipos-de-Fun%C3%A7%C3%B5es-e-Manipula%C3%A7%C3%A3o-de-Dados/#promise","title":"PROMISE","text":"<p>Em JavaScript, <code>Promise</code> \u00e9 um objeto que representa a eventual conclus\u00e3o (ou falha) de uma opera\u00e7\u00e3o ass\u00edncrona e seu resultado. A ideia b\u00e1sica \u00e9 que, em vez de esperar que uma opera\u00e7\u00e3o ass\u00edncrona seja conclu\u00edda antes de continuar a execu\u00e7\u00e3o do c\u00f3digo, podemos criar uma promessa que ser\u00e1 resolvida posteriormente com o resultado da opera\u00e7\u00e3o.</p> <p>A promessa pode estar em um de tr\u00eas estados: pendente, resolvida ou rejeitada. Quando a promessa est\u00e1 pendente, a opera\u00e7\u00e3o ass\u00edncrona ainda est\u00e1 em andamento. Quando a opera\u00e7\u00e3o \u00e9 conclu\u00edda com sucesso, a promessa \u00e9 resolvida com o resultado da opera\u00e7\u00e3o. Se a opera\u00e7\u00e3o falhar, a promessa \u00e9 rejeitada com um motivo de erro.</p> <p>As promessas podem ser usadas para simplificar o c\u00f3digo em compara\u00e7\u00e3o com o uso de callbacks. Em vez de aninhar v\u00e1rias fun\u00e7\u00f5es de callback, podemos encadear v\u00e1rias promessas em uma cadeia, usando os m\u00e9todos <code>then()</code> e <code>catch()</code>. O m\u00e9todo <code>then()</code> \u00e9 usado para lidar com a resolu\u00e7\u00e3o bem-sucedida da promessa, enquanto o m\u00e9todo <code>catch()</code> \u00e9 usado para lidar com a rejei\u00e7\u00e3o da promessa.</p> <p>Abaixo, segue um exemplo simples de como usar uma promessa em JavaScript:</p> <pre><code>function multiplica_por_dois(valor) {\nreturn new Promise((resolve, reject) =&gt; {\nif (typeof valor === 'number') {\nresolve(valor * 2);\n} else {\nreject(new Error('O argumento n\u00e3o \u00e9 um n\u00famero.'));\n}\n});\n}\n\nmultiplica_por_dois(4)\n.then(result =&gt; {\nconsole.log(result); // Resultado: 8\n})\n.catch(error =&gt; {\nconsole.error(error.message);\n});\n</code></pre> <p>Neste exemplo, a fun\u00e7\u00e3o <code>multiplica_por_dois()</code> retorna uma nova promessa que \u00e9 resolvida com o resultado da multiplica\u00e7\u00e3o por dois do argumento passado. Se o argumento n\u00e3o for um n\u00famero, a promessa \u00e9 rejeitada com um objeto de erro.</p> <p>Fora da fun\u00e7\u00e3o, usamos o m\u00e9todo <code>then()</code> para acessar o valor resolvido da promessa e imprimir o resultado da multiplica\u00e7\u00e3o. Tamb\u00e9m usamos o m\u00e9todo <code>catch()</code> para lidar com quaisquer erros que possam ocorrer na execu\u00e7\u00e3o da promessa.</p> <p>Em resumo, as promessas s\u00e3o objetos que representam a conclus\u00e3o (ou falha) de uma opera\u00e7\u00e3o ass\u00edncrona e seu resultado. Elas s\u00e3o usadas para simplificar o c\u00f3digo em compara\u00e7\u00e3o com o uso de callbacks e podem ser encadeadas em uma cadeia usando os m\u00e9todos <code>then()</code> e <code>catch()</code>.</p>"},{"location":"javascript/_03_Tipos-de-Fun%C3%A7%C3%B5es-e-Manipula%C3%A7%C3%A3o-de-Dados/#asyncawait","title":"ASYNC/AWAIT","text":"<p>Em JavaScript, <code>async</code>/<code>await</code> \u00e9 uma forma de lidar com tarefas ass\u00edncronas que simplifica a sintaxe em rela\u00e7\u00e3o ao uso de callbacks e promessas. <code>async</code> \u00e9 uma palavra-chave que pode ser usada para declarar uma fun\u00e7\u00e3o ass\u00edncrona, que retorna uma promessa que ser\u00e1 resolvida com o valor retornado pela fun\u00e7\u00e3o. <code>await</code> \u00e9 uma palavra-chave que pode ser usada dentro de uma fun\u00e7\u00e3o ass\u00edncrona para aguardar a resolu\u00e7\u00e3o de uma promessa antes de continuar a execu\u00e7\u00e3o do c\u00f3digo.</p> <p>O uso de <code>async</code>/<code>await</code> pode tornar o c\u00f3digo mais leg\u00edvel e f\u00e1cil de manter em compara\u00e7\u00e3o com o uso de callbacks ou promessas. Em vez de aninhar v\u00e1rias fun\u00e7\u00f5es de callback ou encadear v\u00e1rias promessas, o c\u00f3digo pode ser escrito de forma mais sequencial, parecendo com c\u00f3digo s\u00edncrono. Isso pode tornar o c\u00f3digo mais f\u00e1cil de entender e depurar.</p> <p>Veja um exemplo simples abaixo para ilustrar o uso de <code>async</code>/<code>await</code> em JavaScript:</p> <pre><code>async function fetchUserData(userId) {\nconst response = await fetch(`https://api.example.com/users/${userId}`);\nconst userData = await response.json();\nreturn userData;\n}\n\nfetchUserData(123)\n.then(userData =&gt; {\nconsole.log(`Nome do usu\u00e1rio: ${userData.name}`);\n})\n.catch(error =&gt; {\nconsole.error(error);\n});\n</code></pre> <p>Neste exemplo, a fun\u00e7\u00e3o <code>fetchUserData()</code> \u00e9 declarada com a palavra-chave <code>async</code>. Dentro da fun\u00e7\u00e3o, usamos <code>await</code> para aguardar a resposta da API antes de transformar a resposta em um objeto JSON. A fun\u00e7\u00e3o retorna o objeto JSON, que \u00e9 resolvido como um valor de promessa quando a fun\u00e7\u00e3o \u00e9 conclu\u00edda.</p> <p>Fora da fun\u00e7\u00e3o, chamamos a fun\u00e7\u00e3o <code>fetchUserData()</code> passando um ID de usu\u00e1rio como argumento. Em seguida, usamos o m\u00e9todo <code>then()</code> para acessar o valor resolvido da promessa e imprimir o nome do usu\u00e1rio. Tamb\u00e9m usamos o m\u00e9todo <code>catch()</code> para lidar com quaisquer erros que possam ocorrer na execu\u00e7\u00e3o da fun\u00e7\u00e3o ass\u00edncrona.</p> <p>Em resumo, <code>async</code>/<code>await</code> \u00e9 uma forma mais elegante e f\u00e1cil de ler e escrever c\u00f3digo ass\u00edncrono em JavaScript. Algumas situa\u00e7\u00f5es comuns em que voc\u00ea pode querer usar <code>async</code>/<code>await</code> em vez de callbacks ou promessas s\u00e3o:</p> <ol> <li>Fazer requisi\u00e7\u00f5es ass\u00edncronas de dados em uma API;</li> <li>Ler ou gravar arquivos em um sistema de arquivos;</li> <li>Acessar bancos de dados;</li> <li>Executar tarefas ass\u00edncronas em segundo plano;</li> <li>Executar tarefas ass\u00edncronas complexas que dependem de outras opera\u00e7\u00f5es ass\u00edncronas.</li> </ol> <p>Al\u00e9m disso, o uso de <code>async</code>/<code>await</code> pode tornar o c\u00f3digo mais leg\u00edvel e f\u00e1cil de manter em compara\u00e7\u00e3o com o uso de callbacks ou promessas. Em vez de aninhar v\u00e1rias fun\u00e7\u00f5es de callback ou encadear v\u00e1rias promessas, o c\u00f3digo pode ser escrito de forma mais sequencial, parecendo com c\u00f3digo s\u00edncrono. Isso pode tornar o c\u00f3digo mais f\u00e1cil de entender e depurar.</p> <p>No entanto, \u00e9 importante lembrar que o uso excessivo de <code>async</code>/<code>await</code> pode levar a problemas de desempenho, pois a execu\u00e7\u00e3o de uma fun\u00e7\u00e3o ass\u00edncrona pode bloquear a execu\u00e7\u00e3o do thread principal do aplicativo. Portanto, \u00e9 importante avaliar cuidadosamente a complexidade da tarefa ass\u00edncrona e se a abordagem <code>async</code>/<code>await</code> \u00e9 a melhor para ela.</p>"},{"location":"javascript/_03_Tipos-de-Fun%C3%A7%C3%B5es-e-Manipula%C3%A7%C3%A3o-de-Dados/#conversoes-e-manipulacao-de-dados","title":"Convers\u00f5es e manipula\u00e7\u00e3o de dados","text":"<p>Em JavaScript, assim como em outras linguagem de programa\u00e7ao exitem o que chamamos de built-in functions (ou fun\u00e7\u00f5es integradas) s\u00e3o fun\u00e7\u00f5es que j\u00e1 v\u00eam pr\u00e9-definidas na linguagem e podem ser usadas diretamente pelo desenvolvedor sem precisar criar ou importar uma biblioteca externa. Essas fun\u00e7\u00f5es s\u00e3o amplamente usadas para realizar tarefas comuns de programa\u00e7\u00e3o, como manipula\u00e7\u00e3o de strings, n\u00fameros e datas.</p> <p>Algumas das fun\u00e7\u00f5es integradas mais comuns em JavaScript incluem:</p> <ul> <li><code>parseInt()</code>: converte uma string em um n\u00famero inteiro.</li> <li><code>parseFloat()</code>: converte uma string em um n\u00famero decimal.</li> <li><code>isNaN()</code>: verifica se um valor \u00e9 um n\u00famero ou n\u00e3o.</li> <li><code>toString()</code>: converte um valor em uma string.</li> <li><code>Math.random()</code>: gera um n\u00famero aleat\u00f3rio entre 0 e 1.</li> <li><code>Math.floor()</code>: arredonda um n\u00famero para baixo para o n\u00famero inteiro mais pr\u00f3ximo.</li> <li><code>Math.ceil()</code>: arredonda um n\u00famero para cima para o n\u00famero inteiro mais pr\u00f3ximo.</li> <li><code>Math.round()</code>: arredonda um n\u00famero para o n\u00famero inteiro mais pr\u00f3ximo.</li> <li><code>Date.now()</code>: retorna a data atual em milissegundos desde 1 de janeiro de 1970.</li> </ul> <p>Essas s\u00e3o apenas algumas das muitas fun\u00e7\u00f5es integradas em JavaScript. Voc\u00ea pode encontrar uma lista completa dessas fun\u00e7\u00f5es na documenta\u00e7\u00e3o oficial do JavaScript. Al\u00e9m disso, voc\u00ea pode criar suas pr\u00f3prias fun\u00e7\u00f5es personalizadas em JavaScript para realizar tarefas espec\u00edficas de acordo com suas necessidades.</p>"},{"location":"javascript/_03_Tipos-de-Fun%C3%A7%C3%B5es-e-Manipula%C3%A7%C3%A3o-de-Dados/#conversao-de-tipos-de-dados-em-javascript","title":"Convers\u00e3o de tipos de dados em JavaScript","text":"<p>JavaScript \u00e9 uma linguagem dinamicamente tipada, o que significa que os tipos de dados s\u00e3o determinados em tempo de execu\u00e7\u00e3o. Isso permite que voc\u00ea converta facilmente um tipo de dados em outro, conforme necess\u00e1rio.</p> <p>Existem v\u00e1rias maneiras de converter tipos de dados em JavaScript. Vamos ver as principais:</p> <ul> <li><code>Number()</code>: converte um valor em um n\u00famero.</li> <li><code>String()</code>: converte um valor em uma string.</li> <li><code>Boolean()</code>: converte um valor em um booleano.</li> <li><code>parseInt()</code>: converte uma string em um n\u00famero inteiro.</li> <li><code>parseFloat()</code>: converte uma string em um n\u00famero decimal.</li> </ul> <p>Por exemplo:</p> <pre><code>let num = \"10\";\nconsole.log(Number(num)); // 10\n\nlet str = 42;\nconsole.log(String(str)); // \"42\"\n\nlet bool = 0;\nconsole.log(Boolean(bool)); // false\n\nlet int = \"10\";\nconsole.log(parseInt(int)); // 10\n\nlet float = \"3.14\";\nconsole.log(parseFloat(float)); // 3.14\n</code></pre> <p>Observe que, ao converter uma string em um n\u00famero, voc\u00ea pode usar <code>parseInt()</code> para converter para um n\u00famero inteiro ou <code>parseFloat()</code> para um n\u00famero decimal.</p> <ol> <li>Manipula\u00e7\u00e3o de strings em JavaScript</li> </ol> <p>Strings s\u00e3o uma parte importante da manipula\u00e7\u00e3o de dados em JavaScript. Aqui est\u00e3o algumas t\u00e9cnicas comuns de manipula\u00e7\u00e3o de strings em JavaScript:</p> <ul> <li>Concatena\u00e7\u00e3o de strings: use o operador <code>+</code> para concatenar duas ou mais strings. Por exemplo:</li> </ul> <pre><code>let str1 = \"Hello\";\nlet str2 = \"World\";\nconsole.log(str1 + \" \" + str2); // \"Hello World\"\n</code></pre> <ul> <li>Acesso a caracteres: use colchetes <code>[]</code> para acessar caracteres em uma string. Por exemplo:</li> </ul> <pre><code>let str = \"JavaScript\";\nconsole.log(str[0]); // \"J\"\nconsole.log(str[4]); // \"S\"\n</code></pre> <ul> <li>M\u00e9todo <code>slice()</code>: use o m\u00e9todo <code>slice()</code> para extrair uma parte de uma string. Por exemplo:</li> </ul> <pre><code>let str = \"JavaScript\";\nconsole.log(str.slice(0, 4)); // \"Java\"\nconsole.log(str.slice(4)); // \"Script\"\n</code></pre> <ul> <li>M\u00e9todo <code>toUpperCase()</code> e <code>toLowerCase()</code>: use esses m\u00e9todos para converter uma string para mai\u00fasculas ou min\u00fasculas. Por exemplo:</li> </ul> <pre><code>let str = \"JavaScript\";\nconsole.log(str.toUpperCase()); // \"JAVASCRIPT\"\nconsole.log(str.toLowerCase()); // \"javascript\"\n</code></pre>"},{"location":"javascript/_03_Tipos-de-Fun%C3%A7%C3%B5es-e-Manipula%C3%A7%C3%A3o-de-Dados/#manipulacao-de-arrays-em-javascript","title":"Manipula\u00e7\u00e3o de arrays em JavaScript","text":"<p>Arrays s\u00e3o uma estrutura de dados poderosa em JavaScript e podem ser facilmente manipulados. Aqui est\u00e3o algumas t\u00e9cnicas comuns de manipula\u00e7\u00e3o de arrays em JavaScript:</p> <ul> <li>Acesso a elementos: use colchetes <code>[]</code> para acessar elementos em um array. Por exemplo:</li> </ul> <pre><code>let arr = [1, 2, 3];\nconsole.log(arr[0]); // 1\nconsole.log(arr[2]); // 3\n</code></pre> <p>JavaScript possui diversos m\u00e9todos de manipula\u00e7\u00e3o de array que permitem adicionar, remover, alterar e pesquisar elementos em um array. Alguns dos m\u00e9todos mais comuns s\u00e3o:</p> M\u00e9todo Descri\u00e7\u00e3o <code>concat()</code> Retorna um novo array composto pela concatena\u00e7\u00e3o do array original com outros arrays e/ou valores. <code>join()</code> Retorna uma string que cont\u00e9m todos os elementos do array concatenados, separados por um separador especificado. <code>slice()</code> Retorna um novo array que \u00e9 uma c\u00f3pia de uma parte do array original, especificada pelos \u00edndices de in\u00edcio e fim. <code>splice()</code> Adiciona e/ou remove elementos do array original, retornando um novo array com os elementos removidos. <code>push()</code> Adiciona um ou mais elementos ao final do array original e retorna o novo tamanho do array. <code>pop()</code> Remove o \u00faltimo elemento do array original e retorna esse elemento. <code>shift()</code> Remove o primeiro elemento do array original e retorna esse elemento. <code>unshift()</code> Adiciona um ou mais elementos no in\u00edcio do array original e retorna o novo tamanho do array. <code>indexOf()</code> Retorna o \u00edndice da primeira ocorr\u00eancia de um elemento no array original, ou -1 se o elemento n\u00e3o for encontrado. <code>lastIndexOf()</code> Retorna o \u00edndice da \u00faltima ocorr\u00eancia de um elemento no array original, ou -1 se o elemento n\u00e3o for encontrado. <code>filter()</code> Retorna um novo array contendo apenas os elementos do array original que atendem a uma determinada condi\u00e7\u00e3o especificada por uma fun\u00e7\u00e3o de teste. <code>map()</code> Retorna um novo array contendo os resultados da aplica\u00e7\u00e3o de uma fun\u00e7\u00e3o a cada elemento do array original. <code>reduce()</code> Executa uma fun\u00e7\u00e3o em cada elemento do array original, acumulando um valor resultante ao longo do array. <code>forEach()</code> Executa uma fun\u00e7\u00e3o em cada elemento do array original, sem retornar um novo array. <code>some()</code> Retorna <code>true</code> se pelo menos um elemento do array atender a uma determinada condi\u00e7\u00e3o. <code>every()</code> Retorna <code>true</code> se todos os elementos do array atenderem a uma determinada condi\u00e7\u00e3o. <code>find()</code> Retorna o primeiro elemento do array que atende a uma determinada condi\u00e7\u00e3o. <code>findIndex()</code> Retorna o \u00edndice do primeiro elemento do array que atende a uma determinada condi\u00e7\u00e3o. <code>flat()</code> Cria um novo array com todos os elementos de sub-arrays concatenados de forma recursiva at\u00e9 a profundidade especificada. <ul> <li><code>concat()</code>: Este m\u00e9todo retorna um novo array composto pela concatena\u00e7\u00e3o do array original com outros arrays e/ou valores. Por exemplo:</li> </ul> <pre><code>const array1 = [1, 2, 3];\nconst array2 = [4, 5, 6];\nconst arrayConcatenado = array1.concat(array2);\n\nconsole.log(arrayConcatenado); // [1, 2, 3, 4, 5, 6]\n</code></pre> <ul> <li><code>join()</code>: Este m\u00e9todo retorna uma string que cont\u00e9m todos os elementos do array concatenados, separados por um separador especificado. Por exemplo:</li> </ul> <pre><code>const array = ['apple', 'banana', 'orange'];\nconst string = array.join(', ');\n\nconsole.log(string); // \"apple, banana, orange\"\n</code></pre> <ul> <li><code>slice()</code>: Este m\u00e9todo retorna um novo array que \u00e9 uma c\u00f3pia de uma parte do array original, especificada pelos \u00edndices de in\u00edcio e fim. Por exemplo:</li> </ul> <pre><code>const array = ['a', 'b', 'c', 'd', 'e'];\nconst newArray = array.slice(1, 4);\n\nconsole.log(newArray); // [\"b\", \"c\", \"d\"]\n</code></pre> <ul> <li><code>splice()</code>: Este m\u00e9todo adiciona e/ou remove elementos do array original, retornando um novo array com os elementos removidos. Por exemplo:</li> </ul> <pre><code>const array = ['a', 'b', 'c', 'd', 'e'];\nconst removedElements = array.splice(2, 2, 'x', 'y');\n\nconsole.log(array); // [\"a\", \"b\", \"x\", \"y\", \"e\"]\nconsole.log(removedElements); // [\"c\", \"d\"]\n</code></pre> <ul> <li><code>push()</code>: Este m\u00e9todo adiciona um ou mais elementos ao final do array original e retorna o novo tamanho do array. Por exemplo:</li> </ul> <pre><code>const array = ['a', 'b', 'c'];\nconst newLength = array.push('d', 'e');\n\nconsole.log(array); // [\"a\", \"b\", \"c\", \"d\", \"e\"]\nconsole.log(newLength); // 5\n</code></pre> <ul> <li><code>pop()</code>: Este m\u00e9todo remove o \u00faltimo elemento do array original e retorna esse elemento. Por exemplo:</li> </ul> <pre><code>const array = ['a', 'b', 'c'];\nconst lastElement = array.pop();\n\nconsole.log(array); // [\"a\", \"b\"]\nconsole.log(lastElement); // \"c\"\n</code></pre> <ul> <li><code>shift()</code>: Este m\u00e9todo remove o primeiro elemento do array original e retorna esse elemento. Por exemplo:</li> </ul> <pre><code>const array = ['a', 'b', 'c'];\nconst firstElement = array.shift();\n\nconsole.log(array); // [\"b\", \"c\"]\nconsole.log(firstElement); // \"a\"\n</code></pre> <ul> <li><code>unshift()</code>: Este m\u00e9todo adiciona um ou mais elementos no in\u00edcio do array original e retorna o novo tamanho do array. Por exemplo:</li> </ul> <pre><code>const array = ['a', 'b', 'c'];\nconst newLength = array.unshift('x', 'y');\n\nconsole.log(array); // [\"x\", \"y\", \"a\", \"b\", \"c\"]\nconsole.log(newLength); // 5\n</code></pre> <ul> <li><code>indexOf()</code>: Este m\u00e9todo retorna o \u00edndice da primeira ocorr\u00eancia de um elemento no array original, ou -1 se o elemento n\u00e3o for encontrado. Por exemplo:</li> </ul> <pre><code>const array = ['apple', 'banana', 'orange'];\nconst index = array.indexOf('banana');\n\nconsole.log(index); // 1\n</code></pre> <ul> <li><code>lastIndexOf()</code>: Este m\u00e9todo retorna o \u00edndice da \u00faltima ocorr\u00eancia de um elemento no array original, ou -1 se o elemento n\u00e3o for encontrado. Por exemplo:</li> </ul> <pre><code>const array = ['apple', 'banana', 'orange', 'banana'];\nconst index = array.lastIndexOf('banana');\n\nconsole.log(index); // 3\n</code></pre> <ul> <li><code>filter()</code>: Este m\u00e9todo cria um novo array contendo apenas os elementos do array original que passam em um teste especificado por uma fun\u00e7\u00e3o. Por exemplo:</li> </ul> <pre><code>const array = [1, 2, 3, 4, 5];\nconst newArray = array.filter(function(element) {\nreturn element &gt; 3;\n});\n\nconsole.log(newArray); // [4, 5]\n</code></pre> <ul> <li><code>map()</code>: Este m\u00e9todo cria um novo array com os resultados de uma fun\u00e7\u00e3o aplicada a cada elemento do array original. Por exemplo:</li> </ul> <pre><code>const array = [1, 2, 3, 4, 5];\nconst newArray = array.map(function(element) {\nreturn element * 2;\n});\n\nconsole.log(newArray); // [2, 4, 6, 8, 10]\n</code></pre> <ul> <li><code>reduce()</code>: Este m\u00e9todo executa uma fun\u00e7\u00e3o em cada elemento do array original, resultando em um \u00fanico valor de sa\u00edda. Por exemplo:</li> </ul> <pre><code>const array = [1, 2, 3, 4, 5];\nconst sum = array.reduce(function(acc, curr) {\nreturn acc + curr;\n}, 0);\n\nconsole.log(sum); // 15\n</code></pre> <ul> <li><code>forEach()</code>: Este m\u00e9todo executa uma fun\u00e7\u00e3o em cada elemento do array original, sem retornar um novo array. Por exemplo:</li> </ul> <pre><code>const array = ['apple', 'banana', 'orange'];\narray.forEach(function(element) {\nconsole.log(element);\n});\n\n// \"apple\"\n// \"banana\"\n// \"orange\"\n</code></pre> <ul> <li><code>some()</code>: Este m\u00e9todo verifica se pelo menos um elemento do array original passa em um teste especificado por uma fun\u00e7\u00e3o, retornando um valor booleano. Por exemplo:</li> </ul> <pre><code>const array = [1, 2, 3, 4, 5];\nconst hasEven = array.some(function(element) {\nreturn element % 2 === 0;\n});\n\nconsole.log(hasEven); // true\n</code></pre> <ul> <li><code>every()</code>: Este m\u00e9todo verifica se todos os elementos do array original passam em um teste especificado por uma fun\u00e7\u00e3o, retornando um valor booleano. Por exemplo:</li> </ul> <pre><code>const array = [1, 2, 3, 4, 5];\nconst areAllEven = array.every(function(element) {\nreturn element % 2 === 0;\n});\n\nconsole.log(areAllEven); // false\n</code></pre> <ul> <li><code>find()</code>: Este m\u00e9todo retorna o valor do primeiro elemento do array original que passa em um teste especificado por uma fun\u00e7\u00e3o, ou undefined se nenhum elemento passar no teste. Por exemplo:</li> </ul> <pre><code>const array = [1, 2, 3, 4, 5];\nconst even = array.find(function(element) {\nreturn element % 2 === 0;\n});\n\nconsole.log(even); // 2\n</code></pre> <ul> <li><code>findIndex()</code>: Este m\u00e9todo retorna o \u00edndice do primeiro elemento do array original que passa em um teste especificado por uma fun\u00e7\u00e3o, ou -1 se nenhum elemento passar no teste. Por exemplo:</li> </ul> <pre><code>const array = [1, 2, 3, 4, 5];\nconst index = array.findIndex(function(element) {\nreturn element % 2 === 0;\n});\n\nconsole.log(index); // 1\n</code></pre> <ul> <li><code>flat()</code>: Cria um novo array com todos os elementos de sub-arrays concatenados de forma recursiva at\u00e9 a profundidade especificada.</li> </ul> <pre><code>const myArray = [1, [2, 3], [[4, 5], 6]];\nconst flattenedArray = myArray.flat(2);\nconsole.log(flattenedArray); // [1, 2, 3, 4, 5, 6]\n</code></pre> <p>Esses s\u00e3o apenas alguns exemplos dos m\u00e9todos dispon\u00edveis para manipula\u00e7\u00e3o de arrays em JavaScript. \u00c9 importante lembrar que alguns desses m\u00e9todos modificam o array original, enquanto outros criam um novo array. Al\u00e9m disso, esses m\u00e9todos podem ser combinados e encadeados para realizar opera\u00e7\u00f5es mais complexas. H\u00e1 muitas outras fun\u00e7\u00f5es dispon\u00edveis que voc\u00ea pode explorar na documenta\u00e7\u00e3o do JavaScript.</p>"},{"location":"javascript/_04_Classes-e-objetos-defini%C3%A7%C3%A3o-e-instancia%C3%A7%C3%A3o/","title":"04 Classes e objetos defini\u00e7\u00e3o e instancia\u00e7\u00e3o","text":""},{"location":"javascript/_04_Classes-e-objetos-defini%C3%A7%C3%A3o-e-instancia%C3%A7%C3%A3o/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>A programa\u00e7\u00e3o orientada a objetos (POO) \u00e9 um paradigma de programa\u00e7\u00e3o em que os objetos s\u00e3o os principais componentes. Em POO, os objetos s\u00e3o criados a partir de classes, que s\u00e3o como \"plantas baixas\" para os objetos. Uma classe define as propriedades e os m\u00e9todos que um objeto pode ter. Em JavaScript, podemos criar classes e objetos usando a sintaxe de classe.</p>"},{"location":"javascript/_04_Classes-e-objetos-defini%C3%A7%C3%A3o-e-instancia%C3%A7%C3%A3o/#definicao-de-classe","title":"Defini\u00e7\u00e3o de classe","text":"<p>Para criar uma classe em JavaScript, usamos a palavra-chave <code>class</code>. No exemplo abaixo, definimos uma classe chamada <code>Carro</code>. A classe tem um construtor que inicializa as propriedades marca, modelo e ano. Tamb\u00e9m definimos um m\u00e9todo acelerar, que simplesmente imprime uma mensagem no console.</p> <pre><code>class Carro {\nconstructor(marca, modelo, ano) {\nthis.marca = marca;\nthis.modelo = modelo;\nthis.ano = ano;\n}\n\nacelerar() {\nconsole.log(`O ${this.modelo} est\u00e1 acelerando!`);\n}\n}\n</code></pre> <p>Neste exemplo, definimos uma classe chamada <code>Carro</code>. A classe tem um construtor que inicializa as propriedades <code>marca</code>, <code>modelo</code> e <code>ano</code>. Tamb\u00e9m definimos um m\u00e9todo <code>acelerar</code>, que simplesmente \u00e9 uma fun\u00e7\u00e3o que \u00e9 definida dentro de uma classe e pode ser invocada em inst\u00e2ncias dessa classe. As classes s\u00e3o uma sintaxe de programa\u00e7\u00e3o orientada a objetos introduzida no ECMAScript 2015 (ES6) e fornecem uma maneira mais clara e f\u00e1cil de criar objetos em JavaScript.</p>"},{"location":"javascript/_04_Classes-e-objetos-defini%C3%A7%C3%A3o-e-instancia%C3%A7%C3%A3o/#instanciacao-de-objetos","title":"Instancia\u00e7\u00e3o de objetos","text":"<p>Uma inst\u00e2ncia de classe em JavaScript \u00e9 um objeto criado a partir de uma classe. Quando voc\u00ea instancia uma classe, voc\u00ea est\u00e1 criando um novo objeto que herda os m\u00e9todos e propriedades da classe. Em outras palavras, uma inst\u00e2ncia de classe \u00e9 uma c\u00f3pia \u00fanica da classe que cont\u00e9m seus pr\u00f3prios valores de propriedades.</p> <p>Para criar uma inst\u00e2ncia da classe <code>Carro</code>, usamos a palavra-chave <code>new</code>. Aqui est\u00e1 um exemplo:</p> <pre><code>let meuCarro = new Carro(\"Ford\", \"Mustang\", 2022);\n</code></pre> <p>Neste exemplo, criamos um novo objeto <code>meuCarro</code> que \u00e9 uma inst\u00e2ncia da classe <code>Carro</code>. Passamos tr\u00eas argumentos para o construtor da classe para definir as propriedades do carro.</p> <p>Podemos acessar as propriedades e m\u00e9todos do objeto da seguinte maneira:</p> <pre><code>console.log(meuCarro.marca); // Ford\nconsole.log(meuCarro.acelerar()); // O Mustang est\u00e1 acelerando!\n</code></pre>"},{"location":"javascript/_04_Classes-e-objetos-defini%C3%A7%C3%A3o-e-instancia%C3%A7%C3%A3o/#encapsulamento","title":"Encapsulamento","text":"<p>O encapsulamento \u00e9 o conceito de ocultar a complexidade de implementa\u00e7\u00e3o de um objeto e expor apenas o que \u00e9 necess\u00e1rio para o uso externo. Em JavaScript, n\u00e3o h\u00e1 suporte nativo para encapsulamento, mas \u00e9 poss\u00edvel simular esse conceito usando fun\u00e7\u00f5es construtoras e closures.</p> <p>Aqui est\u00e1 um exemplo de como podemos simular o encapsulamento em JavaScript:</p> <pre><code>function ContaBancaria(saldoInicial) {\nlet saldo = saldoInicial;\n\nthis.getSaldo = function() {\nreturn saldo;\n};\n\nthis.depositar = function(valor) {\nsaldo += valor;\n};\n\nthis.sacar = function(valor) {\nif (saldo &gt;= valor) {\nsaldo -= valor;\n} else {\nconsole.log(\"Saldo insuficiente\");\n}\n};\n}\n\nlet minhaConta = new ContaBancaria(1000);\n\nconsole.log(minhaConta.getSaldo()); // 1000\n\nminhaConta.depositar(500);\n\nconsole.log(minhaConta.getSaldo()); // 1500\n\nminhaConta.sacar(2000); // Saldo insuficiente\n\nminhaConta.sacar(1000);\n\nconsole.log(minhaConta.getSaldo()); // 500\n</code></pre> <p>Neste exemplo, temos uma fun\u00e7\u00e3o construtora <code>ContaBancaria</code> que simula uma conta banc\u00e1ria. A vari\u00e1vel <code>saldo</code> \u00e9 declarada dentro da fun\u00e7\u00e3o e n\u00e3o \u00e9 exposta ao c\u00f3digo externo. Em vez disso, expomos m\u00e9todos p\u00fablicos para acessar e manipular o saldo da conta banc\u00e1ria: <code>getSaldo</code>, <code>depositar</code> e <code>sacar</code>.</p>"},{"location":"javascript/_04_Classes-e-objetos-defini%C3%A7%C3%A3o-e-instancia%C3%A7%C3%A3o/#heranca","title":"Heran\u00e7a","text":"<p>Heran\u00e7a \u00e9 um conceito importante na programa\u00e7\u00e3o orientada a objetos, e em JavaScript podemos implement\u00e1-lo usando a palavra-chave <code>extends</code>. Quando uma classe estende outra classe, ela herda suas propriedades e m\u00e9todos. Aqui est\u00e1 um exemplo:</p> <pre><code>class Animal {\nconstructor(nome) {\nthis.nome = nome;\n}\n\nfazerBarulho() {\nconsole.log(`${this.nome} est\u00e1 fazendo barulho.`);\n}\n}\n\nclass Cachorro extends Animal {\nconstructor(nome, raca) {\nsuper(nome);\nthis.raca = raca;\n}\n\nlatir() {\nconsole.log(`${this.nome} (${this.raca}) est\u00e1 latindo.`);\n}\n}\n</code></pre> <p>Neste exemplo, temos duas classes: <code>Animal</code> e <code>Cachorro</code>. A classe <code>Cachorro</code> estende a classe <code>Animal</code> usando a palavra-chave <code>extends</code>. Isso significa que a classe <code>Cachorro</code> herda a propriedade <code>nome</code> e o m\u00e9todo <code>fazerBarulho</code> da classe <code>Animal</code>.</p> <p>Al\u00e9m disso, a classe <code>Cachorro</code> tem sua pr\u00f3pria propriedade <code>raca</code> e seu pr\u00f3prio m\u00e9todo <code>latir</code>. Observe que o m\u00e9todo <code>latir</code> usa a propriedade <code>nome</code> da classe <code>Animal</code>, bem como a propriedade <code>raca</code> da classe <code>Cachorro</code>.</p> <p>Agora, vamos criar um objeto <code>meuCachorro</code> que \u00e9 uma inst\u00e2ncia da classe <code>Cachorro</code>:</p> <pre><code>let meuCachorro = new Cachorro(\"Fido\", \"Labrador Retriever\");\n</code></pre> <p>Podemos acessar as propriedades e m\u00e9todos do objeto da seguinte maneira:</p> <pre><code>console.log(meuCachorro.nome); // Fido\nconsole.log(meuCachorro.raca); // Labrador Retriever\nconsole.log(meuCachorro.fazerBarulho()); // Fido est\u00e1 fazendo barulho.\nconsole.log(meuCachorro.latir()); // Fido (Labrador Retriever) est\u00e1 latindo.\n</code></pre>"},{"location":"javascript/_04_Classes-e-objetos-defini%C3%A7%C3%A3o-e-instancia%C3%A7%C3%A3o/#polimorfismo","title":"Polimorfismo","text":"<p>Polimorfismo \u00e9 outro conceito importante na programa\u00e7\u00e3o orientada a objetos. Em JavaScript, podemos implementar o polimorfismo usando a mesma assinatura de m\u00e9todo em v\u00e1rias classes diferentes. Aqui est\u00e1 um exemplo:</p> <pre><code>class Animal {\nconstructor(nome) {\nthis.nome = nome;\n}\n\nfazerBarulho() {\nconsole.log(`${this.nome} est\u00e1 fazendo barulho.`);\n}\n}\n\nclass Cachorro extends Animal {\nconstructor(nome, raca) {\nsuper(nome);\nthis.raca = raca;\n}\n\nfazerBarulho() {\nconsole.log(`${this.nome} (${this.raca}) est\u00e1 latindo.`);\n}\n}\n\nclass Gato extends Animal {\nconstructor(nome, cor) {\nsuper(nome);\nthis.cor = cor;\n}\n\nfazerBarulho() {\nconsole.log(`${this.nome} (${this.cor}) est\u00e1 miando.`);\n}\n}\n</code></pre> <p>Neste exemplo, temos tr\u00eas classes: <code>Animal</code>, <code>Cachorro</code> e <code>Gato</code>. Todas essas classes t\u00eam um m\u00e9todo <code>fazerBarulho</code>, mas cada uma delas o implementa de maneira diferente. Quando chamamos o m\u00e9todo <code>fazerBarulho</code> em um objeto, o JavaScript chama o m\u00e9todo correto, dependendo do tipo do objeto.</p> <p>Agora, vamos criar um exemplo de uso do polimorfismo com as classes <code>Cachorro</code> e <code>Gato</code>:</p> <pre><code>const cachorro = new Cachorro('Rex', 'Golden Retriever');\nconst gato = new Gato('Miau', 'preto');\n\ncachorro.fazerBarulho(); // Sa\u00edda: \"Rex (Golden Retriever) est\u00e1 latindo.\"\ngato.fazerBarulho(); // Sa\u00edda: \"Miau (preto) est\u00e1 miando.\"\n</code></pre> <p>Observe que mesmo chamando o mesmo m\u00e9todo <code>fazerBarulho</code>, a sa\u00edda \u00e9 diferente para cada objeto, pois cada classe implementa esse m\u00e9todo de forma diferente.</p>"},{"location":"javascript/_04_Classes-e-objetos-defini%C3%A7%C3%A3o-e-instancia%C3%A7%C3%A3o/#metodos-estaticos","title":"M\u00e9todos est\u00e1ticos","text":"<p>Em JavaScript, tamb\u00e9m podemos definir m\u00e9todos est\u00e1ticos em uma classe. M\u00e9todos est\u00e1ticos s\u00e3o m\u00e9todos que pertencem \u00e0 classe em si, em vez de pertencerem a uma inst\u00e2ncia da classe. Aqui est\u00e1 um exemplo:</p> <pre><code>class Utilitarios {\nstatic formatarNumero(numero) {\nreturn numero.toLocaleString(\"pt-BR\");\n}\n}\n\nconsole.log(Utilitarios.formatarNumero(1000)); // 1.000\n</code></pre> <p>Neste exemplo, definimos um m\u00e9todo est\u00e1tico chamado <code>formatarNumero</code> na classe <code>Utilitarios</code>. Esse m\u00e9todo n\u00e3o \u00e9 acess\u00edvel a partir de inst\u00e2ncias da classe, apenas a partir da pr\u00f3pria classe.</p> <ul> <li>A programa\u00e7\u00e3o orientada a objetos \u00e9 um paradigma importante para a escrita de c\u00f3digo estruturado e reutiliz\u00e1vel. Em JavaScript, podemos utilizar classes, heran\u00e7a, encapsulamento, polimorfismo e outros conceitos da orienta\u00e7\u00e3o a objetos para criar c\u00f3digo mais leg\u00edvel e organizado. Com esses conceitos em mente, podemos criar solu\u00e7\u00f5es mais eficientes e escal\u00e1veis para nossos projetos em JavaScript.</li> </ul>"},{"location":"javascript/_04_Classes-e-objetos-defini%C3%A7%C3%A3o-e-instancia%C3%A7%C3%A3o/#pacotes","title":"Pacotes","text":"<p>Um pacote em JavaScript \u00e9 um conjunto de c\u00f3digo que pode ser facilmente compartilhado entre projetos. Se voc\u00ea est\u00e1 trabalhando em um projeto que usa um conjunto de funcionalidades que voc\u00ea gostaria de reutilizar em outros projetos, pode ser \u00fatil criar um pacote para essas funcionalidades. Neste artigo, vamos ver como criar um pacote em JavaScript para uso interno, ou seja, que n\u00e3o ser\u00e1 publicado no registro de pacotes do NPM.</p> <p>O primeiro passo para criar um pacote em JavaScript \u00e9 criar uma nova pasta com o nome que desejar para o seu pacote. Voc\u00ea pode criar essa pasta em qualquer lugar do seu computador. Por exemplo, voc\u00ea pode criar uma pasta chamada \"meu-pacote\" em sua \u00e1rea de trabalho.</p> <p>Dentro da pasta que voc\u00ea acabou de criar, execute o comando \"npm init\" no terminal. Isso ir\u00e1 criar um arquivo \"package.json\" para gerenciar as depend\u00eancias do seu pacote. Siga as instru\u00e7\u00f5es na linha de comando para preencher as informa\u00e7\u00f5es do seu pacote, como o nome, vers\u00e3o, descri\u00e7\u00e3o, etc. Essas informa\u00e7\u00f5es podem ser alteradas posteriormente.</p> <pre><code>cd meu-pacote\nnpm init\n</code></pre> <p>Agora que o projeto est\u00e1 inicializado, \u00e9 hora de come\u00e7ar a escrever o c\u00f3digo que voc\u00ea deseja incluir no pacote. Este pode ser um \u00fanico arquivo ou v\u00e1rios arquivos em um diret\u00f3rio. Para este exemplo, vamos criar uma fun\u00e7\u00e3o simples que calcula a soma de dois n\u00fameros.</p> <p>Crie um novo arquivo chamado \"minhas-funcoes.js\" dentro da pasta \"meu-pacote\" e adicione o seguinte c\u00f3digo:</p> <pre><code>module.exports = {\nsoma: function(a, b) {\nreturn a + b;\n}\n};\n</code></pre> <p>Crie um arquivo \"index.js\" na raiz da pasta do seu pacote. Este arquivo ser\u00e1 a entrada do seu pacote e ir\u00e1 exportar as funcionalidades que voc\u00ea deseja disponibilizar. No nosso caso, vamos exportar a fun\u00e7\u00e3o \"soma\" que acabamos de criar.</p> <pre><code>const minhasFuncoes = require('./minhas-funcoes');\n\nmodule.exports = {\nsoma: minhasFuncoes.soma\n};\n</code></pre> <p>Agora que voc\u00ea criou o pacote, \u00e9 hora de test\u00e1-lo. Para fazer isso, crie um novo projeto em um diret\u00f3rio separado e adicione o seu pacote como uma depend\u00eancia.</p> <pre><code>mkdir meu-projeto\ncd meu-projeto\nnpm init\nnpm install ../meu-pacote\n</code></pre> <p>Em seguida, crie um arquivo \"index.js\" em seu novo projeto e importe a fun\u00e7\u00e3o \"soma\" do seu pacote.</p> <pre><code>const meuPacote = require('meu-pacote');\n\nconsole.log(meuPacote.soma(2, 3)); // Output: 5\n</code></pre> <p>Execute o arquivo \"index.js\" usando o Node.js.</p> <pre><code>node index.js\n</code></pre> <p>Se o output for \"5\", isso significa que o seu pacote est\u00e1 funcionando corretamente.</p> <p>Criar um pacote em JavaScript pode ser uma maneira \u00fatil de reutilizar c\u00f3digo em v\u00e1rios projetos. Neste artigo, voc\u00ea aprendeu a criar um pacote em JavaScript para uso interno, sem public\u00e1-lo no registro de pacotes do NPM. Lembre-se de que este \u00e9 apenas um exemplo simples e que h\u00e1 muitas maneiras de criar pacotes mais complexos e robustos em JavaScript.</p>"},{"location":"javascript/_05_TypeScript/","title":"05 TypeScript","text":""},{"location":"javascript/_05_TypeScript/#typescript","title":"TypeScript","text":"<p>TypeScript \u00e9 um superset do JavaScript que adiciona recursos de tipagem est\u00e1tica e outras funcionalidades \u00e0 linguagem. Ele foi desenvolvido pela Microsoft e \u00e9 uma escolha popular para grandes projetos JavaScript.</p>"},{"location":"javascript/_05_TypeScript/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Para come\u00e7ar a usar TypeScript, voc\u00ea precisa configurar um ambiente de desenvolvimento. Voc\u00ea pode instalar o TypeScript globalmente usando o npm com o seguinte comando:</p> <pre><code>npm install -g typescript\n</code></pre> <p>Depois de instalado, voc\u00ea pode criar um arquivo <code>.ts</code> e compil\u00e1-lo usando o comando <code>tsc</code>. Por exemplo, crie um arquivo <code>app.ts</code> com o seguinte c\u00f3digo:</p> <pre><code>function dizerOla(nome: string) {\nconsole.log(`Ol\u00e1, ${nome}!`);\n}\n\ndizerOla('TypeScript'); // Ol\u00e1, TypeScript!\n</code></pre> <p>Em seguida, compile o arquivo <code>app.ts</code> usando o comando <code>tsc app.ts</code>. Isso ir\u00e1 gerar um arquivo <code>app.js</code> que pode ser executado normalmente no Node.js ou em um navegador.</p>"},{"location":"javascript/_05_TypeScript/#tipos-basicos","title":"Tipos b\u00e1sicos","text":"<p>Uma das principais funcionalidades do TypeScript \u00e9 a tipagem est\u00e1tica. Isso significa que voc\u00ea pode especificar o tipo de dados que uma vari\u00e1vel pode armazenar e o TypeScript ir\u00e1 verificar se voc\u00ea est\u00e1 usando a vari\u00e1vel corretamente em tempo de compila\u00e7\u00e3o. Aqui est\u00e3o alguns tipos b\u00e1sicos em TypeScript:</p> <pre><code>// N\u00fameros\nlet numero: number = 10;\n\n// Strings\nlet texto: string = 'Ol\u00e1';\n\n// Booleanos\nlet booleano: boolean = true;\n\n// Arrays\nlet lista: number[] = [1, 2, 3];\nlet lista2: Array&lt;string&gt; = ['a', 'b', 'c'];\n\n// Tuplas\nlet tupla: [string, number] = ['ol\u00e1', 10];\n\n// Enums\nenum Cor {\nVermelho,\nVerde,\nAzul,\n}\nlet cor: Cor = Cor.Vermelho;\n\n// Any\nlet qualquerValor: any = 'ol\u00e1';\n</code></pre> <p>Observe que voc\u00ea pode usar a sintaxe <code>let nomeVariavel: tipoVariavel = valor</code> para especificar o tipo de uma vari\u00e1vel.</p>"},{"location":"javascript/_05_TypeScript/#funcoes","title":"Fun\u00e7\u00f5es","text":"<p>As fun\u00e7\u00f5es em TypeScript podem ter tipos de argumento e tipo de retorno especificados. Aqui est\u00e1 um exemplo:</p> <pre><code>function somar(valor1: number, valor2: number): number {\nreturn valor1 + valor2;\n}\n</code></pre> <p>Observe que o tipo de retorno \u00e9 especificado ap\u00f3s os tipos dos argumentos usando a sintaxe <code>function nomeFuncao(arg1: tipoArg1, arg2: tipoArg2): tipoRetorno</code>.</p>"},{"location":"javascript/_05_TypeScript/#interfaces","title":"Interfaces","text":"<p>As interfaces s\u00e3o uma maneira de definir tipos personalizados em TypeScript. Por exemplo, voc\u00ea pode definir uma interface para um objeto com propriedades espec\u00edficas:</p> <pre><code>interface Pessoa {\nnome: string;\nidade: number;\n}\n\nfunction cumprimentar(pessoa: Pessoa) {\nconsole.log(`Ol\u00e1, ${pessoa.nome}! Voc\u00ea tem ${pessoa.idade} anos.`);\n}\n\nlet alice: Pessoa = { nome: 'Alice', idade: 30 };\ncumprimentar(alice); // Ol\u00e1, Alice! Voc\u00ea tem 30 anos.\n</code></pre> <p>Observe que a fun\u00e7\u00e3o <code>cumprimentar</code> espera um objeto do tipo <code>Pessoa</code>.</p>"},{"location":"javascript/_05_TypeScript/#classes","title":"Classes","text":"<p>As classes em TypeScript permitem definir objetos com propriedades e m\u00e9todos. Aqui est\u00e1 um exemplo:</p> <pre><code>class Animal {\nnome: string;\nconstructor(nome: string) {\nthis.nome = nome;\n}\nfazerBarulho() {\nconsole.log('Barulho gen\u00e9rico de animal');\n}\n}\n\nclass Cachorro extends Animal {\nfazerBarulho() {\nconsole.log('Au au!');\n}\n}\n\nlet cachorro: Cachorro = new Cachorro('Rex');\nconsole.log(cachorro.nome); // 'Rex'\ncachorro.fazerBarulho(); // 'Au au!'\n</code></pre> <p>Observe que a classe <code>Cachorro</code> herda da classe <code>Animal</code> usando a sintaxe <code>class nomeClasse extends nomeClassePai</code>. A classe <code>Cachorro</code> sobrescreve o m\u00e9todo <code>fazerBarulho</code> da classe <code>Animal</code>.</p>"},{"location":"javascript/_06_Projeto-Pr%C3%A1tico/","title":"06 Projeto Pr\u00e1tico","text":""},{"location":"javascript/_06_Projeto-Pr%C3%A1tico/#projeto-pratico","title":"Projeto Pr\u00e1tico","text":"<p>JavaScript \u00e9 uma das linguagens de programa\u00e7\u00e3o mais utilizadas no mundo, principalmente no desenvolvimento de aplica\u00e7\u00f5es web. Como programador(a) em JavaScript, \u00e9 importante sempre buscar desafios para melhorar suas habilidades e aprimorar seus conhecimentos na linguagem.</p> <p>Implemente uma calculadora simples em JavaScript que pode realizar opera\u00e7\u00f5es b\u00e1sicas, como adi\u00e7\u00e3o, subtra\u00e7\u00e3o, multiplica\u00e7\u00e3o e divis\u00e3o, e ao final imprima em tela o resultado da opera\u00e7\u00e3o.</p> <p>Exemplos:</p>"},{"location":"javascript/_06_Projeto-Pr%C3%A1tico/#calculadora","title":"Calculadora","text":"<p>O c\u00f3digo a seguir define a fun\u00e7\u00e3o <code>calcular</code> que recebe dois n\u00fameros (<code>valor1</code> e <code>valor2</code>) e um operador (<code>operador</code>) e retorna o resultado da opera\u00e7\u00e3o especificada pelo operador. O c\u00f3digo usa um <code>switch</code> para verificar qual \u00e9 o operador e realizar a opera\u00e7\u00e3o apropriada.</p> <p>Em seguida, o c\u00f3digo pede para o usu\u00e1rio digitar os n\u00fameros e o operador usando a fun\u00e7\u00e3o <code>prompt</code> e chama a fun\u00e7\u00e3o <code>calcular</code> para obter o resultado. Finalmente, o c\u00f3digo usa a fun\u00e7\u00e3o <code>console.log</code> para imprimir o resultado no console do navegador ou do Node.js.</p> <pre><code>// Define a fun\u00e7\u00e3o de c\u00e1lculo\nfunction calcular(valor1, valor2, operador) {\nlet resultado;\n\nswitch (operador) {\ncase \"+\":\nresultado = valor1 + valor2;\nbreak;\ncase \"-\":\nresultado = valor1 - valor2;\nbreak;\ncase \"*\":\nresultado = valor1 * valor2;\nbreak;\ncase \"/\":\nresultado = valor1 / valor2;\nbreak;\ndefault:\nresultado = \"Operador inv\u00e1lido\";\n}\n\nreturn resultado;\n}\n\n// Pede para o usu\u00e1rio digitar os n\u00fameros e o operador\nlet valor1 = Number(prompt(\"Digite o primeiro n\u00famero:\"));\nlet valor2 = Number(prompt(\"Digite o segundo n\u00famero:\"));\nlet operador = prompt(\"Digite o operador (+, -, *, /):\");\n\n// Chama a fun\u00e7\u00e3o de c\u00e1lculo e imprime o resultado\nlet resultado = calcular(valor1, valor2, operador);\nconsole.log(`O resultado da opera\u00e7\u00e3o \u00e9: ${resultado}`);\n</code></pre> <p>Voc\u00ea pode personalizar este exemplo adicionando mais opera\u00e7\u00f5es ou melhorando a interface do usu\u00e1rio para torn\u00e1-la mais amig\u00e1vel.</p> <p>O mesmo exemplo utilizando Typescript:</p> <pre><code>// Define a fun\u00e7\u00e3o de c\u00e1lculo\nfunction calcular(valor1: number, valor2: number, operador: string): number | string {\nlet resultado: number | string;\n\nswitch (operador) {\ncase \"+\":\nresultado = valor1 + valor2;\nbreak;\ncase \"-\":\nresultado = valor1 - valor2;\nbreak;\ncase \"*\":\nresultado = valor1 * valor2;\nbreak;\ncase \"/\":\nresultado = valor1 / valor2;\nbreak;\ndefault:\nresultado = \"Operador inv\u00e1lido\";\n}\n\nreturn resultado;\n}\n\n// Pede para o usu\u00e1rio digitar os n\u00fameros e o operador\nlet valor1 = Number(prompt(\"Digite o primeiro n\u00famero:\"));\nlet valor2 = Number(prompt(\"Digite o segundo n\u00famero:\"));\nlet operador = prompt(\"Digite o operador (+, -, *, /):\");\n\n// Chama a fun\u00e7\u00e3o de c\u00e1lculo e imprime o resultado\nlet resultado = calcular(valor1, valor2, operador);\nconsole.log(`O resultado da opera\u00e7\u00e3o \u00e9: ${resultado}`);\n</code></pre> <p>Este c\u00f3digo \u00e9 semelhante ao exemplo anterior em JavaScript, mas com a adi\u00e7\u00e3o de tipos de dados expl\u00edcitos para as vari\u00e1veis e para os par\u00e2metros e retorno da fun\u00e7\u00e3o.</p> <p>Al\u00e9m disso, a vari\u00e1vel <code>resultado</code> agora pode ser do tipo <code>number</code> ou <code>string</code>, pois a fun\u00e7\u00e3o pode retornar uma mensagem de erro quando o operador \u00e9 inv\u00e1lido. Para indicar isso, usei a sintaxe <code>number | string</code>, que significa que a vari\u00e1vel pode ser do tipo <code>number</code> ou do tipo <code>string</code>.</p> <p>Note que este c\u00f3digo tamb\u00e9m precisa ser compilado antes de ser executado em um ambiente JavaScript. Voc\u00ea pode fazer isso usando o compilador TypeScript, que pode ser instalado usando o comando <code>npm install -g typescript</code> no terminal. Em seguida, execute o comando <code>tsc arquivo.ts</code> para compilar o c\u00f3digo TypeScript e gerar um arquivo JavaScript. Depois disso, voc\u00ea pode executar o arquivo JavaScript normalmente em um ambiente Node.js ou em um navegador.</p>"},{"location":"javascript/_06_Projeto-Pr%C3%A1tico/#desafio","title":"Desafio","text":"<p>Crie uma alternativa ao c\u00f3digo da calculadora em JavaScript utilizando <code>if</code> em vez de <code>switch</code></p>"},{"location":"javascript/_07_Resoluc%C3%A3o-desafio/","title":"07 Resoluc\u00e3o desafio","text":""},{"location":"javascript/_07_Resoluc%C3%A3o-desafio/#resolucao-desafio","title":"Resolu\u00e7\u00e3o desafio","text":"<pre><code>// Define a fun\u00e7\u00e3o de c\u00e1lculo\nfunction calcular(valor1, valor2, operador) {\nlet resultado;\n\nif (operador === \"+\") {\nresultado = valor1 + valor2;\n} else if (operador === \"-\") {\nresultado = valor1 - valor2;\n} else if (operador === \"*\") {\nresultado = valor1 * valor2;\n} else if (operador === \"/\") {\nresultado = valor1 / valor2;\n} else {\nresultado = \"Operador inv\u00e1lido\";\n}\n\nreturn resultado;\n}\n\n// Pede para o usu\u00e1rio digitar os n\u00fameros e o operador\nlet valor1 = Number(prompt(\"Digite o primeiro n\u00famero:\"));\nlet valor2 = Number(prompt(\"Digite o segundo n\u00famero:\"));\nlet operador = prompt(\"Digite o operador (+, -, *, /):\");\n\n// Chama a fun\u00e7\u00e3o de c\u00e1lculo e imprime o resultado\nlet resultado = calcular(valor1, valor2, operador);\nconsole.log(`O resultado da opera\u00e7\u00e3o \u00e9: ${resultado}`);\n</code></pre> <p>Este c\u00f3digo \u00e9 semelhante aos exemplos anteriores, mas usa declara\u00e7\u00f5es <code>if</code> em vez de <code>switch</code> para verificar qual \u00e9 o operador e realizar a opera\u00e7\u00e3o apropriada.</p> <p>Note que a estrutura do c\u00f3digo \u00e9 um pouco diferente do c\u00f3digo <code>switch</code> anterior, pois as declara\u00e7\u00f5es <code>if</code> s\u00e3o aninhadas em vez de estarem em um bloco \u00fanico. Al\u00e9m disso, a declara\u00e7\u00e3o <code>else</code> \u00e9 usada para tratar o caso em que o operador \u00e9 inv\u00e1lido.</p> <p>Voc\u00ea pode personalizar este exemplo adicionando mais opera\u00e7\u00f5es ou melhorando a interface do usu\u00e1rio para torn\u00e1-la mais amig\u00e1vel.</p>"},{"location":"nodeJs/","title":"Introdu\u00e7\u00e3o ao Node.js","text":"<p>O Node.js \u00e9 uma plataforma de desenvolvimento de software criada para permitir que os desenvolvedores possam escrever aplicativos em JavaScript tanto no lado do cliente quanto no lado do servidor. Ele usa a linguagem JavaScript, originalmente desenvolvida para navegadores web, para criar aplicativos web escal\u00e1veis e em tempo real, bem como aplicativos de rede complexos.</p>"},{"location":"nodeJs/#apliacoes-tipicas-do-nodejs","title":"Aplia\u00e7\u00f5es t\u00edpicas do Node.js","text":"<p>O Node.js \u00e9 capaz de lidar com uma ampla gama de casos de uso, incluindo:</p>"},{"location":"nodeJs/#desenvolvimento-de-aplicativos-web","title":"Desenvolvimento de aplicativos web","text":"<p>Com o Node.js, os desenvolvedores podem criar aplicativos web escal\u00e1veis e em tempo real. O Node.js \u00e9 frequentemente usado em conjunto com frameworks como o Express.js, Koa.js e Hapi.js. Esses frameworks permitem que os desenvolvedores criem aplicativos web com recursos avan\u00e7ados, como comunica\u00e7\u00e3o em tempo real, streaming de dados e escalabilidade horizontal.</p>"},{"location":"nodeJs/#desenvolvimento-de-aplicativos-de-rede","title":"Desenvolvimento de aplicativos de rede","text":"<p>O Node.js \u00e9 frequentemente usado para criar aplicativos de rede, como servidores de jogos, servidores de chat, servidores de streaming de v\u00eddeo e aplicativos de compartilhamento de arquivos. Com sua arquitetura orientada a eventos e I/O ass\u00edncrono, o Node.js \u00e9 capaz de lidar com muitas conex\u00f5es simult\u00e2neas e escalonar facilmente para lidar com grandes cargas de trabalho.</p>"},{"location":"nodeJs/#automacao-de-tarefas","title":"Automa\u00e7\u00e3o de tarefas","text":"<p>O Node.js pode ser usado para criar scripts de automa\u00e7\u00e3o de tarefas, como compila\u00e7\u00e3o de c\u00f3digo, minifica\u00e7\u00e3o de arquivos e implanta\u00e7\u00e3o de aplicativos. Com o Node.js, os desenvolvedores podem criar scripts personalizados que automatizam tarefas repetitivas, economizando tempo e aumentando a efici\u00eancia.</p>"},{"location":"nodeJs/#desenvolvimento-de-aplicativos-de-desktop","title":"Desenvolvimento de aplicativos de desktop","text":"<p>O Node.js tamb\u00e9m pode ser usado para criar aplicativos de desktop multiplataforma usando frameworks como o Electron.js. Com o Node.js, os desenvolvedores podem criar aplicativos desktop usando tecnologias web, como HTML, CSS e JavaScript, e empacot\u00e1-los em um execut\u00e1vel que pode ser executado em diferentes sistemas operacionais.</p>"},{"location":"nodeJs/_01_Introdu%C3%A7%C3%A3o-a-API/","title":"01 Introdu\u00e7\u00e3o a API","text":""},{"location":"nodeJs/_01_Introdu%C3%A7%C3%A3o-a-API/#introducao-a-api","title":"Introdu\u00e7\u00e3o a API","text":"<p>Uma API (Application Programming Interface) \u00e9 uma interface que permite a comunica\u00e7\u00e3o entre diferentes componentes de software. Ela fornece um conjunto de regras, protocolos e ferramentas para que as aplica\u00e7\u00f5es possam interagir entre si, consumindo dados, servi\u00e7os ou recursos.</p> <p>\u00c9 bastante comum utilizar uma API para consultar uma base de dados. Muitos aplicativos e servi\u00e7os utilizam APIs para acessar informa\u00e7\u00f5es de bancos de dados e disponibiliz\u00e1-las para outros aplicativos.</p> <pre><code>sequenceDiagram\n    participant Cliente\n    participant API\n    participant Database\n    Cliente-&gt;&gt;API: Envio de requisi\u00e7\u00e3o\n    API-&gt;&gt;Database: Processamento da requisi\u00e7\u00e3o\n    Database-&gt;&gt;API: Resposta da requisi\u00e7\u00e3o\n    API-&gt;&gt;Cliente: Envio da resposta</code></pre> <ul> <li>O Cliente envia uma requisi\u00e7\u00e3o para a API, representado pela seta \"Envio de requisi\u00e7\u00e3o\" que vai at\u00e9 a API.</li> <li> <p>A API, por sua vez, processa a requisi\u00e7\u00e3o e a envia para o Database (um servidor de dados), representado pela seta \"Processamento da requisi\u00e7\u00e3o\" que vai da API at\u00e9 o Database.</p> </li> <li> <p>O Database processa a requisi\u00e7\u00e3o e envia uma resposta para a API, representado pela seta \"Resposta da requisi\u00e7\u00e3o\" que vai do Database at\u00e9 a API. Finalmente, a API envia a resposta de volta para o cliente, representado pela seta \"Envio da resposta\" que vai da API at\u00e9 o cliente.</p> </li> </ul> <p>A import\u00e2ncia das APIs tem crescido exponencialmente com a evolu\u00e7\u00e3o da web e a prolifera\u00e7\u00e3o de plataformas e dispositivos diferentes. Hoje, existem milh\u00f5es de APIs dispon\u00edveis publicamente, que oferecem uma variedade de servi\u00e7os e recursos, desde dados meteorol\u00f3gicos at\u00e9 transa\u00e7\u00f5es financeiras.</p> <p>Vamos explorar o conceito de API em mais detalhes, analisando as diferentes categorias de APIs e suas caracter\u00edsticas. Tamb\u00e9m vamos discutir como as APIs podem ser usadas para criar sistemas distribu\u00eddos e como o Node.js pode ser uma op\u00e7\u00e3o vi\u00e1vel para implementar APIs RESTful.</p>"},{"location":"nodeJs/_01_Introdu%C3%A7%C3%A3o-a-API/#tipos-de-apis","title":"Tipos de APIs","text":"<p>As APIs podem ser classificadas em diferentes tipos, dependendo de sua finalidade e funcionalidade. Algumas das categorias mais comuns incluem:</p>"},{"location":"nodeJs/_01_Introdu%C3%A7%C3%A3o-a-API/#api-de-servico-da-web-webservice","title":"API de Servi\u00e7o da Web (Webservice)","text":"<p>Uma API de servi\u00e7o da web \u00e9 uma API que fornece acesso a servi\u00e7os da web, geralmente usando o protocolo HTTP. Ela pode ser implementada usando diferentes tecnologias, como XML-RPC, JSON-RPC, SOAP ou REST.</p> <p>O protocolo HTTP \u00e9 amplamente utilizado na internet para transfer\u00eancia de dados entre clientes e servidores. Ele usa uma abordagem de solicita\u00e7\u00e3o-resposta, onde o cliente envia uma solicita\u00e7\u00e3o ao servidor e espera uma resposta. Essa abordagem \u00e9 bastante simples e pode ser facilmente implementada por diferentes plataformas e linguagens de programa\u00e7\u00e3o.</p> <p>Como exemplo de API Webservice temos a ViaCEP, a API ViaCEP \u00e9 um servi\u00e7o gratuito que permite a consulta de endere\u00e7os brasileiros utilizando o CEP como par\u00e2metro. A seguir vou mostrar como utilizar a API ViaCEP em uma aplica\u00e7\u00e3o JavaScript para buscar informa\u00e7\u00f5es de um endere\u00e7o.</p>"},{"location":"nodeJs/_01_Introdu%C3%A7%C3%A3o-a-API/#api-viacep","title":"API ViaCEP","text":"<p>A API ViaCEP oferece diferentes formas de consulta, incluindo busca por CEP, endere\u00e7o ou logradouro. Neste tutorial, vamos utilizar a busca por CEP.</p> <p>A URL base da API ViaCEP \u00e9 <code>https://viacep.com.br/ws/</code>. Para buscar informa\u00e7\u00f5es de um endere\u00e7o a partir do CEP, basta adicionar o CEP \u00e0 URL e enviar uma requisi\u00e7\u00e3o HTTP GET.</p> <p>Por exemplo, para buscar informa\u00e7\u00f5es do endere\u00e7o correspondente ao CEP 01310-100, a URL seria:</p> <pre><code>https://viacep.com.br/ws/01310100/json/\n</code></pre> <p>Caso seja um CEP valido a resposta da API ser\u00e1 um objeto JSON contendo informa\u00e7\u00f5es como logradouro, bairro, cidade, estado, entre outras, conforme Exemplo:</p> <pre><code>{\n\"cep\": \"01310-100\",\n\"logradouro\": \"Avenida Paulista\",\n\"complemento\": \"de 612 a 1510 - lado par\",\n\"bairro\": \"Bela Vista\",\n\"localidade\": \"S\u00e3o Paulo\",\n\"uf\": \"SP\",\n\"ibge\": \"3550308\",\n\"gia\": \"1004\",\n\"ddd\": \"11\",\n\"siafi\": \"7107\"\n} </code></pre>"},{"location":"nodeJs/_01_Introdu%C3%A7%C3%A3o-a-API/#criando-uma-funcao-para-buscar-informacoes-de-um-endereco-a-partir-do-cep","title":"Criando uma fun\u00e7\u00e3o para buscar informa\u00e7\u00f5es de um endere\u00e7o a partir do CEP","text":"<p>Agora que entendemos como funciona a API ViaCEP, podemos criar uma fun\u00e7\u00e3o para buscar informa\u00e7\u00f5es de um endere\u00e7o a partir do CEP.</p> <pre><code>async function buscaEndereco(cep) {\ntry {\n\nconst url = `https://viacep.com.br/ws/${cep}/json/`;\nconst response = await fetch(url);\nconst data = await response.json();\nconsole.log(data);\n} catch (error) {\nconsole.log(error);\n}\n}\n\nbuscaEndereco(01310100)\n</code></pre> <p>Esta fun\u00e7\u00e3o recebe um par\u00e2metro <code>cep</code> contendo o CEP que desejamos buscar. Em seguida, montamos a URL da API utilizando o CEP como par\u00e2metro e enviamos uma requisi\u00e7\u00e3o HTTP GET utilizando a fun\u00e7\u00e3o <code>fetch</code>. Por fim, mostramos em tela o resultado, poderiamos tambem retornar os dados da resposta da API no formato JSON, e utiliza-lo em nossos projetos.</p>"},{"location":"nodeJs/_01_Introdu%C3%A7%C3%A3o-a-API/#api-restful","title":"API RESTful","text":"<p>Uma API RESTful \u00e9 uma API que segue o estilo arquitetural REST (Representational State Transfer). O REST \u00e9 um conjunto de princ\u00edpios para projetar sistemas distribu\u00eddos na web. Ele \u00e9 baseado na ideia de que um recurso na web deve ser identificado por uma URL \u00fanica e que as opera\u00e7\u00f5es em torno desse recurso devem ser definidas pelos m\u00e9todos HTTP padr\u00e3o (GET, POST, PUT, DELETE).</p> <p>Os m\u00e9todos HTTP s\u00e3o utilizados para indicar qual a\u00e7\u00e3o deve ser realizada pelo servidor web quando um cliente envia uma requisi\u00e7\u00e3o. Cada m\u00e9todo possui uma finalidade espec\u00edfica e \u00e9 utilizado de acordo com a opera\u00e7\u00e3o que se deseja realizar.</p> <ul> <li> <p>GET: o m\u00e9todo GET \u00e9 utilizado para solicitar informa\u00e7\u00f5es de um recurso espec\u00edfico. Em outras palavras, \u00e9 utilizado para buscar dados em um servidor web. As requisi\u00e7\u00f5es GET s\u00e3o geralmente enviadas atrav\u00e9s de URLs, e os dados retornados pelo servidor s\u00e3o geralmente exibidos em um navegador web.</p> </li> <li> <p>POST: o m\u00e9todo POST \u00e9 utilizado para enviar dados de um cliente para um servidor web, geralmente com o objetivo de criar ou atualizar um recurso no servidor. Por exemplo, um formul\u00e1rio de cadastro pode enviar os dados preenchidos pelo usu\u00e1rio para o servidor utilizando o m\u00e9todo POST.</p> </li> <li> <p>PUT: o m\u00e9todo PUT \u00e9 utilizado para atualizar um recurso existente no servidor. Ele envia uma requisi\u00e7\u00e3o para o servidor com os dados atualizados do recurso. Por exemplo, um formul\u00e1rio de edi\u00e7\u00e3o pode enviar os dados atualizados de um usu\u00e1rio para o servidor utilizando o m\u00e9todo PUT.</p> </li> <li> <p>DELETE: o m\u00e9todo DELETE \u00e9 utilizado para excluir um recurso espec\u00edfico no servidor. Ele envia uma requisi\u00e7\u00e3o para o servidor indicando qual recurso deve ser exclu\u00eddo. Por exemplo, um bot\u00e3o \"excluir\" em uma lista de usu\u00e1rios pode enviar uma requisi\u00e7\u00e3o DELETE para o servidor para excluir o usu\u00e1rio selecionado.</p> </li> </ul> <p>Cada m\u00e9todo HTTP \u00e9 utilizado para uma finalidade espec\u00edfica, e juntos eles permitem que os desenvolvedores criem APIs RESTful que sejam capazes de realizar opera\u00e7\u00f5es de cria\u00e7\u00e3o (Create), leitura (Read), atualiza\u00e7\u00e3o (Update) e exclus\u00e3o (Delete) de recursos de forma clara e organizada, Essas quatros opera\u00e7\u00f5es s\u00e3o comumente conhecida pelo acr\u00f4nimo CRUD.</p> Letra do Acr\u00f4nimo Opera\u00e7\u00e3o M\u00e9todo HTTP Descri\u00e7\u00e3o C Create POST Cria um novo recurso no servidor R Read GET L\u00ea os dados de um recurso espec\u00edfico no servidor U Update PUT/PATCH Atualiza um recurso espec\u00edfico no servidor D Delete DELETE Exclui um recurso espec\u00edfico no servidor <p>As APIs RESTful s\u00e3o muito populares na web, pois s\u00e3o simples de usar e escalon\u00e1veis. Elas permitem que as aplica\u00e7\u00f5es possam interagir com diferentes recursos na web, como bancos de dados, sistemas de pagamento, servi\u00e7os de geolocaliza\u00e7\u00e3o, entre outros.</p> <p>Como referencia em API RESTful, podemos utilizar o Swagger Petstore  que \u00e9 um exemplo muito comum e utilizado para demonstrar as funcionalidades  de uma ferramenta popular para documenta\u00e7\u00e3o de APIs RESTful (Swagger). Ele consiste em uma API RESTful que permite gerenciar uma loja virtual de animais de estima\u00e7\u00e3o, como cachorros, gatos, p\u00e1ssaros, entre outros.</p> <p>A pagina inicial do Swagger Petstore pode se acessada em:</p> <pre><code>https://petstore.swagger.io/\n</code></pre> <p>L\u00e1 voc\u00ea ira encontrar v\u00e1rias rotas, como \"Adicionar um novo animal\", \"Buscar animais por status\" e \"Atualizar o status de um animal\". Cada rota \u00e9 documentada utilizando a especifica\u00e7\u00e3o Swagger, que define os m\u00e9todos HTTP suportados, os par\u00e2metros necess\u00e1rios, os exemplos de entrada e sa\u00edda, al\u00e9m de outras informa\u00e7\u00f5es relevantes.</p> <p>O Swagger Petstore tamb\u00e9m inclui uma interface interativa do Swagger UI, que permite que os usu\u00e1rios visualizem a documenta\u00e7\u00e3o da API, realizem testes e at\u00e9 mesmo experimentem as opera\u00e7\u00f5es dispon\u00edveis diretamente da documenta\u00e7\u00e3o.</p>"},{"location":"nodeJs/_01_Introdu%C3%A7%C3%A3o-a-API/#api-soap","title":"API SOAP","text":"<p>Uma API SOAP \u00e9 uma API que usa o protocolo SOAP (Simple Object Access Protocol) para fornecer servi\u00e7os da web. O SOAP \u00e9 um protocolo baseado em XML que define como as mensagens devem ser formatadas e transmitidas. Ele \u00e9 um protocolo mais antigo e mais complexo que o REST, mas ainda \u00e9 usado em algumas aplica\u00e7\u00f5es que exigem seguran\u00e7a e confiabilidade.</p> <p>Em geral, as APIs SOAP s\u00e3o mais complexas e verbosas do que as APIs RESTful, mas oferecem recursos mais avan\u00e7ados, como autentica\u00e7\u00e3o, seguran\u00e7a e transa\u00e7\u00f5es. No entanto, elas tamb\u00e9m podem ser mais dif\u00edceis de implementar e manter devido \u00e0 sua complexidade.</p>"},{"location":"nodeJs/_02_API-RESTful-com-Nodejs/","title":"02 API RESTful com Nodejs","text":""},{"location":"nodeJs/_02_API-RESTful-com-Nodejs/#api-restful-com-nodejs","title":"API RESTful com Node.js","text":"<p>O Node.js \u00e9 uma plataforma de desenvolvimento de software baseada em JavaScript. Ela permite que os desenvolvedores possam escrever aplicativos do lado do servidor usando a mesma linguagem de programa\u00e7\u00e3o do lado do cliente.</p> <p>Para implementar uma API RESTful com Node.js, \u00e9 necess\u00e1rio seguir alguns passos b\u00e1sicos:</p> <ol> <li>Instale o Node.js no seu sistema.</li> <li>Crie um projeto Node.js usando o npm (Node Package Manager).</li> <li>Instale os pacotes necess\u00e1rios para implementar a API RESTful, como o Express (um framework para constru\u00e7\u00e3o de aplicativos web), o Body-parser (para an\u00e1lise de corpo de solicita\u00e7\u00e3o HTTP) e o CORS (para controle de acesso \u00e0 API).</li> <li>Defina o modelo conceitual de dados e o modelo de dados da API, usando ferramentas como o Sequelize (para bancos de dados SQL).</li> <li>Defina as rotas da API, definindo os m\u00e9todos HTTP e as opera\u00e7\u00f5es em torno dos recursos.</li> <li>Utilizar ferramentas como o Swagger para e documentar APIs de forma automatizada permitindo realizar  testes de solicita\u00e7\u00e3o HTTP.</li> </ol> <p>O Node.js \u00e9 uma op\u00e7\u00e3o vi\u00e1vel para implementar APIs RESTful, pois ele fornece um conjunto de recursos e ferramentas para construir aplicativos escal\u00e1veis e de alta performance. Ele tamb\u00e9m \u00e9 compat\u00edvel com diferentes bancos de dados e provedores de servi\u00e7os de nuvem, o que o torna uma op\u00e7\u00e3o popular para constru\u00e7\u00e3o de sistemas distribu\u00eddos.</p>"},{"location":"nodeJs/_02_API-RESTful-com-Nodejs/#iniciando-um-projeto-nodejs","title":"Iniciando um projeto Node.js","text":"<p>Para criar um projeto de API RESTful em Node.js siga as seguintes etapas:</p>"},{"location":"nodeJs/_02_API-RESTful-com-Nodejs/#1-instalando-nodejs","title":"1 Instalando Node.js","text":"<p>Para seguir este guia, recomendamos que voc\u00ea utilize Ubuntu 20.04. Antes de come\u00e7ar, voc\u00ea deve ter uma conta de usu\u00e1rio com privil\u00e9gios  de \u00b4sudo\u00b4 configurados em seu sistema.</p> <p>Para instalar o Node.js no Linux, siga os seguintes passos:</p>"},{"location":"nodeJs/_02_API-RESTful-com-Nodejs/#passo-1-abra-o-terminal","title":"Passo 1: Abra o terminal","text":"<p>Abra o terminal no seu sistema Linux. O terminal pode ser encontrado no menu de aplicativos ou pressionando a tecla de atalho <code>Ctrl + Alt + T</code>.</p>"},{"location":"nodeJs/_02_API-RESTful-com-Nodejs/#passo-2-atualize-o-gerenciador-de-pacotes","title":"Passo 2: Atualize o gerenciador de pacotes","text":"<p>Antes de instalar o Node.js, \u00e9 recomend\u00e1vel atualizar o gerenciador de pacotes para garantir que voc\u00ea esteja baixando a vers\u00e3o mais recente. Use o seguinte comando no terminal:</p> <pre><code>sudo apt update\n</code></pre>"},{"location":"nodeJs/_02_API-RESTful-com-Nodejs/#passo-3-instale-o-nodejs","title":"Passo 3: Instale o Node.js","text":"<p>Existem diferentes formas de instalar o Node.js no Linux, mas neste exemplo, usaremos o gerenciador de pacotes <code>apt</code> no Ubuntu ou no Debian. Use o seguinte comando para instalar o Node.js:</p> <pre><code>sudo apt install nodejs\n</code></pre> <p>Al\u00e9m disso, voc\u00ea tamb\u00e9m precisa instalar o gerenciador de pacotes npm (Node Package Manager), que \u00e9 usado para instalar pacotes e bibliotecas JavaScript. Use o seguinte comando para instalar o npm:</p> <pre><code>sudo apt install npm\n</code></pre>"},{"location":"nodeJs/_02_API-RESTful-com-Nodejs/#passo-4-verifique-a-instalacao","title":"Passo 4: Verifique a instala\u00e7\u00e3o","text":"<p>Ap\u00f3s a instala\u00e7\u00e3o do Node.js e npm, voc\u00ea pode verificar se tudo foi instalado corretamente executando o seguinte comando no terminal:</p> <pre><code>node -v\n</code></pre> <p>Este comando ir\u00e1 exibir a vers\u00e3o do Node.js instalada no seu sistema. Para verificar a vers\u00e3o do npm, use o seguinte comando:</p> <pre><code>npm -v\n</code></pre> <p>Instalar o Node.js no Linux \u00e9 um processo simples e f\u00e1cil, usando o gerenciador de pacotes <code>apt</code>. Certifique-se de atualizar o gerenciador de pacotes antes de instalar o Node.js e npm, e verifique se tudo foi instalado corretamente executando os comandos de verifica\u00e7\u00e3o.</p> <p>O Node.js \u00e9 uma plataforma vers\u00e1til que pode ser usada para desenvolver uma ampla gama de aplicativos, desde aplicativos web simples at\u00e9 aplicativos de rede complexos em tempo real. Ele \u00e9 mantido pela Node.js Foundation, uma organiza\u00e7\u00e3o sem fins lucrativos que \u00e9 respons\u00e1vel por coordenar o desenvolvimento, promover a ado\u00e7\u00e3o, fornecer suporte e garantir a estabilidade e a seguran\u00e7a da plataforma. Com sua arquitetura orientada a eventos e I/O ass\u00edncrono, o Node.js \u00e9 capaz de lidar com muitas conex\u00f5es simult\u00e2neas e escalonar facilmente para lidar com grandes cargas de trabalho.</p>"},{"location":"nodeJs/_02_API-RESTful-com-Nodejs/#2-crie-um-projeto-nodejs","title":"2. Crie um projeto Node.js","text":""},{"location":"nodeJs/_02_API-RESTful-com-Nodejs/#passo-1-crie-um-diretorio-para-o-projeto-e-navegue-ate-ele","title":"Passo 1 Crie um diret\u00f3rio para o projeto e navegue at\u00e9 ele","text":"<pre><code>mkdir projetos/nome-do-projeto #cria um diret\u00f3rio\ncd projetos/nome-do-projeto ## move at\u00e9 o diret\u00f3rio\n</code></pre> <p>Lembre-se organizar seu ambiente de desenvolvimento \u00e9 uma parte importante para garantir uma experi\u00eancia de programa\u00e7\u00e3o eficiente e produtiva, neste caso criamos um diret\u00f3rio <code>projetos</code> onde armazenaremos nossas aplica\u00e7oes.</p>"},{"location":"nodeJs/_02_API-RESTful-com-Nodejs/#passo-2-inicialize-o-projeto-nodejs-com-o-npm","title":"Passo 2 Inicialize o projeto Node.js com o npm","text":"<pre><code>npm init -y\n</code></pre> <p>Isso ir\u00e1 criar um arquivo <code>package.json</code> no diret\u00f3rio do projeto, que cont\u00e9m informa\u00e7\u00f5es sobre o projeto e suas depend\u00eancias. O arquivo package.json \u00e9 um arquivo em formato JSON que cont\u00e9m metadados sobre o projeto e suas depend\u00eancias.</p> <p>inicialmente o seu arquivo deve se parecer com isso:</p> <pre><code>// package.json\n{\n\"name\": \"nome-do-projeto\",\n\"version\": \"1.0.0\",\n\"description\": \"\",\n\"main\": \"index.js\",\n\"scripts\": {\n\"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n},\n\"keywords\": [],\n\"author\": \"\",\n\"license\": \"ISC\"\n}\n</code></pre> <p>Este arquivo \u00e9 importante porque ele armazena informa\u00e7\u00f5es sobre as depend\u00eancias do projeto, scripts, configura\u00e7\u00f5es e outras informa\u00e7\u00f5es importantes que ser\u00e3o utilizadas para gerenciar o projeto.</p> <p>Aqui est\u00e1 outro exemplo de um arquivo <code>package.json</code> t\u00edpico:</p> <pre><code>{\n\"name\": \"exemplo\",\n\"version\": \"1.0.0\",\n\"description\": \"Exemplo de aplica\u00e7\u00e3o Node.js\",\n\"main\": \"index.js\",\n\"scripts\": {\n\"start\": \"node index.js\"\n},\n\"dependencies\": {\n\"express\": \"^4.17.1\"\n},\n\"devDependencies\": {\n\"nodemon\": \"^2.0.7\"\n},\n\"engines\": {\n\"node\": \"&gt;=14.0.0\",\n\"npm\": \"&gt;=7.0.0\"\n},\n\"license\": \"MIT\",\n\"repository\": {\n\"type\": \"git\",\n\"url\": \"https://github.com/nome-do-repositorio.git\"\n},\n\"author\": {\n\"name\": \"Nome do Autor\",\n\"email\": \"email@dominio.com\"\n},\n\"keywords\": [\n\"node\",\n\"exemplo\",\n\"rest\",\n\"api\"\n],\n\"contributors\": [\n{\n\"name\": \"Nome do Contribuidor\",\n\"email\": \"email@dominio.com\"\n}\n]\n}\n</code></pre> <p>Vejamos agora o que cada um desses campos significa:</p> <ul> <li> <p><code>name</code>: \u00e9 o nome do seu projeto e deve ser \u00fanico no registro de pacotes do npm.</p> </li> <li> <p><code>version</code>: \u00e9 a vers\u00e3o atual do seu projeto.</p> </li> <li> <p><code>description</code>: \u00e9 uma descri\u00e7\u00e3o breve do seu projeto.</p> </li> <li> <p><code>main</code>: \u00e9 o arquivo principal do seu projeto.</p> </li> <li> <p><code>scripts</code>: \u00e9 um objeto que cont\u00e9m v\u00e1rios comandos que podem ser executados para realizar tarefas espec\u00edficas, como iniciar a aplica\u00e7\u00e3o ou executar testes automatizados.</p> </li> <li> <p><code>dependencies</code>: \u00e9 um objeto que cont\u00e9m todas as depend\u00eancias que sua aplica\u00e7\u00e3o precisa para rodar corretamente. Essas depend\u00eancias ser\u00e3o instaladas automaticamente pelo npm.</p> </li> <li> <p><code>devDependencies</code>: \u00e9 um objeto que cont\u00e9m todas as depend\u00eancias que s\u00e3o necess\u00e1rias apenas durante o desenvolvimento da aplica\u00e7\u00e3o, como por exemplo, testes automatizados. Essas depend\u00eancias n\u00e3o ser\u00e3o instaladas quando a aplica\u00e7\u00e3o for instalada em um ambiente de produ\u00e7\u00e3o.</p> </li> <li> <p><code>engines</code>: \u00e9 um objeto que especifica a vers\u00e3o m\u00ednima do Node.js e do npm necess\u00e1ria para rodar sua aplica\u00e7\u00e3o.</p> </li> <li> <p><code>license</code>: \u00e9 a licen\u00e7a sob a qual seu projeto \u00e9 disponibilizado.</p> </li> <li> <p><code>repository</code>: \u00e9 a URL do reposit\u00f3rio do seu projeto.</p> </li> <li> <p><code>author</code>: \u00e9 o nome do autor do projeto e seu email.</p> </li> <li> <p><code>keywords</code>: s\u00e3o palavras-chave que descrevem seu projeto. Essas palavras-chave s\u00e3o usadas pelo npm para categorizar seu projeto e facilitar a busca.</p> </li> <li> <p><code>contributors</code>: \u00e9 uma lista de contribuidores do projeto.</p> </li> </ul> <p>Essas s\u00e3o algumas das principais propriedades que podem ser encontradas em um arquivo <code>package.json</code>. Al\u00e9m dessas, existem outras propriedades que podem ser definidas, dependendo das necessidades do projeto. Em resumo, o arquivo package.json \u00e9 fundamental em projetos Node.js, pois ele ajuda a gerenciar depend\u00eancias, configurar scripts e outras configura\u00e7\u00f5es importantes para o projeto.</p> <p>Ao final desta etapa voc\u00ea ter\u00e1 a seguinte estrutura de diret\u00f3rio:</p> <pre><code>nome-do-projeto/\n  |- package.json\n</code></pre> <ul> <li><code>nome-do-projeto/</code>: \u00e9 o diret\u00f3rio raiz do projeto, que cont\u00e9m todos os arquivos e diret\u00f3rios relacionados ao projeto.</li> <li><code>package.json</code>: \u00e9 um arquivo que descreve as informa\u00e7\u00f5es do projeto, incluindo o nome do projeto, a vers\u00e3o do projeto, as depend\u00eancias do projeto, as configura\u00e7\u00f5es de script, o autor, a licen\u00e7a e outras informa\u00e7\u00f5es importantes. O arquivo \u00e9 usado pelo npm para instalar as depend\u00eancias do projeto e executar scripts relacionados ao projeto.</li> </ul> <p>O npm tem um conjunto de comando uteis saiba mais na documenta\u00e7\u00e3o do npm ou utilize o comando <code>npm help npm</code></p>"},{"location":"nodeJs/_03_Gerenciando-Pacotes/","title":"03 Gerenciando Pacotes","text":""},{"location":"nodeJs/_03_Gerenciando-Pacotes/#3-instale-os-pacotes-bibliotecas-e-frameworks-necessarios","title":"3. Instale os Pacotes, Bibliotecas e Frameworks necess\u00e1rios","text":"<p>Embora os pacotes, bibliotecas e frameworks possam ter algumas semelhan\u00e7as, eles s\u00e3o diferentes em sua finalidade e escopo, entenda melhor:</p> <ul> <li> <p>Pacote: Um pacote \u00e9 um conjunto de arquivos que podem ser facilmente compartilhados e reutilizados entre diferentes projetos em uma determinada linguagem de programa\u00e7\u00e3o. Esses pacotes geralmente cont\u00eam m\u00f3dulos de c\u00f3digo que fornecem funcionalidades espec\u00edficas, como a manipula\u00e7\u00e3o de arquivos, a cria\u00e7\u00e3o de servidores web, a integra\u00e7\u00e3o com servi\u00e7os externos e muito mais.</p> </li> <li> <p>Biblioteca: Uma biblioteca, por sua vez, \u00e9 um conjunto de c\u00f3digo pr\u00e9-escrito que fornece fun\u00e7\u00f5es ou classes reutiliz\u00e1veis para realizar tarefas espec\u00edficas em um projeto. Essas fun\u00e7\u00f5es ou classes podem ser incorporadas diretamente no c\u00f3digo do projeto em quest\u00e3o. As bibliotecas geralmente s\u00e3o projetadas para serem usadas em conjunto com outras bibliotecas ou com o c\u00f3digo personalizado do projeto para fornecer uma solu\u00e7\u00e3o completa.</p> </li> <li> <p>Framework: J\u00e1 um framework \u00e9 uma estrutura abrangente que fornece uma base para o desenvolvimento de software em geral. Ele inclui n\u00e3o apenas pacotes e bibliotecas, mas tamb\u00e9m conven\u00e7\u00f5es e padr\u00f5es que orientam o processo de desenvolvimento. Os frameworks geralmente s\u00e3o voltados para a cria\u00e7\u00e3o de um tipo espec\u00edfico de software, como aplicativos web, aplicativos m\u00f3veis, jogos, etc</p> </li> </ul> <p>Os pacotes, bibliotecas e frameworks s\u00e3o gerenciados pelo sistema de gerenciamento de pacotes da linguagem de programa\u00e7\u00e3o em quest\u00e3o (por exemplo, npm para Node.js, pip para Python) e podem ser instalados facilmente em um projeto com o comando apropriado.</p>"},{"location":"nodeJs/_03_Gerenciando-Pacotes/#instale-os-pacotes-necessarios-para-criar-uma-api-restful-em-nodejs","title":"Instale os pacotes necess\u00e1rios para criar uma API RESTful em Node.js","text":"<p>H\u00e1 v\u00e1rias raz\u00f5es pelas quais \u00e9 ben\u00e9fico utilizar pacotes, bibliotecas e frameworks no desenvolvimento de software:</p> <ol> <li> <p>Reutiliza\u00e7\u00e3o de c\u00f3digo: Os pacotes e frameworks j\u00e1 t\u00eam um c\u00f3digo escrito e testado que pode ser reutilizado para adicionar funcionalidades ao seu projeto. Isso economiza tempo e esfor\u00e7o para o desenvolvedor.</p> </li> <li> <p>Aumento da produtividade: Os pacotes e frameworks permitem que os desenvolvedores trabalhem mais rapidamente, uma vez que n\u00e3o precisam escrever o c\u00f3digo do zero. Eles podem se concentrar em implementar a l\u00f3gica de neg\u00f3cios espec\u00edfica do projeto.</p> </li> <li> <p>Padroniza\u00e7\u00e3o: Os pacotes e frameworks fornecem padr\u00f5es e conven\u00e7\u00f5es para o desenvolvimento, tornando o c\u00f3digo mais consistente e f\u00e1cil de entender para outros desenvolvedores.</p> </li> <li> <p>Gerenciamento de depend\u00eancias: Os pacotes e frameworks geralmente gerenciam suas pr\u00f3prias depend\u00eancias, garantindo que todas as bibliotecas necess\u00e1rias sejam instaladas corretamente e em suas vers\u00f5es adequadas.</p> </li> <li> <p>Seguran\u00e7a: Os pacotes e frameworks s\u00e3o desenvolvidos e mantidos por uma comunidade de desenvolvedores, o que significa que eles s\u00e3o frequentemente revisados e atualizados para corrigir quaisquer problemas de seguran\u00e7a.</p> </li> <li> <p>Suporte: Os pacotes e frameworks geralmente t\u00eam documenta\u00e7\u00e3o detalhada e uma comunidade de desenvolvedores pronta para ajudar em caso de problemas.</p> </li> </ol> <p>Em resumo, o uso de pacotes e frameworks pode economizar tempo, aumentar a produtividade, garantir a qualidade do c\u00f3digo e melhorar a seguran\u00e7a do software.</p> <p>Existem diversos pacotes que podem ser utilizados para criar uma API RESTful em Node.js. Alguns dos mais populares incluem:</p> <ul> <li>Express: \u00e9 um framework para Node.js que fornece recursos avan\u00e7ados para criar APIs RESTful e aplicativos web em geral, pode ser instalado atrav\u00e9s do <code>npm</code> com o comando:</li> </ul> <pre><code>npm i express\n</code></pre> <ul> <li>Body-parser: \u00e9 um pacote que analisa o corpo das solicita\u00e7\u00f5es HTTP e extrai os dados enviados pelos clientes para o servidor em formato JSON ou URL-encoded, pode ser instalado atrav\u00e9s do <code>npm</code> com o comando:</li> </ul> <pre><code>npm i body-parser </code></pre> <ul> <li>Cors: \u00e9 um pacote que permite configurar as pol\u00edticas de seguran\u00e7a do CORS (Cross-Origin Resource Sharing) para sua API.</li> </ul> <pre><code>npm i cors </code></pre> <p>Ao final desta etapa voc\u00ea ter\u00e1 a seguinte estrutura de diret\u00f3rio:</p> <pre><code>nome-do-projeto/\n  |- node_modules/\n  |- package-lock.json\n  |- package.json\n</code></pre> <ul> <li><code>node_modules/</code>: \u00e9 o diret\u00f3rio onde os pacotes de terceiros instalados pelo npm s\u00e3o armazenados.</li> <li><code>package-lock.json</code>: \u00e9 um arquivo gerado automaticamente pelo npm para garantir que as depend\u00eancias do projeto sejam instaladas com a mesma vers\u00e3o, mesmo que o arquivo <code>package.json</code> tenha um caractere curinga <code>^</code> em suas depend\u00eancias.</li> </ul>"},{"location":"nodeJs/_04_Modelo-de-dados/","title":"04 Modelo de dados","text":""},{"location":"nodeJs/_04_Modelo-de-dados/#4-modelo-dados","title":"4. Modelo dados","text":"<p>O processo de modelagem de dados em desenvolvimento de uma API \u00e9 indispens\u00e1vel, geralmente \u00e9 dividido em v\u00e1rias etapas, que podem variar dependendo da metodologia de desenvolvimento de software adotada, podendo ter um time respons\u00e1vel somente por esses processos. Aqui est\u00e1 uma poss\u00edvel divis\u00e3o desse processo em etapas:</p> <ol> <li> <p>An\u00e1lise de requisitos: Nessa etapa, a equipe de desenvolvimento trabalha em conjunto com o cliente para entender as necessidades e objetivos do projeto. A equipe deve identificar as entidades e rela\u00e7\u00f5es que far\u00e3o parte do modelo de dados, bem como as regras de neg\u00f3cio que afetam o armazenamento e recupera\u00e7\u00e3o de informa\u00e7\u00f5es.</p> </li> <li> <p>Modelo conceitual: Com base na an\u00e1lise de requisitos, a equipe cria um modelo de dados conceitual, que descreve as entidades, atributos e rela\u00e7\u00f5es que far\u00e3o parte do modelo. Esse modelo geralmente \u00e9 representado por meio de diagramas de entidade-relacionamento (ER), que mostram as entidades como caixas e as rela\u00e7\u00f5es entre elas como linhas.</p> </li> <li> <p>Modelo l\u00f3gico: Nessa etapa, o modelo conceitual \u00e9 refinado e transformado em um modelo de dados l\u00f3gico, que representa como os dados ser\u00e3o armazenados em um banco de dados espec\u00edfico. O modelo l\u00f3gico \u00e9 projetado para atender aos requisitos de desempenho, seguran\u00e7a e integridade de dados, e geralmente \u00e9 representado por meio de esquemas de tabelas e relacionamentos.</p> </li> <li> <p>Modelo f\u00edsico: Nessa etapa, o modelo de dados l\u00f3gico \u00e9 implementado em um banco de dados espec\u00edfico, levando em considera\u00e7\u00e3o as caracter\u00edsticas f\u00edsicas do hardware e do sistema de armazenamento. Isso inclui a escolha de \u00edndices, parti\u00e7\u00f5es e outros recursos de otimiza\u00e7\u00e3o para maximizar a efici\u00eancia do acesso aos dados.</p> </li> <li> <p>Teste e valida\u00e7\u00e3o: Depois que o modelo de dados \u00e9 implementado, a equipe realiza testes e valida\u00e7\u00f5es para garantir que os dados sejam armazenados e recuperados corretamente. Isso inclui testes de integra\u00e7\u00e3o, testes de desempenho e testes de seguran\u00e7a para garantir que o modelo de dados atenda aos requisitos do cliente e aos padr\u00f5es de qualidade da empresa.</p> </li> </ol> <p>Essas etapas podem ser iterativas e podem ser realizadas em paralelo com outras etapas do processo de desenvolvimento de software, como design de interface de usu\u00e1rio, desenvolvimento de c\u00f3digo e testes de unidade. A colabora\u00e7\u00e3o e comunica\u00e7\u00e3o efetiva entre os membros da equipe e as partes intere\u00e7adas s\u00e3o fundamentais para garantir que o modelo de dados atenda \u00e0s necessidades do projeto e da empresa.</p> <p>Entre essas etapas iremos destacar:</p>"},{"location":"nodeJs/_04_Modelo-de-dados/#modelo-conceitual","title":"Modelo conceitual","text":"<p>Um modelo conceitual de dados pode ser representado de diversas formas, dependendo do contexto de uso e das necessidades da aplica\u00e7\u00e3o. por exemplo um diagrama entidade-relacionamento (ER) que descreve as entidades (tabelas), os atributos (colunas) e os relacionamentos entre essas entidades.Imagine uma aplica\u00e7\u00e3o de e-commerce que precisa armazenar informa\u00e7\u00f5es sobre produtos, clientes e pedidos. Para cada uma dessas entidades, \u00e9 necess\u00e1rio criar um modelo de dados que defina os campos e as rela\u00e7\u00f5es com outras entidades. O modelo de dados para a entidade \"produto\", por exemplo, pode incluir campos como nome, descri\u00e7\u00e3o, pre\u00e7o e quantidade em estoque. Por exemplo, em uma aplica\u00e7\u00e3o de e-commerce, podemos ter as seguintes entidades:</p> <ul> <li>Cliente: representa um usu\u00e1rio que est\u00e1 navegando e comprando na loja online. Pode ter atributos como nome, e-mail e senha.</li> <li>Produto: representa um item que est\u00e1 \u00e0 venda na loja online. Pode ter atributos como nome, descri\u00e7\u00e3o, pre\u00e7o e quantidade em estoque.</li> <li>Categoria: representa uma categoria na qual um produto pode ser classificado. Pode ter atributos como nome e descri\u00e7\u00e3o.</li> <li>Endere\u00e7o: representa o endere\u00e7o de um cliente. Pode ter atributos como rua, n\u00famero, complemento, cidade, estado e CEP.</li> <li>Pedido: representa um pedido feito por um cliente. Pode ter atributos como data de cria\u00e7\u00e3o, status e valor total.</li> <li>Item_Pedido: representa um item que foi adicionado a um pedido. Pode ter atributos como quantidade e valor unit\u00e1rio.</li> <li>Pagamento: representa um pagamento feito por um cliente para um pedido. Pode ter atributos como data de cria\u00e7\u00e3o, valor e status.</li> <li>Reembolso: representa um reembolso que foi emitido para um cliente em rela\u00e7\u00e3o a um pedido. Pode ter atributos como data de cria\u00e7\u00e3o, valor e status.</li> </ul> <p>Um diagrama ER simples para este modelo de dados seria:</p> <pre><code>erDiagram\n    PRODUTO ||--|| CATEGORIA : pertence_a\n    PRODUTO ||--|{ ITEM_PEDIDO : aparece_em\n    CLIENTE ||--o{ ENDERECO : possui\n    CLIENTE ||--o{ PEDIDO : faz\n    PEDIDO ||--|{ ITEM_PEDIDO : contem\n    PEDIDO ||--o{ PAGAMENTO : possui\n    PAGAMENTO ||--o{ REEMBOLSO : tem\n    PEDIDO ||--o{ REEMBOLSO : tem</code></pre> <p>Nesse diagrama, cada tabela \u00e9 representada por um ret\u00e2ngulo, e os relacionamentos entre as tabelas s\u00e3o indicados por linhas que conectam os ret\u00e2ngulos. A cardinalidade do relacionamento \u00e9 indicada por s\u00edmbolos no final de cada linha.</p> <p>Uma vez definido o modelo conceitual de dados, podemos utiliz\u00e1-lo para criar o modelo de dados em Node.js que ira realizar opera\u00e7\u00f5es no banco de dados, como inserir novos registros, atualizar informa\u00e7\u00f5es existentes ou recuperar dados para exibir na interface do usu\u00e1rio. Isso \u00e9 feito atrav\u00e9s de um ORM, que traduz as opera\u00e7\u00f5es de banco de dados em chamadas a m\u00e9todos do modelo correspondente.</p>"},{"location":"nodeJs/_04_Modelo-de-dados/#modelo-logico-e-orm-sequelize","title":"Modelo l\u00f3gico: e ORM Sequelize","text":"<p>Em resumo, um modelo l\u00f3gico \u00e9 uma representa\u00e7\u00e3o mais detalhada do sistema, que utiliza uma linguagem formal para definir as entidades, atributos, relacionamentos e regras de neg\u00f3cio. Nessa etapa, o modelo conceitual \u00e9 traduzido para o modelo l\u00f3gico, que pode ser implementado em um banco de dados. O modelo l\u00f3gico \u00e9 independente de tecnologia, ou seja, pode ser implementado em diferentes sistemas gerenciadores de banco de dados.</p>"},{"location":"nodeJs/_04_Modelo-de-dados/#orm","title":"ORM","text":"<p>ORM (Object-Relational Mapping) \u00e9 uma t\u00e9cnica de programa\u00e7\u00e3o que permite mapear objetos de um modelo l\u00f3gico para uma tabela em um banco de dados relacional. Isso permite que o desenvolvedor trabalhe com objetos em vez de escrever diretamente SQL para interagir com o banco de dados.</p> <p>O ORM fornece uma camada de abstra\u00e7\u00e3o entre o c\u00f3digo da aplica\u00e7\u00e3o e o banco de dados, permitindo que as consultas SQL sejam geradas automaticamente com base nas opera\u00e7\u00f5es feitas nos objetos. Isso torna o desenvolvimento de aplicativos mais produtivo e reduz a complexidade de escrever e manter o c\u00f3digo SQL.</p> <p>Geralmente os ORMs t\u00eam a capacidade de realizar opera\u00e7\u00f5es b\u00e1sicas de CRUD (cria\u00e7\u00e3o, leitura, atualiza\u00e7\u00e3o e exclus\u00e3o) em tabelas de banco de dados, bem como gerenciar as rela\u00e7\u00f5es entre as tabelas. Alguns exemplos de ORMs populares incluem Sequelize para Node.js, Hibernate para Java e Entity Framework para .NET, SQLAlchemy para Python, entre outras.</p> <p>Embora possam ter um impacto positivo no desenvolvimento de aplicativos, Os ORMs tamb\u00e9m t\u00eam algumas desvantagens. Por exemplo, pode ser menos eficiente do que o SQL direto, pois a gera\u00e7\u00e3o de SQL pode adicionar camadas adicionais de abstra\u00e7\u00e3o e, portanto, diminuir a velocidade de execu\u00e7\u00e3o. Al\u00e9m disso, os ORMs podem ser menos flex\u00edveis do que o SQL direto, pois a gera\u00e7\u00e3o autom\u00e1tica de SQL pode ser limitada em alguns casos espec\u00edficos.</p>"},{"location":"nodeJs/_04_Modelo-de-dados/#sequelize","title":"Sequelize","text":"<p>O Sequelize \u00e9 um Object-Relational Mapping (ORM) para Node.js, que permite trabalhar com bancos de dados relacionais de forma mais f\u00e1cil e produtiva. O Sequelize \u00e9 uma ferramenta poderosa e f\u00e1cil de usar, que oferece suporte a v\u00e1rios bancos de dados relacionais e recursos avan\u00e7ados, como migra\u00e7\u00f5es de banco de dados.Para utilizar o Sequelize em um projeto Node.js, \u00e9 necess\u00e1rio instal\u00e1-lo atrav\u00e9s do NPM (Node Package Manager). Abaixo est\u00e1 o comando para instalar o <code>Sequelize</code>:</p> <pre><code>npm i sequelize\n</code></pre> <ul> <li>O <code>sequelize</code> \u00e9 um pacote que permite a realiza\u00e7\u00e3o de opera\u00e7\u00f5es de banco de dados em um projeto Node.js, fornecendo uma interface simples e poderosa para interagir com bancos de dados relacionais. Ao utilizar o comando <code>npm i sequelize</code>, o pacote <code>sequelize</code> ser\u00e1 instalado no diret\u00f3rio <code>node_modules</code> do projeto, e sua refer\u00eancia ser\u00e1 adicionada ao arquivo <code>package.json</code>, na se\u00e7\u00e3o <code>dependencies</code>. A instala\u00e7\u00e3o do <code>sequelize</code> \u00e9 necess\u00e1ria para que a aplica\u00e7\u00e3o possa utilizar as funcionalidades do ORM e interagir com o banco de dados de forma eficiente e segura.</li> </ul> <pre><code>npm i pg-hstore pg\n</code></pre> <ul> <li> <p>O <code>pg</code> \u00e9 um pacote que fornece uma interface Node.js para interagir com o PostgreSQL. Ele permite que o Sequelize se conecte ao banco de dados e execute opera\u00e7\u00f5es de leitura e grava\u00e7\u00e3o de dados de forma segura e eficiente.</p> </li> <li> <p>O <code>pg-hstore</code> \u00e9 um pacote que permite a convers\u00e3o de objetos JavaScript para a representa\u00e7\u00e3o de texto hstore do PostgreSQL, que \u00e9 usado para armazenar pares de chave-valor em uma coluna de banco de dados. Ele \u00e9 necess\u00e1rio quando se deseja utilizar a funcionalidade hstore do PostgreSQL com o Sequelize.</p> </li> </ul> <p>A instala\u00e7\u00e3o desses pacotes \u00e9 necess\u00e1ria para que a aplica\u00e7\u00e3o possa se conectar ao banco de dados PostgreSQL e realizar opera\u00e7\u00f5es de leitura e grava\u00e7\u00e3o de dados de forma segura e eficiente, utilizando o Sequelize como ORM, para outros bancos consulte a document\u00e7\u00e3o do Sequelize.</p> <pre><code>sudo npm i -g sequelize-cli -D\n# entre com as credenciais de sudo\n</code></pre> <ul> <li>O <code>sequelize-cli</code> \u00e9 uma ferramenta de linha de comando que facilita a cria\u00e7\u00e3o de migra\u00e7\u00f5es de banco de dados, a gera\u00e7\u00e3o de modelos e a cria\u00e7\u00e3o de arquivos de configura\u00e7\u00e3o para o Sequelize. Ele \u00e9 uma extens\u00e3o do pacote <code>sequelize</code>, que \u00e9 utilizado para realizar opera\u00e7\u00f5es de banco de dados em um projeto Node.js. Ao utilizar o comando <code>npm i -g sequelize-cli -D</code>, o pacote <code>sequelize-cli</code> ser\u00e1 instalado no diret\u00f3rio <code>node_modules</code> do projeto, e sua refer\u00eancia ser\u00e1 adicionada ao arquivo <code>package.json</code>, na se\u00e7\u00e3o <code>devDependencies</code>. A op\u00e7\u00e3o <code>-D</code> indica que a depend\u00eancia ser\u00e1 instalada como uma depend\u00eancia de desenvolvimento, ou seja, ela n\u00e3o ser\u00e1 necess\u00e1ria para a execu\u00e7\u00e3o da aplica\u00e7\u00e3o em produ\u00e7\u00e3o, apenas para o desenvolvimento e testes.</li> </ul> <p>Ap\u00f3s a instala\u00e7\u00e3o, \u00e9 necess\u00e1rio configurar a conex\u00e3o com o banco de dados PostgreSQL. Para isso, iremos criar dois arquivos:</p>"},{"location":"nodeJs/_04_Modelo-de-dados/#sequelizerc","title":"sequelizerc","text":"<ul> <li><code>.sequelizerc</code>: arquivo de configura\u00e7\u00e3o do Sequelize que permite personalizar o comportamento do CLI do Sequelize. Ele \u00e9 usado para especificar diret\u00f3rios e arquivos personalizados que podem ser usados pelo Sequelize para gerar c\u00f3digo automaticamente, como arquivos de migra\u00e7\u00e3o, modelos, seeders, etc.</li> </ul> <p>podemos criar o arquivo com o comando:</p> <pre><code>touch .sequelizerc\n</code></pre> <p>O comando ira criar o  arquivo vazio <code>.sequelizerc</code>, que \u00e9 um arquivo no formato JavaScript (sem exten\u00e7\u00e3o .js) adicione o seguinte codigo:</p> <pre><code>const { resolve } = require(\"path\");\n\nmodule.exports = {\nconfig: resolve(__dirname, \"src\", \"config\", \"database.js\"),\n\"models-path\": resolve(__dirname, \"src\", \"app\", \"models\"),\n\"migrations-path\": resolve(__dirname, \"src\", \"database\", \"migrations\"),\n\"seeders-path\": resolve(__dirname, \"src\", \"database\", \"seeds\"),\n};\n</code></pre> <p>Entenda melhor linha a linha do arquivo <code>.sequelizerc</code>:</p> <pre><code>const { resolve } = require(\"path\");\n</code></pre> <p>Esta linha est\u00e1 importando o m\u00e9todo <code>resolve</code> do m\u00f3dulo <code>path</code> do Node.js. O m\u00e9todo <code>resolve</code> \u00e9 usado para resolver caminhos de arquivos e diret\u00f3rios, garantindo que os caminhos sejam corretamente concatenados e formatados independentemente do sistema operacional.</p> <pre><code>module.exports = {\n</code></pre> <p>Aqui estamos exportando um objeto que cont\u00e9m as configura\u00e7\u00f5es do Sequelize. Isso permite que outras partes do c\u00f3digo possam acessar as configura\u00e7\u00f5es exportadas.</p> <pre><code>  config: resolve(__dirname, \"src\", \"config\", \"database.js\"),\n</code></pre> <p>Definindo o caminho para o arquivo de configura\u00e7\u00e3o do Sequelize <code>src/config/database.js</code>.</p> <pre><code>  \"models-path\": resolve(__dirname, \"src\", \"app\", \"models\"),\n</code></pre> <p>Caminho para o diret\u00f3rio que cont\u00e9m os modelos do Sequelize <code>src/app/models</code>.</p> <pre><code>  \"migrations-path\": resolve(__dirname, \"src\", \"database\", \"migrations\"),\n</code></pre> <p>Definindo o caminho para o diret\u00f3rio que cont\u00e9m as migra\u00e7\u00f5es do Sequelize <code>src/database/migrations</code>.</p> <pre><code>  \"seeders-path\": resolve(__dirname, \"src\", \"database\", \"seeds\"),\n};\n</code></pre> <p>Por fim, aqui estamos definindo o caminho para o diret\u00f3rio que cont\u00e9m os seeders do Sequelize<code>src/database/seeds</code>.</p> <p>Com essas configura\u00e7\u00f5es em <code>.sequelizerc</code>, o Sequelize ser\u00e1 capaz de encontrar os arquivos necess\u00e1rios nos diret\u00f3rios corretos para executar as opera\u00e7\u00f5es de banco de dados.</p>"},{"location":"nodeJs/_04_Modelo-de-dados/#databasejs","title":"database.js","text":"<ul> <li><code>database.js</code>: com as informa\u00e7\u00f5es necess\u00e1rias para a conex\u00e3o, \u00e9 uma boa pr\u00e1tica em uma aplica\u00e7\u00e3o Node.js separar os os arquivos de c\u00f3digo em diretorios, \u00e9 comum encontrarmos um <code>src</code> e dentro um diret\u00f3rio de configura\u00e7\u00e3o <code>config</code>. Essa separa\u00e7\u00e3o ajuda a manter o c\u00f3digo organizado e facilita a manuten\u00e7\u00e3o, uma vez que as configura\u00e7\u00f5es est\u00e3o centralizadas em um s\u00f3 lugar.</li> </ul> <p>podemos criar o diretorio de config com o comando:</p> <pre><code>mkdir -p src/config/ &amp;&amp; touch src/config/database.js\n</code></pre> <p>isso ira criar um diretorio <code>src/config/</code>  e dentro de config um arquivo vazio com o nome <code>database.js</code>, para adicionar as configura\u00e7oes do banco adicione o codigo a seguir em <code>database.js</code>:</p> <pre><code>// src/config/database.js\nmodule.exports = {\ndialect: \"postgres\",\nhost: \"localhost\",\nusername: \"postgres\",\npassword: \"123\",\ndatabase: \"node\",\ndefine: {\ntimestamp: true, // cria duas colunas: createdAt e updatedAt\nunderscored: true,\nunderscoredAll: true,\n},\n};\n</code></pre> <ul> <li><code>dialect</code>: o tipo de banco de dados que voc\u00ea est\u00e1 usando, nesse caso PostgresSQL</li> <li><code>host</code>: o nome ou endere\u00e7o IP do servidor do banco de dados</li> <li><code>username</code>: o nome de usu\u00e1rio usado para conectar-se ao banco de dados</li> <li><code>password</code>: a senha associada ao usu\u00e1rio</li> <li><code>database</code>: o nome do banco de dados que o aplicativo ir\u00e1 conectar</li> <li><code>define</code>: um objeto de configura\u00e7\u00e3o para definir as op\u00e7\u00f5es de modelagem do Sequelize, um ORM (Object-Relational Mapping) do Node.js que \u00e9 frequentemente usado com o PostgresSQL. As op\u00e7\u00f5es definidas nesse objeto s\u00e3o:</li> <li><code>timestamp</code>: cria duas colunas: <code>createdAt</code> e <code>updatedAt</code>, que registram a data e hora da cria\u00e7\u00e3o e atualiza\u00e7\u00e3o de um registro.</li> <li><code>underscored</code>: define se os nomes das tabelas e colunas do banco de dados devem usar letras min\u00fasculas e sublinhados (_) para separar palavras (por exemplo, <code>nome_da_tabela</code> em vez de <code>NomeDaTabela</code>).</li> <li><code>underscoredAll</code>: define se o mesmo padr\u00e3o de nomenclatura deve ser aplicado aos nomes dos campos (colunas) dos modelos.</li> </ul> <p>Essas configura\u00e7\u00f5es podem variar dependendo do banco de dados e do ORM que voc\u00ea est\u00e1 usando, mas em geral, um arquivo de configura\u00e7\u00e3o de banco de dados \u00e9 usado para armazenar informa\u00e7\u00f5es de conex\u00e3o com o banco de dados e op\u00e7\u00f5es de configura\u00e7\u00e3o espec\u00edficas do banco de dados e do ORM.</p> <p>Ao final desta etapa voc\u00ea ter\u00e1 a seguinte estrutura de diret\u00f3rio:</p> <pre><code>nome-do-projeto/\n\u251c\u2500\u2500 src/\n|   \u251c\u2500\u2500 config/\n|   \u2502   \u2514\u2500\u2500 database.js\n\u251c\u2500\u2500 node_modules/\n|   \u2514\u2500\u2500 ... \n\u251c\u2500\u2500 .sequelizerc\n\u251c\u2500\u2500 package-lock.json\n\u2514\u2500\u2500 package.json\n</code></pre> <ul> <li> <p><code>src/</code>: diret\u00f3rio que cont\u00e9m o c\u00f3digo fonte do projeto.</p> </li> <li> <p><code>src/config/</code>: lembre-se este diret\u00f3rio que cont\u00e9m arquivos de configura\u00e7\u00e3o para o seu aplicativo, incluindo arquivos de configura\u00e7\u00e3o de banco de dados e outros par\u00e2metros globais.</p> </li> <li> <p><code>src/config/database.js</code>, que \u00e9 respons\u00e1vel por definir as configura\u00e7\u00f5es de conex\u00e3o com o banco de dados PostgreSQL, como nome do banco de dados, usu\u00e1rio, senha, host e porta.</p> </li> </ul>"},{"location":"nodeJs/_04_Modelo-de-dados/#modelos-e-migracoes","title":"Modelos e Migra\u00e7\u00f5es","text":"<p>No contexto de uma API Node.js com Sequelize, modelos e migra\u00e7\u00f5es s\u00e3o conceitos relacionados \u00e0 defini\u00e7\u00e3o e manipula\u00e7\u00e3o de dados no banco de dados.</p> <ul> <li> <p>Modelos: s\u00e3o classes que definem a estrutura dos dados que ser\u00e3o manipulados pelo aplicativo. Eles s\u00e3o tipicamente definidos com a ajuda do Sequelize, um ORM (Object-Relational Mapping) que fornece uma interface para mapear objetos JavaScript para tabelas de banco de dados relacionais. Os modelos do Sequelize geralmente cont\u00eam propriedades que correspondem \u00e0s colunas da tabela do banco de dados, bem como m\u00e9todos que permitem criar, ler, atualizar e excluir (CRUD) registros do banco de dados.</p> </li> <li> <p>Migra\u00e7\u00f5es: s\u00e3o arquivos de script que definem a estrutura da tabela do banco de dados e as altera\u00e7\u00f5es na estrutura da tabela ao longo do tempo. As migra\u00e7\u00f5es s\u00e3o normalmente criadas usando uma biblioteca de migra\u00e7\u00e3o, como o <code>Sequelize CLI</code> (Command-Line Interface). As migra\u00e7\u00f5es podem ser usadas para criar e alterar tabelas, colunas, \u00edndices e chaves estrangeiras. Elas garantem que a estrutura do banco de dados corresponda \u00e0 estrutura definida pelo modelo do aplicativo.</p> </li> </ul> <p>Na maioria das vezes, \u00e9 recomend\u00e1vel criar os modelos primeiro e, em seguida, criar as migra\u00e7\u00f5es que definem a estrutura da tabela do banco de dados.</p> <p>Ao criar os modelos primeiro, voc\u00ea pode definir a estrutura de dados que ser\u00e1 usada em seu aplicativo e usar esses modelos para gerar as migra\u00e7\u00f5es. Isso ajuda a garantir que a estrutura da tabela do banco de dados corresponda \u00e0 estrutura de dados esperada pelo aplicativo. Al\u00e9m disso, a cria\u00e7\u00e3o de modelos primeiro permite que voc\u00ea teste e depure sua l\u00f3gica de neg\u00f3cios sem se preocupar com a estrutura do banco de dados subjacente.</p> <p>Depois de criar os modelos, voc\u00ea pode usar ferramentas como o Sequelize CLI para gerar automaticamente as migra\u00e7\u00f5es com base nesses modelos. As migra\u00e7\u00f5es geradas fornecem um ponto de partida s\u00f3lido para definir a estrutura da tabela do banco de dados e podem ser personalizadas conforme necess\u00e1rio para atender \u00e0s necessidades espec\u00edficas do seu aplicativo.</p> <p>Ap\u00f3s a configura\u00e7\u00e3o da conex\u00e3o com o banco de dados, podemos criar modelos para as tabelas que ser\u00e3o utilizadas na aplica\u00e7\u00e3o. Os modelos s\u00e3o definidos utilizando o Sequelize e representam as tabelas do banco de dados.</p> <p>Uma boa pr\u00e1tica \u00e9 salvar os modelos de banco de dados em um diret\u00f3rio chamado <code>src/models</code>. Isso ajuda a manter uma estrutura organizada do projeto, facilita a localiza\u00e7\u00e3o dos arquivos e ajuda a evitar confus\u00e3o com outros tipos de arquivos, como rotas ou controladores.</p> <p>Ao salvar os modelos em um diret\u00f3rio separado, \u00e9 poss\u00edvel tamb\u00e9m criar subdiret\u00f3rios para organizar os modelos por categoria, se for necess\u00e1rio. Por exemplo, \u00e9 poss\u00edvel ter um diret\u00f3rio <code>models/produtos/</code> para todos os modelos relacionados a produtos ou a um determinado subgrupo, m\u00e1s tenha cuidado para n\u00e3o se perder, mantenha o seu c\u00f3digo o mais organizado poss\u00edvel, e lembre-se que outros desenvolvedores podem dar continuidade ao seu projeto.</p> <p>Com base no modelo conceitual de dados, podemos come\u00e7ar a criar o modelo de dados usando o Sequelize.</p> <p>Para cada entidade, precisamos criar um <code>ORM</code> correspondente no nosso diretorio <code>src/models</code>. Vamos criar um arquivo separado para cada modelo, seguindo o padr\u00e3o de nomenclatura  do Sequelize.</p> <p>O Sequelize segue um padr\u00e3o de nomenclatura para a cria\u00e7\u00e3o de modelos, tabelas e colunas no banco de dados, e geralmente segue as seguintes conven\u00e7\u00f5es:</p> <ul> <li>Os nomes das tabelas no banco de dados devem ser no plural e em letras min\u00fasculas, underscore (<code>_</code>) para separar as palavras  (exemplo: <code>usuarios</code>, <code>itens_pedidos</code>).</li> <li>Os nomes das colunas no banco de dados devem ser em letras min\u00fasculas e separados por underscore <code>_</code> (exemplo: <code>primeiro_nome</code>, <code>ultimo_nome</code>).</li> <li>Os nomes dos modelos no Sequelize devem seguir o padr\u00e3o de nomenclatura \"PascalCase\". Isso significa que o nome do modelo deve ter a primeira letra de cada palavra em mai\u00fascula, sem espa\u00e7os ou caracteres especiais, (exemplo: <code>Usuario</code>, <code>ItemPedido</code>,).</li> <li>As propriedades dos modelos no Sequelize devem seguir o mesmo padr\u00e3o de nomenclatura das colunas no banco de dados (exemplo: <code>firstName</code>, <code>lastName</code>, <code>createdAt</code>).</li> </ul> <p>Essas conven\u00e7\u00f5es ajudam a manter a consist\u00eancia e a legibilidade do c\u00f3digo ao trabalhar com o Sequelize. No entanto, \u00e9 poss\u00edvel personalizar o padr\u00e3o de nomenclatura do Sequelize usando as configura\u00e7\u00f5es do modelo e do Sequelize.</p> <p>Come\u00e7aremos criando O Modelo \"Clientes\" com os seguintes campos: nome, emal e senha. O arquivo de modelo para Clientes deve ficar assim:</p> <pre><code>// src/models/Clientes.js\n\n// Importa as classes Sequelize e Model do pacote Sequelize\nconst { Sequelize, Model } = require('sequelize');\n\n// Define a classe Clientes, que estende a classe Model\nclass Clientes extends Model {\n\n// Define o m\u00e9todo init, que \u00e9 chamado para inicializar a classe com as colunas da tabela do banco de dados\nstatic init(sequelize) {\n// Chama o construtor da classe Model para definir as colunas da tabela\nsuper.init(\n{\nnome: Sequelize.STRING, // Coluna \"nome\" do tipo STRING\nemail: Sequelize.STRING, // Coluna \"email\" do tipo STRING\nsenha: Sequelize.STRING, // Coluna \"senha\" do tipo STRING\n},\n{\nsequelize, // Objeto de conex\u00e3o com o banco de dados\n}\n);\n}\n// Define o m\u00e9todo associate, que \u00e9 chamado para definir as associa\u00e7\u00f5es entre as tabelas do banco de dados\nstatic associate(models) {\n// Define a associa\u00e7\u00e3o \"hasMany\" entre a tabela Clientes e a tabela Enderecos\n// Isso significa que um cliente pode ter v\u00e1rios endere\u00e7os\nthis.hasMany(models.Enderecos);\n}\n}\n// Exporta a classe Clientes para uso em outros m\u00f3dulos\nmodule.exports = Clientes;\n</code></pre> <p>acima criamos o modelo <code>Clientes</code> com suas especifica\u00e7\u00f5es, a seguir iremos criar o de <code>Enderecos</code>.</p> <pre><code>// src/models/Enderecos.js\n\n// Importa as classes Sequelize e Model do pacote Sequelize\nconst { Sequelize, Model } = require('sequelize');\n\n// Define a classe Enderecos, que estende a classe Model\nclass Enderecos extends Model {\n\n// Define o m\u00e9todo init, que \u00e9 chamado para inicializar a classe com as colunas da tabela do banco de dados\nstatic init(sequelize) {\n// Chama o construtor da classe Model para definir as colunas da tabela\nsuper.init(\n{\ncep: Sequelize.STRING, // Coluna \"cep\" do tipo STRING\nlogradouro: Sequelize.STRING, // Coluna \"logradouro\" do tipo STRING\ncomplemento: Sequelize.STRING, // Coluna \"complemento\" do tipo STRING\nbairro: Sequelize.STRING, // Coluna \"bairro\" do tipo STRING\nlocalidade: Sequelize.STRING, // Coluna \"localidade\" do tipo STRING\nuf: Sequelize.STRING, // Coluna \"uf\" do tipo STRING\ncliente_id:  Sequelize.INTEGER // Coluna \"cliente_id\" do tipo INTEGER, que armazena a chave estrangeira da tabela Clientes\n},\n{\nsequelize, // Objeto de conex\u00e3o com o banco de dados\n}\n);\n}\n\n// Define o m\u00e9todo associate, que \u00e9 chamado para definir as associa\u00e7\u00f5es entre as tabelas do banco de dados\nstatic associate(models) {\n// Define a associa\u00e7\u00e3o \"belongsTo\" entre a tabela Enderecos e a tabela Clientes\n// Isso significa que um endere\u00e7o pertence a um cliente\nthis.belongsTo(models.Clientes, { foreignKey: \"cliente_id\" }); // Define a chave estrangeira da tabela Clientes\n}\n}\n\n// Exporta a classe Enderecos para uso em outros m\u00f3dulos\nmodule.exports = Enderecos;\n</code></pre> <p>Podemos criar os modelos restantes seguindo o mesmo padr\u00e3o, ao final desta etapa voc\u00ea tera a seguinte estrutura de diret\u00f3rio:</p> <pre><code>nome-do-projeto/\n\u251c\u2500\u2500 src/\n|   \u251c\u2500\u2500 config/\n|   \u2502   \u2514\u2500\u2500 database.js\n|   \u251c\u2500\u2500 models\n|   |   \u2514\u2500\u2500 Clientes.js\n|   |   \u2514\u2500\u2500 Enderecos.js\n|   |   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 node_modules/\n|   \u2514\u2500\u2500 ... \n\u251c\u2500\u2500 .sequelizerc\n\u251c\u2500\u2500 package-lock.json\n\u2514\u2500\u2500 package.json\n</code></pre> <p>Agora podemos construir as migrations, podemos criar um diretorio <code>database/migratios</code>, que ja referenciamos no <code>.sequelizerc</code> na linha <code>migrations-path</code>, apos a cria\u00e7\u00e3o dos diretorio podemos utilizar o sequelize-cli para gerar um migration:</p> <p>Para gerar uma migra\u00e7\u00e3o usando o Sequelize CLI, voc\u00ea pode usar o comando <code>sequelize migration:generate</code>, seguido pelo nome da migra\u00e7\u00e3o que voc\u00ea deseja criar. Por exemplo:</p> <pre><code>sequelize migration:generate --name create_clientes\n</code></pre> <p>O comando acima ir\u00e1 gerar um novo arquivo de migra\u00e7\u00e3o com o nome composto pela <code>data da migra\u00e7ao</code> e o nome <code>create_clientes</code>. Dentro do arquivo gerado em <code>src/database/migrations/</code> , voc\u00ea pode definir as opera\u00e7\u00f5es que ser\u00e3o executadas na tabela do banco de dados, como criar uma nova tabela, adicionar ou remover colunas, entre outras, no exemplo abaixo iremos criar a tabela cliente:</p> <pre><code>// src/database/migrations/{data-migra\u00e7\u00e3o}-create_clientes.js\n// Exporta um objeto com os m\u00e9todos up e down\nmodule.exports = {\n// M\u00e9todo up \u00e9 respons\u00e1vel por criar a tabela \"clientes\"\nup: (queryInterface, Sequelize) =&gt; {\n// Utiliza o objeto queryInterface para criar a tabela \"clientes\"\nreturn queryInterface.createTable(\"clientes\", {\n// Coluna \"id\", do tipo INTEGER, n\u00e3o pode ser nula, \u00e9 auto-incremental e chave prim\u00e1ria\nid: {\ntype: Sequelize.INTEGER,\nallowNull: false,\nautoIncrement: true,\nprimaryKey: true,\n},\n// Coluna \"nome\", do tipo STRING, n\u00e3o pode ser nula\nnome: {\ntype: Sequelize.STRING,\nallowNull: false,\n},\n// Coluna \"email\", do tipo STRING, n\u00e3o pode ser nula e \u00e9 \u00fanica (n\u00e3o permite repeti\u00e7\u00f5es)\nemail: {\ntype: Sequelize.STRING,\nallowNull: false,\nunique: true,\n},\n// Coluna \"senha\", do tipo STRING, n\u00e3o pode ser nula\nsenha: {\ntype: Sequelize.STRING,\nallowNull: false,\n},\n// Coluna \"created_at\", do tipo DATE, n\u00e3o pode ser nula\ncreated_at: {\ntype: Sequelize.DATE,\nallowNull: false,\n},\n// Coluna \"updated_at\", do tipo DATE, n\u00e3o pode ser nula\nupdated_at: {\ntype: Sequelize.DATE,\nallowNull: false,\n},\n});\n},\n\n// M\u00e9todo down \u00e9 respons\u00e1vel por remover a tabela \"clientes\"\ndown: (queryInterface) =&gt; {\n// Utiliza o objeto queryInterface para remover a tabela \"clientes\"\nreturn queryInterface.dropTable(\"clientes\");\n},\n};\n</code></pre> <p>aplicando a migra\u00e7\u00e3o:</p> <pre><code>sequelize db:migrate\n</code></pre> <p>Depois de definir as opera\u00e7\u00f5es, voc\u00ea pode executar a migra\u00e7\u00e3o usando o comando <code>sequelize db:migrate</code>. Isso ir\u00e1 aplicar as altera\u00e7\u00f5es no banco de dados.</p> <p>para gerar a migra\u00e7ao do models <code>Enderecos</code> o processo e bem parecido:</p> <pre><code>npm sequelize-cli migration:generate --name create_enderecos\n</code></pre> <p>Novamente  ir\u00e1 gerar um novo arquivo de migra\u00e7\u00e3o com o nome composto pela <code>data da migra\u00e7ao</code> e o nome <code>create_enderecos</code>. Dentro do arquivo gerado, defina a estrutura da <code>migrations</code> Enderecos:</p> <pre><code>// // src/database/migrations/{data-migra\u00e7\u00e3o}-create_enderecos.js\nmodule.exports = {\n// M\u00e9todo up \u00e9 respons\u00e1vel por criar a tabela \"enderecos\"\nup: (queryInterface, Sequelize) =&gt; {\n// Utiliza o objeto queryInterface para criar a tabela \"enderecos\"\nreturn queryInterface.createTable(\"enderecos\", {\nid: {\ntype: Sequelize.INTEGER,\nallowNull: false,\nautoIncrement: true,\nprimaryKey: true,\n},\ncep: {\ntype: Sequelize.STRING,\nallowNull: true,\n},\nlogradouro: {\ntype: Sequelize.STRING,\nallowNull: true,\n},\ncomplemento: {\ntype: Sequelize.STRING,\nallowNull: true,\n},\nbairro: {\ntype: Sequelize.STRING,\nallowNull: true,\n},\nlocalidade: {\ntype: Sequelize.STRING,\nallowNull: true,\n},\nuf: {\ntype: Sequelize.STRING,\nallowNull: true,\n},\ncreated_at: {\ntype: Sequelize.DATE,\nallowNull: false,\n},\nupdated_at: {\ntype: Sequelize.DATE,\nallowNull: false,\n},\ncliente_id: { // coluna referenciando o id da tabela clientes\ntype: Sequelize.INTEGER,\nreferences: { model: \"clientes\", key: \"id\" }, // faz refer\u00eancia \u00e0 tabela clientes\nonUpdate: \"CASCADE\", // quando o id do cliente for atualizado, atualiza tamb\u00e9m na tabela de endere\u00e7os\nonDelete: \"CASCADE\", // quando um cliente for deletado, deleta tamb\u00e9m todos os seus endere\u00e7os\nallowNull: false, // n\u00e3o permite valores nulos para essa coluna\n},\n});\n},\n\ndown: queryInterface =&gt; {\nreturn queryInterface.dropTable(\"enderecos\"); // remove a tabela de endere\u00e7os\n},\n};\n</code></pre> <p>nao esque\u00e7a de aplicar a migra\u00e7\u00e3o:</p> <pre><code>sequelize db:migrate\n</code></pre> <p>Ao final desta etapa voc\u00ea tera a seguinte estrutura de diretorio:</p> <pre><code>nome-do-projeto/\n\u251c\u2500\u2500 src/\n|   \u251c\u2500\u2500 config/\n|   \u2502   \u2514\u2500\u2500 database.js\n|   \u251c\u2500\u2500 database\n|   |   \u251c\u2500\u2500 migrations/\n|   |   |   \u2514\u2500\u2500 data_migra\u00e7\u00e3o_create_clientes.js\n|   |   |   \u2514\u2500\u2500 data_migra\u00e7\u00e3o_create_enderecos.js\n|   \u251c\u2500\u2500 models\n|   |   \u2514\u2500\u2500 Clientes.js\n|   |   \u2514\u2500\u2500 Enderecos.js\n|   |   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 node_modules/\n|   \u2514\u2500\u2500 ... \n\u251c\u2500\u2500 .sequelizerc\n\u251c\u2500\u2500 package-lock.json\n\u2514\u2500\u2500 package.json\n</code></pre> <p>Al\u00e9m disso, voc\u00ea pode usar op\u00e7\u00f5es adicionais com o comando <code>sequelize migration:generate</code>, como <code>--help</code> para ver a lista completa de op\u00e7\u00f5es dispon\u00edveis.</p> <p>segue alguns comandos uteis do sequelize-cli:</p> Comando Descri\u00e7\u00e3o <code>sequelize init</code> Inicia um novo projeto do sequelize-cli no diret\u00f3rio atual <code>sequelize model:generate --name User --attributes</code> Gera um novo modelo de usu\u00e1rio com atributos especificados <code>sequelize db:create</code> Cria um novo banco de dados com base nas configura\u00e7\u00f5es do sequelize <code>sequelize db:migrate</code> Executa as migra\u00e7\u00f5es de banco de dados pendentes <code>sequelize db:seed:all</code> Executa todos os arquivos de sementes dispon\u00edveis <code>sequelize db:drop</code> Elimina todas as tabelas do banco de dados configurado <code>sequelize migration:create</code> Cria um novo arquivo de migra\u00e7\u00e3o vazio <code>sequelize migration:run</code> Executa todas as migra\u00e7\u00f5es de banco de dados pendentes <code>sequelize migration:undo</code> Reverte a migra\u00e7\u00e3o mais recente <code>sequelize seed:generate --name User</code> Gera um novo arquivo de semente para a tabela de usu\u00e1rios especificada"},{"location":"nodeJs/_04_Modelo-de-dados/#conectando-os-models","title":"Conectando os Models","text":"<p>Conectar os modelos (models) com o banco de dados utilizando Sequelize significa utilizar a biblioteca Sequelize para criar uma conex\u00e3o entre a aplica\u00e7\u00e3o e o banco de dados relacional, al\u00e9m de definir e sincronizar os modelos com as tabelas do banco de dados. O Sequelize \u00e9 respons\u00e1vel por mapear os objetos JavaScript definidos na aplica\u00e7\u00e3o para as tabelas do banco de dados. Para conectar os modelos com o banco de dados, \u00e9 necess\u00e1rio definir os modelos utilizando a sintaxe do Sequelize, especificando os atributos e as rela\u00e7\u00f5es entre os modelos, e em seguida, criar a conex\u00e3o com o banco de dados utilizando as credenciais e as configura\u00e7\u00f5es necess\u00e1rias. Para isso podemos cria um arquivo <code>src/database/index.js</code> para definir as configura\u00e7\u00f5es da conex\u00e3o do Sequelize com o banco de dados. Esse arquivo pode conter o seguinte c\u00f3digo:</p> <pre><code>// src/database/index.js\nconst Sequelize = require(\"sequelize\"); // Importa a biblioteca Sequelize\nconst config = require(\"../config/database\"); // Importa as configura\u00e7\u00f5es do banco de dados\nconst Clientes = require(\"../models/Clientes\"); // Importa o modelo de Clientes\nconst Enderecos = require(\"../models/Enderecos\"); // Importa o modelo de Endere\u00e7os\n\nconst models = [Clientes, Enderecos]; // Array com os modelos que ser\u00e3o sincronizados\n\nclass Database {\nconstructor() {\nthis.connection = new Sequelize(config); // Cria uma conex\u00e3o com o banco de dados utilizando as configura\u00e7\u00f5es\nthis.init(); // Inicializa os modelos\n}\n\ninit() {\nmodels.forEach(model =&gt; model.init(this.connection)); // Inicializa cada modelo, passando a conex\u00e3o como par\u00e2metro\n}\n}\n\nmodule.exports = new Database(); // Exporta a inst\u00e2ncia da classe Database j\u00e1 inicializada. Isso garante que haja apenas uma inst\u00e2ncia da conex\u00e3o em toda a aplica\u00e7\u00e3o.\n</code></pre> <p>O c\u00f3digo contido em <code>src/database/index.js</code> \u00e9 respons\u00e1vel por configurar a conex\u00e3o do Sequelize com o banco de dados e inicializar os modelos definidos na aplica\u00e7\u00e3o.</p> <p>As principais etapas do c\u00f3digo s\u00e3o:</p> <ol> <li> <p>Importar a biblioteca Sequelize, as configura\u00e7\u00f5es do banco de dados e os modelos da aplica\u00e7\u00e3o.</p> <pre><code>const Sequelize = require(\"sequelize\"); // Importa a biblioteca Sequelize\nconst config = require(\"../config/database\"); // Importa as configura\u00e7\u00f5es do banco de dados\nconst Clientes = require(\"../models/Clientes\"); // Importa o modelo de Clientes\nconst Enderecos = require(\"../models/Enderecos\"); // Importa o modelo de Endere\u00e7os\n</code></pre> </li> <li> <p>Definir um array com os modelos que ser\u00e3o sincronizados com o banco de dados.</p> <pre><code>const models = [Clientes, Enderecos]; // Array com os modelos que ser\u00e3o sincronizados\n</code></pre> <ul> <li>Al\u00e9m de criar os modelos com as defini\u00e7\u00f5es das tabelas, \u00e9 preciso conectar os modelos ao banco de dados para que eles possam iteragir como tabelas e realizar as opera\u00e7\u00f5es.</li> </ul> </li> <li> <p>Criar uma classe <code>Database</code> que representa a conex\u00e3o do Sequelize com o banco de dados e os modelos da aplica\u00e7\u00e3o.</p> <pre><code>class Database {\nconstructor() {\nthis.connection = new Sequelize(config); // Cria uma conex\u00e3o com o banco de dados utilizando as configura\u00e7\u00f5es\nthis.init(); // Inicializa os modelos\n}\n\ninit() {\nmodels.forEach(model =&gt; model.init(this.connection)); // Inicializa cada modelo, passando a conex\u00e3o como par\u00e2metro\n}\n}\n</code></pre> </li> <li> <p>Exportar uma inst\u00e2ncia da classe <code>Database</code> j\u00e1 inicializada. Isso garante que haja apenas uma inst\u00e2ncia da conex\u00e3o em toda a aplica\u00e7\u00e3o.</p> <pre><code>module.exports = new Database();\n</code></pre> </li> </ol> <p>Em resumo, o c\u00f3digo configura a conex\u00e3o do Sequelize com o banco de dados e define os modelos que ser\u00e3o utilizados na aplica\u00e7\u00e3o, permitindo que eles sejam sincronizados com o banco de dados.</p> <p>Ao final desta etapa voc\u00ea tera a seguinte estrutura de diretorio:</p> <pre><code>nome-do-projeto/\n\u251c\u2500\u2500 src/\n|   \u251c\u2500\u2500 config/\n|   \u2502   \u2514\u2500\u2500 database.js\n|   \u251c\u2500\u2500 database\n|   |   \u251c\u2500\u2500 migrations/\n|   |   |   \u2514\u2500\u2500 data-clientes.js\n|   |   |   \u2514\u2500\u2500 data-enderecos.js\n|   |   \u2514\u2500\u2500 index.js\n|   \u251c\u2500\u2500 models\n|   |   \u2514\u2500\u2500 Clientes.js\n|   |   \u2514\u2500\u2500 Enderecos.js\n|   |   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 node_modules/\n|   \u2514\u2500\u2500 ... \n\u251c\u2500\u2500 .sequelizerc\n\u251c\u2500\u2500 package-lock.json\n\u2514\u2500\u2500 package.json\n</code></pre>"},{"location":"nodeJs/_05_Definindo%20os%20Endpoints/","title":"05 Definindo os Endpoints","text":""},{"location":"nodeJs/_05_Definindo%20os%20Endpoints/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Definir os endpoints de uma API \u00e9 uma das etapas mais importantes no desenvolvimento de uma API RESTful. Os endpoints s\u00e3o as URLs da API que respondem a solicita\u00e7\u00f5es HTTP dos clientes.</p> <p>Algumas considera\u00e7\u00f5es na hora de definir os endpoints:</p> <ul> <li>Identificar as opera\u00e7\u00f5es que a API deve suportar - Determine quais opera\u00e7\u00f5es a API deve suportar, como criar, ler, atualizar e excluir recursos.</li> <li>Definir os recursos - Identifique os recursos que a API ir\u00e1 manipular, como \"usu\u00e1rios\", \"produtos\", \"pedidos\", etc. Cada recurso deve ter um endpoint associado.</li> <li>Definir as URLs dos endpoints - As URLs dos endpoints devem ser claras e descritivas. Elas devem incluir o nome do recurso e a opera\u00e7\u00e3o que est\u00e1 sendo realizada, conforme necess\u00e1rio. Por exemplo, se a API gerencia usu\u00e1rios e voc\u00ea deseja criar um novo usu\u00e1rio, o endpoint pode ser algo como <code>POST /usuario</code>.</li> <li>Definir os m\u00e9todos HTTP - Cada endpoint deve ser associado a um m\u00e9todo HTTP espec\u00edfico que define a opera\u00e7\u00e3o que est\u00e1 sendo realizada. Por exemplo, um endpoint para criar um novo recurso deve usar o m\u00e9todo HTTP <code>POST</code>, enquanto um endpoint para atualizar um recurso existente deve usar o m\u00e9todo HTTP <code>PUT</code> ou <code>PATCH</code>.</li> <li>Definir os par\u00e2metros - Os endpoints podem incluir par\u00e2metros na URL, como IDs de recursos, ou como parte do corpo da solicita\u00e7\u00e3o HTTP. Certifique-se de definir claramente quais par\u00e2metros s\u00e3o necess\u00e1rios para cada endpoint.</li> <li>Documentar a API - Documente cada endpoint da API, incluindo sua URL, m\u00e9todo HTTP, par\u00e2metros, corpo da solicita\u00e7\u00e3o e resposta. A documenta\u00e7\u00e3o deve ser clara e f\u00e1cil de entender.</li> <li>Testar a API - Teste cada endpoint da API para garantir que ele esteja funcionando corretamente e que esteja respondendo corretamente \u00e0s solicita\u00e7\u00f5es HTTP.</li> </ul> <p>Ao seguir esses passos, \u00e9 poss\u00edvel definir endpoints de API claros e f\u00e1ceis de usar para os clientes, facilitando a integra\u00e7\u00e3o de outras aplica\u00e7\u00f5es e servi\u00e7os com sua API.</p>"},{"location":"nodeJs/_05_Definindo%20os%20Endpoints/#criando-endpoints","title":"Criando Endpoints","text":"<p>\u00c9 comum organizar os endpoints em um diret\u00f3rio separado em uma API Node para manter uma estrutura de c\u00f3digo mais organizada e escal\u00e1vel. Essa abordagem ajuda a separar a l\u00f3gica de neg\u00f3cios da camada de infraestrutura e a facilitar a manuten\u00e7\u00e3o e a adi\u00e7\u00e3o de novos endpoints \u00e0 medida que a API cresce.</p> <p>Uma boa pr\u00e1tica \u00e9 criar um diret\u00f3rio chamado <code>routes</code> ou <code>controllers</code>, onde os arquivos contendo as defini\u00e7\u00f5es dos endpoints s\u00e3o mantidos. Esses arquivos podem ser nomeados de acordo com a funcionalidade que eles oferecem, como <code>clientes.js</code>, <code>enderecos.js</code> ou <code>produtos.js</code>, por exemplo.</p> <p>Cada arquivo de defini\u00e7\u00e3o de endpoint deve exportar um objeto com as rotas correspondentes ao endpoint. Por exemplo, um arquivo <code>clientes.js</code> pode conter as rotas <code>/clientes</code>, <code>/clientes/:id</code> etc.</p> <p>Um exemplo de c\u00f3digo para criar um endpoint <code>/clientes</code> usando o framework Express em um arquivo <code>clientes.js</code> dentro de um diret\u00f3rio <code>controllers</code> seria:</p> <pre><code>// src/controllers/clientes.js\nconst express = require('express')\nconst router = express.Router()\n\n// Importa o Models Cliente\nconst Cliente = require(\"../models/Clientes\")\n\n// Define a rota para buscar todos os clientes\nrouter.get('/', async (req, res) =&gt; {\ntry {\n// Busca todos os clientes, mas exclui a senha da resposta\nconst clientes = await Cliente.findAll({\nattributes: { exclude: [\"senha\"] } // Atributos que devem ser exclu\u00eddos da resposta\n});\n// Envia a resposta como JSON com status 200 (OK)\nres.status(200).json(clientes);\n} catch (error) {\n// Em caso de erro, loga o erro no console e envia uma mensagem de erro com status 500 (Erro interno do servidor)\nconsole.error(error);\nres.status(500).send(\"Erro interno do servidor\");\n}\n});\n\n// Define a rota para buscar um cliente pelo ID\nrouter.get('/:id', async (req, res) =&gt; {\ntry {\n// Busca um cliente pelo ID, mas exclui a senha e o ID da resposta\nconst cliente = await Cliente.findByPk(req.params.id, {\nattributes: { exclude: [\"senha\", \"id\"] } // Atributos que devem ser exclu\u00eddos da resposta\n});\n// Envia a resposta como JSON com status 200 (OK)\nres.status(200).json(cliente);\n} catch (error) {\n// Em caso de erro, loga o erro no console e envia uma mensagem de erro com status 500 (Erro interno do servidor)\nconsole.error(error);\nres.status(500).send(\"Erro interno do servidor\");\n}\n});\n\n// Define a rota para Criar um cliente\nrouter.post('/', async (req, res) =&gt; {\ntry {\n// Cria um novo cliente com os dados recebidos no corpo da requisi\u00e7\u00e3o\nconst cliente = await Cliente.create(req.body);\n// Envia a resposta como JSON com status 201 (Created)\nres.status(201).json(cliente);\n} catch (error) {\n// Em caso de erro, loga o erro no console e envia uma mensagem de erro com status 500 (Erro interno do servidor)\nconsole.error(error);\nres.status(500).send(\"Erro interno do servidor\");\n}\n});\n\n// Define a rota para atualizar um cliente pelo ID\nrouter.put('/:id', async (req, res) =&gt; {\ntry {\n// Busca o cliente pelo ID\nconst cliente = await Cliente.findByPk(req.params.id);\n\n// Verifica se o cliente foi encontrado\nif (!cliente) {\nreturn res.status(404).json({ error: 'Cliente n\u00e3o encontrado' });\n}\n\n// Atualiza as informa\u00e7\u00f5es do cliente\nconst updatedCliente = await cliente.update(req.body);\n\n// Retorna o cliente atualizado como resposta\nres.json(updatedCliente);\n} catch (error) {\n// Em caso de erro, loga o erro e retorna uma mensagem de erro ao cliente\nconsole.log(error);\nres.status(500).json({ error: 'Erro ao atualizar o cliente' });\n}\n});\n\n// Define a rota para apagar um cliente pelo ID\nrouter.delete('/:id', async (req, res) =&gt; {\ntry {\n// Busca um cliente pelo ID\nconst cliente = await Cliente.findByPk(req.params.id);\n// Verifica se o cliente foi encontrado\nif (!cliente) {\n// Se o cliente n\u00e3o foi encontrado, envia uma mensagem de erro com status 404 (N\u00e3o encontrado)\nreturn res.status(404).send(\"Cliente n\u00e3o encontrado\");\n}\n// Remove o cliente do banco de dados\nawait cliente.destroy();\n// Envia a resposta com status 204 (No Content) para indicar que o cliente foi removido com sucesso\nres.sendStatus(204);\n} catch (error) {\n// Em caso de erro, loga o erro no console e envia uma mensagem de erro com status 500 (Erro interno do servidor)\nconsole.error(error);\nres.status(500).send(\"Erro interno do servidor\");\n}\n});\n\n\nmodule.exports = router\n</code></pre> <p>O c\u00f3digo apresentado \u00e9 um arquivo de defini\u00e7\u00e3o de rotas para uma API RESTful em Node.js. Primeiramente, ele importa o m\u00f3dulo 'express' e cria um novo objeto de roteador com o m\u00e9todo 'Router()' desse m\u00f3dulo.</p> <p>Em seguida, ele importa o modelo de dados Cliente e define rotas para buscar, criar, atualizar e deletar clientes.</p> <ul> <li> <p>'/clientes' permite atravez do m\u00e9todo HTTP GET a busca de todos os clientes no banco de dados, excluindo a senha dos clientes retornados na resposta.</p> </li> <li> <p>'/clientes/:id' permite a busca de um cliente espec\u00edfico no banco de dados pelo seu ID, tamb\u00e9m excluindo a senha e o ID do cliente na resposta.</p> </li> <li> <p>'/clientes' com m\u00e9todo HTTP POST \u00e9 utilizada para criar um novo cliente, recebendo os dados do cliente no corpo da requisi\u00e7\u00e3o.</p> </li> <li> <p>'/clientes/:id' com m\u00e9todo HTTP PUT \u00e9 utilizada para atualizar as informa\u00e7\u00f5es de um cliente espec\u00edfico pelo seu ID.</p> </li> <li> <p>'/clientes/:id' com m\u00e9todo HTTP DELETE \u00e9 utilizada para excluir um cliente do banco de dados pelo seu ID.</p> </li> </ul> <p>Em caso de erro em alguma dessas opera\u00e7\u00f5es, a API retorna uma mensagem de erro com status 500 (Erro interno do servidor). Se algum cliente n\u00e3o for encontrado em opera\u00e7\u00f5es de busca, retorna uma mensagem de erro com status 404 (N\u00e3o encontrado).</p> <p>Esse arquivo define um roteador do Express que possui as rotas <code>/users</code>, <code>/users/:id</code>, <code>/users/:id/orders</code>, <code>/users/:id/orders/:orderId</code> etc. O c\u00f3digo para cada rota pode ser definido dentro de cada manipulador de rota correspondente, como mostrado nos coment\u00e1rios acima.</p> <p>O mesmo padr\u00e3o pode ser utilizado para criar o endpoint <code>/enderecos</code> usando o framework Express em um arquivo <code>usr/controllers/enderecos.js</code> :</p> <pre><code>// usr/controllers/enderecos.js\nconst express = require('express')\nconst router = express.Router()\n\n// Importa o Models Endereco\nconst Endereco = require(\"../../models/Enderecos\")\n\n// Define a rota para buscar todos os enderecos\nrouter.get('/', async (req, res) =&gt; {\ntry {\n// Busca todos os enderecos\nconst enderecos = await Endereco.findAll({\nattributes: { exclude: [\"senha\"] } // Atributos que devem ser exclu\u00eddos da resposta\n});\n// Envia a resposta como JSON com status 200 (OK)\nres.status(200).json(enderecos);\n} catch (error) {\n// Em caso de erro, loga o erro no console e envia uma mensagem de erro com status 500 (Erro interno do servidor)\nconsole.error(error);\nres.status(500).send(\"Erro interno do servidor\");\n}\n});\n\n// Define a rota para buscar um endereco pelo ID\nrouter.get('/:id', async (req, res) =&gt; {\ntry {\n// Busca um endereco pelo ID, mas exclui a senha e o ID da resposta\nconst endereco = await Endereco.findByPk(req.params.id, {\nattributes: { exclude: [\"senha\", \"id\"] } // Atributos que devem ser exclu\u00eddos da resposta\n});\n// Envia a resposta como JSON com status 200 (OK)\nres.status(200).json(endereco);\n} catch (error) {\n// Em caso de erro, loga o erro no console e envia uma mensagem de erro com status 500 (Erro interno do servidor)\nconsole.error(error);\nres.status(500).send(\"Erro interno do servidor\");\n}\n});\n\n// Define a rota para Criar um endereco\nrouter.post('/', async (req, res) =&gt; {\ntry {\n// Cria um novo endereco com os dados recebidos no corpo da requisi\u00e7\u00e3o\nconst endereco = await Endereco.create(req.body);\n// Envia a resposta como JSON com status 201 (Created)\nres.status(201).json(endereco);\n} catch (error) {\n// Em caso de erro, loga o erro no console e envia uma mensagem de erro com status 500 (Erro interno do servidor)\nconsole.error(error);\nres.status(500).send(\"Erro interno do servidor\");\n}\n});\n\n// Define a rota para atualizar um endereco pelo ID\nrouter.put('/:id', async (req, res) =&gt; {\ntry {\n// Busca o endereco pelo ID\nconst endereco = await Endereco.findByPk(req.params.id);\n\n// Verifica se o endereco foi encontrado\nif (!endereco) {\nreturn res.status(404).json({ error: 'Endereco n\u00e3o encontrado' });\n}\n\n// Atualiza as informa\u00e7\u00f5es do endereco\nconst updatedEndereco = await endereco.update(req.body);\n\n// Retorna o endereco atualizado como resposta\nres.json(updatedEndereco);\n} catch (error) {\n// Em caso de erro, loga o erro e retorna uma mensagem de erro ao endereco\nconsole.log(error);\nres.status(500).json({ error: 'Erro ao atualizar o endereco' });\n}\n});\n\n// Define a rota para apagar um endereco pelo ID\nrouter.delete('/:id', async (req, res) =&gt; {\ntry {\n// Busca um endereco pelo ID\nconst endereco = await Endereco.findByPk(req.params.id);\n// Verifica se o endereco foi encontrado\nif (!endereco) {\n// Se o endereco n\u00e3o foi encontrado, envia uma mensagem de erro com status 404 (N\u00e3o encontrado)\nreturn res.status(404).send(\"Endereco n\u00e3o encontrado\");\n}\n// Remove o endereco do banco de dados\nawait endereco.destroy();\n// Envia a resposta com status 204 (No Content) para indicar que o endereco foi removido com sucesso\nres.sendStatus(204);\n} catch (error) {\n// Em caso de erro, loga o erro no console e envia uma mensagem de erro com status 500 (Erro interno do servidor)\nconsole.error(error);\nres.status(500).send(\"Erro interno do servidor\");\n}\n});\n\n\nmodule.exports = router\n</code></pre> <p>Essa \u00e9 apenas uma abordagem poss\u00edvel para criar endpoints em uma API Node, e existem v\u00e1rias outras maneiras de fazer isso, dependendo das necessidades espec\u00edficas de cada API.</p> <p>para que essas rotas possam ser utilizadas por um servidor NodeJs temos que  instancia-las, \u00e9 comum criar um arquivo separado para gerenciar as rotas. Nesse arquivo, geralmente s\u00e3o definidos os prefixos dos endpoints da API. N\u00e3o h\u00e1 uma conven\u00e7\u00e3o oficial para o nome dos arquivos de configura\u00e7\u00e3o de rotas em Node.js, mas geralmente os desenvolvedores utilizam nomes como \"routes.js\", \"controllers/index.js\", \"api.js\", \"apiRoutes.js\", \"router.js\", entre outros.</p> <p>vamaos utilizar o <code>src/controllers/index.js</code>, que ficara com o seguinte codigo.</p> <pre><code>// src/controllers/index.js\nconst express = require('express');\nconst router = express.Router();\n\n// Importa as rotas do arquivo \"clientes.js\"\nconst clienteRouters = require(\"./clientes\")\n// Importa as rotas do arquivo \"enderecos.js\"\nconst enderecoRouters = require(\"./enderecos\")\n\n// Registra as rotas do arquivo \"clientes.js\" no path \"/cliente\"\nrouter.use(\"/clientes\", clienteRouters);\n// Registra as rotas do arquivo \"enderecos.js\" no path \"/endereco\"\nrouter.use(\"/enderecos\", enderecoRouters);\n\n// Exporta as rotas registradas\nmodule.exports = router;\n</code></pre> <p>Nesse c\u00f3digo, um arquivo de rotas central \u00e9 criado para importar todas as rotas da API. As rotas s\u00e3o separadas em arquivos espec\u00edficos, onde cada arquivo cont\u00e9m as rotas para uma entidade ou recurso espec\u00edfico da API. As rotas s\u00e3o registradas usando o m\u00e9todo <code>use()</code> do router do Express.</p> <p>A partir daqui, voc\u00ea pode come\u00e7ar a criar as rotas da API RESTful, definindo as opera\u00e7\u00f5es HTTP, os parametros e as respostas esperadas. O express facilita muito a cria\u00e7\u00e3o de rotas e manipula\u00e7\u00e3o de requisi\u00e7\u00f5es e respostas HTTP. Com as rotas definidas, voc\u00ea pode criar a l\u00f3gica de neg\u00f3cios da aplica\u00e7\u00e3o, que pode incluir acesso a banco de dados, autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o, valida\u00e7\u00e3o de dados, entre outros.</p>"},{"location":"nodeJs/_05_Definindo%20os%20Endpoints/#parametros","title":"Par\u00e2metros","text":"<p>Par\u00e2metros de rotas, ou route parameters, s\u00e3o uma forma de passar informa\u00e7\u00f5es din\u00e2micas para a sua aplica\u00e7\u00e3o atrav\u00e9s da URL. Eles s\u00e3o utilizados para identificar um recurso espec\u00edfico, como um usu\u00e1rio ou um produto, ou para passar  informa\u00e7\u00f5es adicionais para a nossa aplica\u00e7\u00e3o. Podemos dividir os par\u00e2metros em:</p> <ul> <li>Par\u00e2metros de rota Em uma URL, os par\u00e2metros de rota (Route Parameters) s\u00e3o definidos ap\u00f3s a rota base e s\u00e3o indicados pelo caractere <code>:</code> seguido do nome do par\u00e2metro. Por exemplo, considerando a rota <code>/users/:id</code>, o par\u00e2metro <code>id</code> \u00e9 um par\u00e2metro de rota.</li> </ul> <p>Ao receber uma requisi\u00e7\u00e3o contendo um par\u00e2metro de rota, o Express armazena o valor desse par\u00e2metro em um objeto chamado <code>params</code>, que \u00e9 uma propriedade do objeto <code>request</code> (ou <code>req</code>, para abreviar). O valor do par\u00e2metro pode ser acessado atrav\u00e9s desse objeto.</p> <p>Um exemplo de como usar par\u00e2metros foi Definido na rota para buscar um endereco pelo ID mencionado no exemplo anterior.</p> <p>Ao final desta etapa voc\u00ea tera a seguinte estrutura de diretorio:</p> <pre><code>nome-do-projeto/\n\u251c\u2500\u2500 src/\n|   \u251c\u2500\u2500 config/\n|   \u2502   \u2514\u2500\u2500 database.js\n|   \u251c\u2500\u2500 controllers\n|   |   \u2514\u2500\u2500 clientes.js\n|   |   \u2514\u2500\u2500 enderecos.js\n|   |   \u2514\u2500\u2500 index.js\n|   \u251c\u2500\u2500 database\n|   |   \u251c\u2500\u2500 migrations/\n|   |   |   \u2514\u2500\u2500 data-clientes.js\n|   |   |   \u2514\u2500\u2500 data-enderecos.js\n|   |   \u2514\u2500\u2500 index.js\n|   \u251c\u2500\u2500 models\n|   |   \u2514\u2500\u2500 Clientes.js\n|   |   \u2514\u2500\u2500 Enderecos.js\n|   |   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 node_modules/\n|   \u2514\u2500\u2500 ... \n\u251c\u2500\u2500 .sequelizerc\n\u251c\u2500\u2500 package-lock.json\n\u2514\u2500\u2500 package.json\n</code></pre>"},{"location":"nodeJs/_06_Configurando-Servidor-NodeJs/","title":"06 Configurando Servidor NodeJs","text":""},{"location":"nodeJs/_06_Configurando-Servidor-NodeJs/#configurando-o-servidor","title":"Configurando o servidor","text":"<p>Nesta etapa iremos desenvolver o c\u00f3digo que \u00e9 respons\u00e1vel por configurar e iniciar um servidor HTTP utilizando o framework Express em Node.js. A classe <code>App</code> cria uma inst\u00e2ncia do servidor Express e define os middlewares e rotas que ser\u00e3o utilizados.</p> <p>Na fun\u00e7\u00e3o <code>middlewares()</code>, \u00e9 definido um middleware que faz o parsing das requisi\u00e7\u00f5es para o formato JSON.</p> <p>Na fun\u00e7\u00e3o <code>routes()</code>, \u00e9 definido o uso das rotas importadas do m\u00f3dulo <code>./controllers</code> para o caminho <code>/api/v1</code>.</p> <p>Por fim, a inst\u00e2ncia do servidor \u00e9 exportada como um m\u00f3dulo Node.js, que pode ser utilizado em outros arquivos para iniciar o servidor com a chamada <code>require('./app')</code>.</p> <p>Um exemplo b\u00e1sico de como configurar um servidor HTTP utilizando o Express em Node.js:</p> <pre><code>// src/app.js\n// Importa o framework Express\nconst express = require(\"express\");\n\n// Importa as rotas definidas no arquivo controllers.js\nconst routes = require(\"./controllers\");\n\n// Define a rota base para as APIs\nroutes.use('/api/v1', routes);\n\n// Importa as configura\u00e7\u00f5es do banco de dados\nrequire(\"./database\");\n\nclass App {\nconstructor() {\n// Inicializa o servidor\nthis.server = express();\n// Configura os middlewares\nthis.middlewares();\n// Configura as rotas\nthis.routes();\n}\n\n// Configura os middlewares utilizados pelo servidor\nmiddlewares() {\n// Configura o servidor para interpretar os dados enviados no formato JSON\nthis.server.use(express.json());\n}\n\n// Configura as rotas utilizadas pelo servidor\nroutes() {\n// Define as rotas baseadas no arquivo controllers.js\nthis.server.use(routes);\n}\n}\n\n// Exporta o servidor configurado e iniciado\nmodule.exports = new App().server;\n</code></pre> <p>A classe <code>App</code> \u00e9 respons\u00e1vel por configurar o servidor, seus middlewares e rotas. A classe \u00e9 inicializada no final do c\u00f3digo e seu atributo <code>server</code> \u00e9 exportado para ser utilizado em outros arquivos.</p> <p>A vari\u00e1vel <code>express</code> \u00e9 respons\u00e1vel por importar o framework Express.</p> <p>A vari\u00e1vel <code>routes</code> \u00e9 respons\u00e1vel por importar as rotas definidas no arquivo <code>controllers.js</code>.</p> <p>A linha <code>routes.use('/api/v1', routes)</code> define a rota base para todas as APIs definidas no arquivo <code>controllers.js</code>. Neste caso, todas as rotas ter\u00e3o como prefixo a string <code>/api/v1</code>.</p> <p>A linha <code>require(\"./database\")</code> importa as configura\u00e7\u00f5es do banco de dados utilizado pela aplica\u00e7\u00e3o.</p> <p>A fun\u00e7\u00e3o <code>middlewares</code> \u00e9 respons\u00e1vel por configurar os middlewares utilizados pelo servidor. Neste caso, o servidor \u00e9 configurado para interpretar os dados enviados no formato JSON.</p> <p>A fun\u00e7\u00e3o <code>routes</code> \u00e9 respons\u00e1vel por configurar as rotas utilizadas pelo servidor. Neste caso, o servidor \u00e9 configurado para utilizar as rotas definidas no arquivo <code>controllers.js</code>.</p> <p>Por fim, a classe <code>App</code> \u00e9 exportada com seu atributo <code>server</code> j\u00e1 iniciado, para que possa ser utilizada em outros arquivos.</p>"},{"location":"nodeJs/_06_Configurando-Servidor-NodeJs/#testando-o-servidor","title":"Testando o servidor","text":"<p>Ap\u00f3s configurarmos o servidor em <code>app.js</code> podemos criar um arquivo <code>server.js</code> para inicializar o servidor e ouvir as requisi\u00e7\u00f5es HTTP na porta especificada. O arquivo <code>server.js</code> \u00e9 o ponto de entrada da aplica\u00e7\u00e3o, onde podemos configurar vari\u00e1veis de ambiente, inicializar o banco de dados e outros servi\u00e7os, al\u00e9m de iniciar o servidor HTTP.</p> <p>um exemplo b\u00e1sico de arquivo <code>server.js</code> que utiliza o arquivo <code>app.js</code> para configurar e iniciar o servidor:</p> <pre><code>// Importa o m\u00f3dulo que inicializa a aplica\u00e7\u00e3o\nconst app = require('./app');\n\n// Define a porta em que o servidor ir\u00e1 escutar, utilizando a vari\u00e1vel de ambiente \"PORT\" ou, caso n\u00e3o esteja definida, a porta 3000\nconst port = process.env.PORT || 3000;\n\n// Inicia o servidor na porta especificada, e exibe uma mensagem no console para informar que a aplica\u00e7\u00e3o est\u00e1 sendo executada\napp.listen(port, () =&gt; {\nconsole.log(`Servidor iniciado na porta ${port}`);\n});\n</code></pre> <p>Basicamente, este arquivo inicia o servidor na porta especificada utilizando o m\u00f3dulo <code>app.js</code> que cont\u00e9m a defini\u00e7\u00e3o da aplica\u00e7\u00e3o, e exibe uma mensagem no console para informar que o servidor foi iniciado com sucesso. Ele tamb\u00e9m utiliza a vari\u00e1vel de ambiente <code>PORT</code>, caso esteja definida, para especificar a porta em que o servidor ir\u00e1 escutar. Isso \u00e9 \u00fatil quando a aplica\u00e7\u00e3o est\u00e1 hospedada em um ambiente em nuvem, como o Heroku, que pode especificar a porta em que a aplica\u00e7\u00e3o deve ser executada atrav\u00e9s dessa vari\u00e1vel de ambiente. Caso a vari\u00e1vel <code>PORT</code> n\u00e3o esteja definida, o servidor ir\u00e1 escutar na porta <code>3000</code> por padr\u00e3o.</p> <p>Ao utilizar o <code>server.js</code>, tamb\u00e9m podemos separar as configura\u00e7\u00f5es do servidor da l\u00f3gica da aplica\u00e7\u00e3o em si, o que torna o c\u00f3digo mais organizado e modular. Al\u00e9m disso, podemos executar outras tarefas antes de iniciar o servidor, como por exemplo a valida\u00e7\u00e3o de vari\u00e1veis de ambiente e a configura\u00e7\u00e3o de bibliotecas e servi\u00e7os externos.</p> <p>Para rodar o Sevidor a partir do <code>server.js</code>, podemos executar o seguinte comando:</p> <pre><code>node src/server.js\n</code></pre> <p>Isso iniciar\u00e1 o servidor na porta que foi definida, neste caso a 3000. Abra um navegador e acesse <code>http://localhost:3000</code>. Voc\u00ea deve ver a mensagem \"Cannot GET /\" isso acontece porque n\u00e3o h\u00e1 nenhuma rota definida para a raiz do servidor. Quando o servidor recebe uma solicita\u00e7\u00e3o GET para a raiz, ele n\u00e3o sabe como responder porque n\u00e3o h\u00e1 uma rota definida para essa solicita\u00e7\u00e3o espec\u00edfica, pois definimos a rota base para as APIs <code>routes.use('/api/v1', routes)</code> em <code>src/app</code> e em cada rota em <code>controllers/index.js</code> definimos um prefixo de rota <code>router.use(\"/cliente\", clienteRouters);</code>, sendo assim temos a seguinte estrutura de rotas:</p> <ul> <li>Rota base: <code>http://localhost:3000/api/v1</code> definida nas configura\u00e7oes de <code>app.js</code>.</li> <li>Rotas da API: que \u00e9 composta pela rota base mais o prefixo de rota definido em <code>src/controllers/index.js</code>, exemplo: <code>http://localhost:3000/api/v1/clientes</code></li> </ul> <pre><code>http://localhost:3000/api/v1/clientes\n</code></pre> <ul> <li>Rotas com parametros que permitem que o cliente da API forne\u00e7a informa\u00e7\u00f5es adicionais para a rota,Exemplo <code>http://localhost:3000/api/v1/clientes/:id</code></li> </ul> <pre><code>http://localhost:3000/api/v1/clientes/1\n</code></pre> <pre><code>nome-do-projeto/\n\u251c\u2500\u2500 src/\n|   \u251c\u2500\u2500 config/\n|   \u2502   \u2514\u2500\u2500 database.js\n|   \u251c\u2500\u2500 controllers\n|   |   \u2514\u2500\u2500 clientes.js\n|   |   \u2514\u2500\u2500 enderecos.js\n|   |   \u2514\u2500\u2500 index.js\n|   \u251c\u2500\u2500 database\n|   |   \u251c\u2500\u2500 migrations/\n|   |   |   \u2514\u2500\u2500 data-clientes.js\n|   |   |   \u2514\u2500\u2500 data-enderecos.js\n|   |   \u2514\u2500\u2500 index.js\n|   \u251c\u2500\u2500 models\n|   |   \u2514\u2500\u2500 Clientes.js\n|   |   \u2514\u2500\u2500 Enderecos.js\n|   |   \u2514\u2500\u2500 ...\n|   \u251c\u2500\u2500 app.js\n|   \u251c\u2500\u2500 server.js\n\u251c\u2500\u2500 node_modules/\n|   \u2514\u2500\u2500 ... \n\u251c\u2500\u2500 .sequelizerc\n\u251c\u2500\u2500 package-lock.json\n\u2514\u2500\u2500 package.json\n</code></pre>"},{"location":"nodeJs/_07_Insomnia/","title":"07 Insomnia","text":""},{"location":"nodeJs/_07_Insomnia/#insomnia","title":"Insomnia","text":"<p>Insomnia \u00e9 uma ferramenta de cliente REST que permite testar APIs HTTP. Com Insomnia, voc\u00ea pode enviar requisi\u00e7\u00f5es HTTP para servidores e analisar as respostas.</p>"},{"location":"nodeJs/_07_Insomnia/#instalando-o-insomnia","title":"Instalando o Insomnia","text":"<p>Para come\u00e7ar, voc\u00ea precisa baixar e instalar o Insomnia em seu computador. Voc\u00ea pode fazer o download do Insomnia em seu site oficial ou atrav\u00e9s de gerenciadores de pacotes como o NPM.</p> <p>adicionando repositorio Insomnia:</p> <pre><code>echo \"deb [trusted=yes arch=amd64] https://download.konghq.com/insomnia-ubuntu/ default all\" | sudo tee -a /etc/apt/sources.list.d/insomnia.list\n</code></pre>"},{"location":"nodeJs/_07_Insomnia/#atualizando-repositorios-e-instalando-insomnia","title":"Atualizando repositorios e instalando Insomnia","text":"<pre><code>sudo apt-get update &amp;&amp; sudo apt-get install insomnia\n</code></pre>"},{"location":"nodeJs/_07_Insomnia/#criando-uma-requisicao","title":"Criando uma requisi\u00e7\u00e3o","text":"<ul> <li>Para criar uma nova requisi\u00e7\u00e3o, clique em \"New Request\" na barra lateral do Insomnia.</li> <li>Selecione o met\u00f3do GET.</li> <li>Insira a URL https://viacep.com.br/ws/78048135/json/</li> <li>Aperte Send</li> </ul> <p>A resposta esperada \u00e9:</p> <p>{   \"cep\": \"78048-135\",   \"logradouro\": \"Avenida Rep\u00fablica do L\u00edbano\",   \"complemento\": \"(Lot Rodovi\u00e1ria Parque)\",   \"bairro\": \"Despraiado\",   \"localidade\": \"Cuiab\u00e1\",   \"uf\": \"MT\",   \"ibge\": \"5103403\",   \"gia\": \"\",   \"ddd\": \"65\",   \"siafi\": \"9067\" }</p> <p>Voc\u00ea pode adicionar mais cabe\u00e7alhos ou par\u00e2metros de consulta, dependendo da API que estiver utilizando. Voc\u00ea tamb\u00e9m pode utilizar outros m\u00e9todos HTTP, como POST, PUT ou DELETE. O Insomnia permite configurar todos esses detalhes na cria\u00e7\u00e3o de sua requisi\u00e7\u00e3o.</p>"},{"location":"nodeJs/_07_Insomnia/#salvar-e-importar-requisicoes","title":"Salvar e importar requisi\u00e7\u00f5es","text":"<p>Se voc\u00ea precisa reutilizar uma requisi\u00e7\u00e3o que j\u00e1 criou, pode salv\u00e1-la clicando em \"Save\" na barra superior do Insomnia. Para importar uma requisi\u00e7\u00e3o, clique em \"Import/Export\" e selecione o arquivo JSON que cont\u00e9m a requisi\u00e7\u00e3o.</p>"},{"location":"nodeJs/_07_Insomnia/#requisicoes-da-api","title":"Requisi\u00e7\u00f5es da Api","text":"<ol> <li> <p>Requisi\u00e7\u00e3o do tipo get para retornar todos os clientes</p> </li> <li> <p>clique em \"New Request\" na barra lateral do Insomnia.</p> </li> <li>Selecione o met\u00f3do GET.</li> <li> <p>Insira a URL http://localhost:3000/api/v1/cliente/.</p> </li> <li> <p>Requisi\u00e7\u00e3o do tipo get para retornar um clientes, nescessario passar o id</p> </li> <li> <p>clique em \"New Request\" na barra lateral do Insomnia.</p> </li> <li>Selecione o met\u00f3do GET.</li> <li> <p>Insira a URL http://localhost:3000/api/v1/cliente/1.</p> </li> <li> <p>Requisi\u00e7\u00e3o do tipo post para criar um clientes</p> </li> <li> <p>clique em \"New Request\" na barra lateral do Insomnia.</p> </li> <li>Selecione o met\u00f3do POST.</li> <li>Insira a URL http://localhost:3000/api/v1/cliente.</li> <li>Selecione no body a op\u00e7\u00e3o json.</li> <li>Insira os dados no formato json.</li> </ol> <pre><code>  {\n\"nome\": \"Maria\", \"email\": \"jose@email\", \"senha\": 123\n}\n</code></pre> <ol> <li> <p>Requisi\u00e7\u00e3o do tipo put para editar um clientes, nescessario passar o id</p> </li> <li> <p>clique em \"New Request\" na barra lateral do Insomnia.</p> </li> <li>Selecione o met\u00f3do PUT.</li> <li>Insira a URL http://localhost:3000/api/v1/cliente/1.</li> <li>Selecione no body a op\u00e7\u00e3o json.</li> <li>Insira os dados de edi\u00e7\u00e3o no formato json.</li> </ol> <pre><code>  {\n\"nome\": \"Jose\", \"email\": \"maria@email\", \"senha\": 123456\n}\n</code></pre> <ol> <li> <p>Requisi\u00e7\u00e3o do tipo delete para deletar um clientes, nescessario passar o id</p> </li> <li> <p>clique em \"New Request\" na barra lateral do Insomnia.</p> </li> <li>Selecione o met\u00f3do DELETE.</li> <li>Insira a URL http://localhost:3000/api/v1/cliente/1.</li> </ol>"},{"location":"reactJS/_01_Introdu%C3%A7%C3%A3o/","title":"01 Introdu\u00e7\u00e3o","text":""},{"location":"reactJS/_01_Introdu%C3%A7%C3%A3o/#introducao-a-reactjs","title":"Introdu\u00e7\u00e3o a ReactJs","text":"<p>React JS \u00e9 um framework de c\u00f3digo aberto desenvolvido pelo Facebook que \u00e9 amplamente utilizado para criar interfaces de usu\u00e1rio interativas em aplica\u00e7\u00f5es web. O React \u00e9 baseado em um modelo de programa\u00e7\u00e3o orientado a componentes, no qual a interface do usu\u00e1rio \u00e9 constru\u00edda a partir de componentes reutiliz\u00e1veis e independentes.</p> <p>O React utiliza um modelo de programa\u00e7\u00e3o declarativa, no qual os desenvolvedores descrevem o que eles querem que a interface do usu\u00e1rio fa\u00e7a e o React cuida de como isso ser\u00e1 feito. Esse modelo reduz a complexidade do c\u00f3digo e torna mais f\u00e1cil a manuten\u00e7\u00e3o e atualiza\u00e7\u00e3o da aplica\u00e7\u00e3o.</p> <p>Al\u00e9m disso, ele utiliza um algoritmo de reconcilia\u00e7\u00e3o virtual que torna mais eficiente a atualiza\u00e7\u00e3o da interface do usu\u00e1rio, evitando a necessidade de atualizar a p\u00e1gina inteira. Isso resulta em uma melhor experi\u00eancia do usu\u00e1rio e um desempenho mais r\u00e1pido da aplica\u00e7\u00e3o.</p> <p>O React tamb\u00e9m \u00e9 altamente extens\u00edvel, permitindo que os desenvolvedores criem suas pr\u00f3prias bibliotecas e plugins para estender a funcionalidade do framework. Al\u00e9m disso, existem v\u00e1rias bibliotecas de terceiros dispon\u00edveis para o React, tornando-o ainda mais vers\u00e1til.</p>"},{"location":"reactJS/_01_Introdu%C3%A7%C3%A3o/#nocoes-de-programacao-funcional","title":"No\u00e7\u00f5es de programa\u00e7\u00e3o funcional","text":"<p>A programa\u00e7\u00e3o funcional \u00e9 um paradigma de programa\u00e7\u00e3o que enfatiza a utiliza\u00e7\u00e3o de fun\u00e7\u00f5es para realizar c\u00e1lculos e transforma\u00e7\u00f5es de dados. Na programa\u00e7\u00e3o funcional, as fun\u00e7\u00f5es s\u00e3o consideradas como valores de primeira classe, o que significa que elas podem ser passadas como par\u00e2metros para outras fun\u00e7\u00f5es e retornadas como resultado de outras fun\u00e7\u00f5es.</p>"},{"location":"reactJS/_01_Introdu%C3%A7%C3%A3o/#componentes-funcionais","title":"Componentes funcionais","text":"<p>Os componentes funcionais s\u00e3o uma das principais caracter\u00edsticas da programa\u00e7\u00e3o funcional em React JS. Eles s\u00e3o criados como fun\u00e7\u00f5es que retornam uma descri\u00e7\u00e3o da interface do usu\u00e1rio.</p> <pre><code>  function Welcome(props) {\nreturn &lt;h1&gt;Hello, {props.name}!&lt;/h1&gt;;\n}\n</code></pre> <p>Este \u00e9 um componente funcional que recebe um objeto props como par\u00e2metro e retorna um elemento h1 com o nome passado como uma das propriedades desse objeto.</p>"},{"location":"reactJS/_01_Introdu%C3%A7%C3%A3o/#imutabilidade","title":"Imutabilidade","text":"<p>React JS utiliza o conceito de imutabilidade para prevenir altera\u00e7\u00f5es acidentais nos dados da aplica\u00e7\u00e3o. Um exemplo disso pode ser visto ao atualizar o estado de um componente. Em vez de modificar diretamente o estado, voc\u00ea deve criar um novo objeto com as altera\u00e7\u00f5es desejadas.</p> <pre><code>  function Counter() {\nconst [count, setCount] = useState(0);\n\nfunction increment() {\nsetCount(count + 1); // ERRADO!\nsetCount(prevCount =&gt; prevCount + 1); // CORRETO!\n}\n\nreturn (\n&lt;div&gt;\n&lt;p&gt;Count: {count}&lt;/p&gt;\n&lt;button onClick={increment}&gt;Increment&lt;/button&gt;\n&lt;/div&gt;\n);\n}\n</code></pre>"},{"location":"reactJS/_02_Iniciando_ReactJS/","title":"02 Iniciando ReactJS","text":""},{"location":"reactJS/_02_Iniciando_ReactJS/#iniciando-um-projeto-com-reactjs","title":"Iniciando um projeto com ReactJS","text":"<p>Iniciar um projeto no React JS requer a instala\u00e7\u00e3o e configura\u00e7\u00e3o adequadas de ferramentas e bibliotecas. Para iniciar um projeto no React JS, siga o passo a passo:</p> <ol> <li> <p>Instale o Node.js: O React JS \u00e9 uma biblioteca baseada no Node.js, por isso, \u00e9 necess\u00e1rio instal\u00e1-lo em seu sistema antes de iniciar um novo projeto React. Voc\u00ea pode fazer o download da vers\u00e3o mais recente do Node.js no site oficial e instalar seguindo as instru\u00e7\u00f5es.</p> </li> <li> <p>Crie um novo projeto.</p> </li> </ol> <pre><code>  npx create-react-app nome-do-seu-projeto\n</code></pre> <ol> <li>Execute o projeto: Depois de criar o projeto, navegue para o diret\u00f3rio do projeto no terminal.</li> </ol> <pre><code>  npm start\n</code></pre> <p>O servidor ser\u00e1 iniciado em <code>http://localhost:3000</code> e qualquer altera\u00e7\u00e3o que voc\u00ea fizer no c\u00f3digo ser\u00e1 refletida automaticamente no navegador.</p>"},{"location":"reactJS/_02_Iniciando_ReactJS/#estrutura-do-projeto","title":"Estrutura do projeto","text":"<pre><code>  my-app/\n  \u251c\u2500\u2500 node_modules/\n  \u251c\u2500\u2500 public/\n  \u2502   \u251c\u2500\u2500 index.html\n  \u2502   \u251c\u2500\u2500 favicon.ico\n  \u2502   \u2514\u2500\u2500 manifest.json\n  \u251c\u2500\u2500 src/\n  \u2502   \u251c\u2500\u2500 App.css\n  \u2502   \u251c\u2500\u2500 App.js\n  \u2502   \u251c\u2500\u2500 App.test.js\n  \u2502   \u251c\u2500\u2500 index.css\n  \u2502   \u251c\u2500\u2500 index.js\n  \u2502   \u251c\u2500\u2500 logo.svg\n  \u2502   \u251c\u2500\u2500 reportWebVitals.js\n  \u2502   \u251c\u2500\u2500 setupTests.js\n  \u251c\u2500\u2500 .gitignore\n  \u251c\u2500\u2500 package-lock.json\n  \u251c\u2500\u2500 package.json\n  \u2514\u2500\u2500 README.md\n</code></pre> <p><code>node_modules</code>: pasta que cont\u00e9m as depend\u00eancias do projeto, instaladas automaticamente pelo npm ou yarn. <code>public</code>: pasta que cont\u00e9m os arquivos p\u00fablicos da aplica\u00e7\u00e3o, como o arquivo HTML principal (index.html) e o arquivo de \u00edcone (favicon.ico). <code>src</code>: pasta que cont\u00e9m o c\u00f3digo-fonte da aplica\u00e7\u00e3o. <code>App.css</code>: arquivo CSS para estiliza\u00e7\u00e3o do componente App. <code>App.js</code>: arquivo JavaScript que define o componente principal App. <code>App.test.js</code>: arquivo de testes para o componente App. <code>index.css</code>: arquivo CSS global para estiliza\u00e7\u00e3o da aplica\u00e7\u00e3o. <code>index.js</code>: arquivo JavaScript que inicia a aplica\u00e7\u00e3o React. <code>logo.svg</code>: arquivo SVG com o logo do React, utilizado como exemplo no c\u00f3digo. <code>reportWebVitals.js</code>: arquivo que cont\u00e9m a fun\u00e7\u00e3o reportWebVitals para medi\u00e7\u00e3o de m\u00e9tricas de desempenho da aplica\u00e7\u00e3o. <code>setupTests.js</code>: arquivo de configura\u00e7\u00e3o para testes. <code>.gitignore</code>: arquivo que lista os arquivos e pastas que devem ser ignorados pelo controle de vers\u00e3o Git. <code>package-lock.json</code>: arquivo gerado automaticamente pelo npm ou yarn que cont\u00e9m informa\u00e7\u00f5es detalhadas sobre as depend\u00eancias instaladas no projeto. <code>package.json</code>: arquivo que cont\u00e9m informa\u00e7\u00f5es sobre o projeto, como nome, descri\u00e7\u00e3o, vers\u00e3o e depend\u00eancias, al\u00e9m de scripts para automatizar tarefas. <code>README.md</code>: arquivo com informa\u00e7\u00f5es sobre o projeto, incluindo como execut\u00e1-lo e como contribuir com ele.</p>"},{"location":"reactJS/_02_Iniciando_ReactJS/#selecione-template","title":"Selecione template","text":"<p>Ao iniciar um novo projeto em React, voc\u00ea pode usar o par\u00e2metro <code>--template</code> para especificar um modelo personalizado para ser usado como ponto de partida. Isso pode ser \u00fatil se voc\u00ea j\u00e1 tem um modelo personalizado criado ou se deseja usar um modelo diferente do padr\u00e3o fornecido pelo Create React App.</p> <pre><code>  npx create-react-app my-app --template [nome do template]\n</code></pre> <p>O Create React App inclui v\u00e1rios modelos diferentes que voc\u00ea pode usar, como cra-template-typescript, cra-template-redux, cra-template-redux-typescript, entre outros.</p> <p>Se desejar usar um modelo personalizado que n\u00e3o est\u00e1 inclu\u00eddo no Create React App, pode especificar a URL do reposit\u00f3rio Git do modelo em vez do nome do modelo.</p> <pre><code>  npx create-react-app my-app --template git+https://github.com/[username]/[reponame].git\n</code></pre> <p>Isso clonar\u00e1 o reposit\u00f3rio Git do modelo e usar\u00e1 os arquivos como ponto de partida para o seu projeto React.</p> <p>Depois de iniciar o projeto com o modelo personalizado, voc\u00ea pode modificar o c\u00f3digo e os arquivos do modelo para atender \u00e0s suas necessidades espec\u00edficas.</p>"},{"location":"reactJS/_03_ReactDom/","title":"03 ReactDom","text":""},{"location":"reactJS/_03_ReactDom/#react-dom","title":"React Dom","text":"<p>React DOM \u00e9 uma biblioteca JavaScript usada para manipular elementos HTML e renderizar componentes React na \u00e1rvore de elementos DOM (Document Object Model) do navegador. Ela \u00e9 respons\u00e1vel por criar e atualizar elementos HTML baseados em componentes React, gerenciando o estado da ap</p>"},{"location":"reactJS/_03_ReactDom/#render","title":"render","text":"<p>O React DOM trabalha em conjunto com o React, permitindo que voc\u00ea crie componentes com c\u00f3digo JSX e, em seguida, os renderize na p\u00e1gina usando o m\u00e9todo ReactDOM.render(). Esse m\u00e9todo recebe dois argumentos: o primeiro \u00e9 o componente React que voc\u00ea deseja renderizar, e o segundo \u00e9 o elemento HTML na p\u00e1gina em que voc\u00ea deseja renderiz\u00e1-lo.</p> <p>O m\u00e9todo render \u00e9 usado para renderizar a aplica\u00e7\u00e3o React em um elemento HTML existente na p\u00e1gina. Ele \u00e9 tipicamente usado no lado do servidor, ou em casos em que o aplicativo \u00e9 renderizado completamente do zero, sem qualquer pr\u00e9-renderiza\u00e7\u00e3o.</p> <pre><code>  import React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction App() {\nreturn (\n&lt;div&gt;\n&lt;h1&gt;Hello, world!&lt;/h1&gt;\n&lt;p&gt;Welcome to my React app.&lt;/p&gt;\n&lt;/div&gt;\n);\n}\n\nReactDOM.render(&lt;App /&gt;, document.getElementById('root'));\n</code></pre> <p>Neste exemplo, o componente App \u00e9 renderizado dentro do elemento HTML com o ID \"root\" usando o m\u00e9todo ReactDOM.render(). Quando a p\u00e1gina \u00e9 carregada, o m\u00e9todo render() \u00e9 chamado para criar uma nova \u00e1rvore de elementos HTML baseados no componente App e adicion\u00e1-la \u00e0 \u00e1rvore de elementos DOM do navegador.</p> <p>Al\u00e9m disso, o React DOM tamb\u00e9m oferece m\u00e9todos para atualizar a interface do usu\u00e1rio quando o estado da aplica\u00e7\u00e3o muda. Por exemplo, o m\u00e9todo ReactDOM.render() pode ser chamado novamente com um novo estado para atualizar a interface do usu\u00e1rio. Al\u00e9m disso, existem outros m\u00e9todos, como ReactDOM.hydrate() e ReactDOM.unmountComponentAtNode(), que s\u00e3o usados para hidratar e remover componentes React do DOM, respectivamente.</p>"},{"location":"reactJS/_03_ReactDom/#hydrate","title":"hydrate","text":"<p>O m\u00e9todo hydrate, por outro lado, \u00e9 usado para fazer uma \"reconstru\u00e7\u00e3o hidratada\" da aplica\u00e7\u00e3o React em um elemento HTML existente na p\u00e1gina. Ele \u00e9 tipicamente usado quando a aplica\u00e7\u00e3o \u00e9 pr\u00e9-renderizada no servidor, mas precisa ser \"hidratada\" no cliente para torn\u00e1-la interativa.</p> <p>A reconstru\u00e7\u00e3o hidratada \u00e9 quando o React detecta o HTML pr\u00e9-renderizado no servidor e \"hidrata\" os componentes, adicionando eventos e comportamentos interativos \u00e0 aplica\u00e7\u00e3o. Isso \u00e9 \u00fatil para melhorar a velocidade de carregamento e a experi\u00eancia do usu\u00e1rio, pois a p\u00e1gina pode ser visualizada instantaneamente com o HTML pr\u00e9-renderizado enquanto o JavaScript \u00e9 baixado e executado em segundo plano para tornar a aplica\u00e7\u00e3o completamente interativa.</p> <p>O m\u00e9todo hydrate \u00e9 semelhante ao m\u00e9todo render, mas em vez de criar novos elementos HTML, ele adiciona comportamentos interativos aos elementos HTML existentes na p\u00e1gina. Por exemplo, se voc\u00ea tiver um bot\u00e3o que deve exibir uma mensagem quando clicado, o m\u00e9todo hydrate adicionaria um evento de clique a esse bot\u00e3o para exibir a mensagem quando necess\u00e1rio.</p> <pre><code>  import React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction App() {\nconst [count, setCount] = React.useState(0);\n\nreturn (\n&lt;div&gt;\n&lt;h1&gt;Counter&lt;/h1&gt;\n&lt;p&gt;Count: {count}&lt;/p&gt;\n&lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n&lt;/div&gt;\n);\n}\n\nReactDOM.hydrate(\n&lt;React.StrictMode&gt;\n&lt;App /&gt;\n&lt;/React.StrictMode&gt;,\ndocument.getElementById('root')\n);\n</code></pre> <p>Neste exemplo, o m\u00e9todo ReactDOM.hydrate \u00e9 usado para hidratar um componente App que foi pr\u00e9-renderizado no servidor. O componente possui um contador que \u00e9 atualizado quando um bot\u00e3o \u00e9 clicado. O m\u00e9todo hydrate adicionar\u00e1 os comportamentos interativos necess\u00e1rios ao HTML pr\u00e9-renderizado, tornando-o totalmente interativo.</p>"},{"location":"reactJS/_04_ReactRouterDom/","title":"04 ReactRouterDom","text":""},{"location":"reactJS/_04_ReactRouterDom/#react-router-dom","title":"React Router Dom","text":"<p>O React Router DOM \u00e9 uma biblioteca JavaScript utilizada para criar aplicativos de p\u00e1gina \u00fanica (SPA) com rotas din\u00e2micas. Ele \u00e9 baseado na biblioteca React e oferece um conjunto de componentes para gerenciar a navega\u00e7\u00e3o de uma aplica\u00e7\u00e3o web.</p> <p>Os componentes principais do React Router DOM s\u00e3o o BrowserRouter, Routes, Route e Link. O BrowserRouter \u00e9 respons\u00e1vel por fornecer o contexto para os componentes de roteamento e deve ser envolvido em torno de todo o aplicativo. O Routes \u00e9 utilizado para encapsular componentes Route. O Route \u00e9 utilizado para definir uma rota espec\u00edfica e renderizar um componente correspondente a essa rota. J\u00e1 o Link \u00e9 utilizado para criar links clic\u00e1veis que levam a uma rota espec\u00edfica.</p> <p>Inicie um novo projeto, abra o arquivo app.js, substitua o conte\u00fado e execute.</p> <pre><code>// src/App.js\n\nimport { BrowserRouter, Routes, Route, Link } from 'react-router-dom';\nimport './App.css';\n\nfunction App() {\nreturn (\n&lt;BrowserRouter&gt;\n&lt;Routes&gt;\n&lt;Route exact path=\"/\" element={&lt;FirstPage /&gt;} /&gt;       &lt;Route path=\"/next\" element={&lt;SecondPage /&gt;} /&gt;         &lt;/Routes&gt;\n&lt;/BrowserRouter&gt;\n);\n}\n\nfunction FirstPage() {\nreturn (\n&lt;div&gt;\n&lt;p&gt;Primeira P\u00e1gina&lt;/p&gt;\n&lt;button type='button'&gt;\n&lt;Link to='/next'&gt;\nPr\u00f3xima P\u00e1gina\n&lt;/Link&gt;\n&lt;/button&gt;\n&lt;/div&gt;\n)\n}\n\nfunction SecondPage() {\nreturn (\n&lt;div&gt;\n&lt;p&gt;Segunda P\u00e1gina&lt;/p&gt;\n&lt;button type='button'&gt;\n&lt;Link to='/'&gt;\nP\u00e1gina Anterior\n&lt;/Link&gt;\n&lt;/button&gt;\n&lt;/div&gt;\n)\n}\n\nexport default App;\n</code></pre> <p>Para executar abra o terminal:</p> <pre><code>  npm start\n</code></pre> <p>Para tornar o c\u00f3digo mais escal\u00e1vel, quebra-se a o c\u00f3digo acima, separando as p\u00e1ginas em arquivos de p\u00e1ginas e a configura\u00e7\u00e3o das rotas em um arquivo separado. Al\u00e9m de criar uma pasta para os estilos.</p> <pre><code>my-app/\n  \u251c\u2500\u2500 node_modules/\n  \u251c\u2500\u2500 public/\n  \u2502   \u251c\u2500\u2500 index.html\n  \u2502   \u251c\u2500\u2500 favicon.ico\n  \u2502   \u2514\u2500\u2500 manifest.json\n  \u251c\u2500\u2500 src/\n  \u2502   \u251c\u2500\u2500 pages\n  \u2502   \u2502   \u251c\u2500\u2500 firstPage.js\n  \u2502   \u2502   \u2514\u2500\u2500 secondPage.js\n  \u2502   \u251c\u2500\u2500 styles\n  \u2502   \u2502   \u251c\u2500\u2500 App.css\n  \u2502   \u2502   \u2514\u2500\u2500 index.css\n  \u2502   \u251c\u2500\u2500 App.js\n  \u2502   \u251c\u2500\u2500 index.js\n  \u2502   \u251c\u2500\u2500 reportWebVitals.js\n  \u2502   \u251c\u2500\u2500 router.js\n  \u2502   \u251c\u2500\u2500 setupTests.js\n  \u251c\u2500\u2500 .gitignore\n  \u251c\u2500\u2500 package-lock.json\n  \u251c\u2500\u2500 package.json\n  \u2514\u2500\u2500 README.md\n</code></pre> <pre><code>// src/index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n&lt;React.StrictMode&gt;\n&lt;App /&gt;\n&lt;/React.StrictMode&gt;\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n</code></pre> <pre><code>// src/pages/firstPage.js\n\nimport {Link} from 'react-router-dom'\n\nfunction FirstPage() {\nreturn (\n&lt;div&gt;\n&lt;p&gt;Primeira P\u00e1gina&lt;/p&gt;\n&lt;button type='button'&gt;\n&lt;Link to='/next'&gt;\nPr\u00f3xima P\u00e1gina\n&lt;/Link&gt;\n&lt;/button&gt;\n&lt;/div&gt;\n)\n}\n\nexport default FirstPage\n</code></pre> <p><code>import {Link} from 'react-router-dom'</code>: Importa o componente Link do pacote react-router-dom. O Link \u00e9 um componente usado para criar links em um aplicativo React. <code>function FirstPage() { ... }</code>: Define o componente FirstPage como uma fun\u00e7\u00e3o que retorna um elemento JSX. O componente \u00e9 definido aqui como uma fun\u00e7\u00e3o, mas tamb\u00e9m poderia ser definido como uma classe. <code>&lt;div&gt; ... &lt;/div&gt;</code>: Cria um elemento div que cont\u00e9m o restante do conte\u00fado da p\u00e1gina. <code>&lt;p&gt;Primeira P\u00e1gina&lt;/p&gt;</code>: Cria um elemento p que cont\u00e9m o texto \"Primeira P\u00e1gina\". <code>&lt;button type='button'&gt; ... &lt;/button&gt;</code>: Cria um bot\u00e3o que cont\u00e9m o link para a pr\u00f3xima p\u00e1gina. O atributo type='button' define o tipo do bot\u00e3o como um bot\u00e3o normal, para evitar que a p\u00e1gina seja recarregada quando o bot\u00e3o \u00e9 clicado. <code>&lt;Link to='/next'&gt; ... &lt;/Link&gt;</code>: Cria um componente Link com o texto \"Pr\u00f3xima P\u00e1gina\" e um atributo ##to## que especifica a rota da pr\u00f3xima p\u00e1gina (/next). <code>export default FirstPage</code>: Exporta o componente FirstPage como o componente padr\u00e3o deste m\u00f3dulo. Isso permite que ele seja importado em outros arquivos do aplicativo usando <code>import FirstPage from './firstPage'</code>.</p> <pre><code>// src/pages/secondPage.js\n\nimport {Link} from 'react-router-dom'\n\nfunction SecondPage() {\nreturn (\n&lt;div&gt;\n&lt;p&gt;Segunda P\u00e1gina&lt;/p&gt;\n&lt;button type='button'&gt;\n&lt;Link to='/'&gt;\nP\u00e1gina Anterior\n&lt;/Link&gt;\n&lt;/button&gt;\n&lt;/div&gt;\n)\n}\n\nexport default SecondPage\n</code></pre> <p><code>import {Link} from 'react-router-dom'</code>: Importa o componente Link do pacote react-router-dom. O Link \u00e9 um componente usado para criar links em um aplicativo React. <code>function SecondPage() { ... }</code>: Define o componente SecondPage como uma fun\u00e7\u00e3o que retorna um elemento JSX. O componente \u00e9 definido aqui como uma fun\u00e7\u00e3o, mas tamb\u00e9m poderia ser definido como uma classe. <code>&lt;div&gt; ... &lt;/div&gt;</code>: Cria um elemento div que cont\u00e9m o restante do conte\u00fado da p\u00e1gina. <code>&lt;p&gt;Primeira P\u00e1gina&lt;/p&gt;</code>: Cria um elemento p que cont\u00e9m o texto \"P\u00e1gina Anterior\". <code>&lt;button type='button'&gt; ... &lt;/button&gt;</code>: Cria um bot\u00e3o que cont\u00e9m o link para a p\u00e1gina anterior. O atributo type='button' define o tipo do bot\u00e3o como um bot\u00e3o normal, para evitar que a p\u00e1gina seja recarregada quando o bot\u00e3o \u00e9 clicado. <code>&lt;Link to='/next'&gt; ... &lt;/Link&gt;</code>: Cria um componente Link com o texto \"P\u00e1gina Anterior\" e um atributo ##to## que especifica a rota da P\u00e1gina Anterior (/). <code>export default FirstPage</code>: Exporta o componente FirstPage como o componente padr\u00e3o deste m\u00f3dulo. Isso permite que ele seja importado em outros arquivos do aplicativo usando <code>import SecondPage from './secondPage'</code>.</p> <pre><code>// src/router.js\n\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\n\nimport FirstPage from './pages/firstPage'\nimport SecondPage from './pages/secondPage'\n\nfunction Router() {\nreturn (\n&lt;BrowserRouter&gt;\n&lt;Routes&gt;\n&lt;Route exact path=\"/\" element={&lt;FirstPage /&gt;} /&gt;       &lt;Route path=\"/next\" element={&lt;SecondPage /&gt;} /&gt;         &lt;/Routes&gt;\n&lt;/BrowserRouter&gt;\n);\n}\n\nexport default Router\n</code></pre> <p><code>import { BrowserRouter, Routes, Route } from 'react-router-dom';</code>: Importa os componentes necess\u00e1rios do pacote react-router-dom. O BrowserRouter \u00e9 um componente que envolve o aplicativo e fornece a funcionalidade de roteamento. O Routes \u00e9 um componente que cont\u00e9m as rotas do aplicativo e o Route \u00e9 um componente que define uma rota em si. <code>import FirstPage from './pages/firstPage'</code>: Importa o componente FirstPage do arquivo firstPage.js, que cont\u00e9m o c\u00f3digo para a primeira p\u00e1gina do aplicativo. <code>import SecondPage from './pages/secondPage'</code>: Importa o componente SecondPage do arquivo secondPage.js, que cont\u00e9m o c\u00f3digo para a segunda p\u00e1gina do aplicativo. <code>function Router() { ... }</code>: Define a fun\u00e7\u00e3o Router como um componente que retorna os elementos JSX que definem as rotas do aplicativo. <code>&lt;BrowserRouter&gt; ... &lt;/BrowserRouter&gt;</code>: Envolve o aplicativo com o componente BrowserRouter para fornecer a funcionalidade de roteamento. <code>&lt;Routes&gt; ... &lt;/Routes&gt;</code>: Define o elemento Routes, que cont\u00e9m todas as rotas do aplicativo. <code>&lt;Route exact path=\"/\" element={&lt;FirstPage /&gt;} /&gt;</code>: Define uma rota para a p\u00e1gina inicial (/) do aplicativo, que renderiza o componente FirstPage. O atributo exact garante que apenas a rota exata \u00e9 correspondida. O atributo path define o caminho da rota. <code>&lt;Route path=\"/next\" element={&lt;SecondPage /&gt;} /&gt;</code>: Define uma rota para a p\u00e1gina seguinte (/next) do aplicativo, que renderiza o componente SecondPage. O atributo path define o caminho da rota. export default Router: Exporta o componente Router como o componente padr\u00e3o deste m\u00f3dulo. Isso permite que ele seja importado em outros arquivos do aplicativo usando <code>import Router from './Router'</code>.</p> <pre><code>// src/App.js\n\nimport Router from './router'\n\nfunction App() {\nreturn (\n&lt;Router /&gt;\n);\n}\n\nexport default App;\n</code></pre> <p><code>import Router from './router'</code>: Importa o componente Router do arquivo router.js para definir as rotas do aplicativo. <code>function App() { ... }</code>: Define a fun\u00e7\u00e3o App como um componente que retorna os elementos JSX que comp\u00f5em o aplicativo. <code>&lt;Router /&gt;</code>: Renderiza o componente Router definido no arquivo router.js, que cont\u00e9m as rotas do aplicativo. <code>export default App;</code>: Exporta o componente App como o componente padr\u00e3o deste m\u00f3dulo. Isso permite que ele seja importado em outros arquivos do aplicativo usando <code>import App from './App'</code>.</p>"},{"location":"reactJS/_05_ReactHooks/","title":"05 ReactHooks","text":""},{"location":"reactJS/_05_ReactHooks/#react-hooks","title":"React Hooks","text":"<p>React Hooks \u00e9 uma adi\u00e7\u00e3o importante ao React 16.8 que permite que voc\u00ea use recursos de estado e ciclo de vida em componentes funcionais. At\u00e9 a vers\u00e3o 16.7 do React, os componentes funcionais eram limitados a receber propriedades e renderizar elementos na tela.</p> <p>Com o uso de hooks, os componentes funcionais agora podem ter acesso a recursos de estado, ciclo de vida e outras funcionalidades anteriormente dispon\u00edveis apenas em componentes de classe. Isso significa que voc\u00ea pode escrever componentes mais simples e f\u00e1ceis de entender, sem precisar escrever c\u00f3digo redundante.</p> <p>Os hooks s\u00e3o fun\u00e7\u00f5es que permitem que voc\u00ea \"se enganche\" em certos recursos do React, como estado, efeitos colaterais, refer\u00eancias e contexto, e os utilize em seus componentes funcionais. Existem alguns hooks b\u00e1sicos fornecidos pelo React, como useState, useEffect e useContext, mas voc\u00ea tamb\u00e9m pode criar seus pr\u00f3prios hooks personalizados para compartilhar a l\u00f3gica entre seus componentes.</p> <p>Os hooks permitem que voc\u00ea compartilhe l\u00f3gica entre componentes sem a necessidade de criar um componente de classe ou usar render props. Isso torna o c\u00f3digo mais f\u00e1cil de ler, manter e reutilizar. Al\u00e9m disso, os hooks ajudam a simplificar a l\u00f3gica de neg\u00f3cios do componente, evitando que ela seja distribu\u00edda por toda a \u00e1rvore de componentes.</p>"},{"location":"reactJS/_05_ReactHooks/#usestate","title":"useState","text":"<p>O useState \u00e9 um dos hooks b\u00e1sicos do React que permite adicionar estado a um componente funcional. De forma cient\u00edfica, podemos dizer que o useState \u00e9 um m\u00e9todo utilizado para gerenciamento de estados dentro de um componente funcional React, permitindo que o mesmo reaja a mudan\u00e7as de estado e renderize novamente com base nessas mudan\u00e7as.</p> <p>O useState recebe um valor inicial como argumento e retorna um array contendo o valor atual do estado e uma fun\u00e7\u00e3o para atualizar o valor. Essa fun\u00e7\u00e3o de atualiza\u00e7\u00e3o \u00e9 usada para modificar o valor do estado e atualizar o componente.</p> <p>Um exemplo de uso do useState seria para criar um contador em um componente funcional. </p> <pre><code>  import React, { useState } from 'react';\n\nfunction Contador() {\nconst [contador, setContador] = useState(0);\n\nfunction incrementar() {\nsetContador(contador + 1);\n}\n\nreturn (\n&lt;div&gt;\n&lt;h2&gt;Contador: {contador}&lt;/h2&gt;\n&lt;button onClick={incrementar}&gt;Incrementar&lt;/button&gt;\n&lt;/div&gt;\n);\n}\n</code></pre> <p>Nesse exemplo, a fun\u00e7\u00e3o useState \u00e9 utilizada para criar uma vari\u00e1vel de estado \"contador\" com valor inicial 0. Em seguida, \u00e9 criada uma fun\u00e7\u00e3o \"incrementar\" que atualiza o estado \"contador\" com o valor atual mais 1. Essa fun\u00e7\u00e3o \u00e9 chamada quando o bot\u00e3o \"Incrementar\" \u00e9 clicado.</p> <p>Ao clicar no bot\u00e3o, o estado \"contador\" \u00e9 atualizado e o componente \u00e9 renderizado novamente, exibindo o novo valor do contador.</p> <p>\u00c9 importante lembrar que o useState deve ser utilizado apenas em componentes funcionais, e n\u00e3o em componentes de classe.</p>"},{"location":"reactJS/_05_ReactHooks/#usecallback","title":"useCallback","text":"<p>O useCallback \u00e9 um hook do React que permite que voc\u00ea otimize o desempenho de seus componentes funcionais ao memorizar fun\u00e7\u00f5es. De forma cient\u00edfica, podemos dizer que o useCallback \u00e9 um m\u00e9todo utilizado para memoiza\u00e7\u00e3o de fun\u00e7\u00f5es dentro de um componente funcional React, permitindo que o mesmo utilize a mesma inst\u00e2ncia de uma fun\u00e7\u00e3o em v\u00e1rias renderiza\u00e7\u00f5es, caso seus argumentos n\u00e3o tenham mudado.</p> <p>Ao memorizar fun\u00e7\u00f5es, o useCallback evita que o React recrie essas fun\u00e7\u00f5es sempre que o componente \u00e9 renderizado novamente, o que pode causar uma degrada\u00e7\u00e3o do desempenho, especialmente em componentes complexos que renderizam muitas vezes.</p> <p>Um exemplo de uso do useCallback seria para criar uma fun\u00e7\u00e3o de filtro em uma lista de itens em um componente funcional.</p> <pre><code>  import React, { useState, useCallback } from 'react';\n\nfunction ListaDeItens() {\nconst [itens, setItens] = useState([\n{ id: 1, nome: 'Item 1' },\n{ id: 2, nome: 'Item 2' },\n{ id: 3, nome: 'Item 3' }\n]);\nconst [filtro, setFiltro] = useState('');\n\nconst filtrarItens = useCallback(() =&gt; {\nreturn itens.filter(item =&gt; item.nome.toLowerCase().includes(filtro.toLowerCase()));\n}, [itens, filtro]);\n\nreturn (\n&lt;div&gt;\n&lt;input type=\"text\" value={filtro} onChange={(e) =&gt; setFiltro(e.target.value)} /&gt;\n&lt;ul&gt;\n{filtrarItens().map(item =&gt; (\n&lt;li key={item.id}&gt;{item.nome}&lt;/li&gt;\n))}\n&lt;/ul&gt;\n&lt;/div&gt;\n);\n}\n</code></pre> <p>Nesse exemplo, a fun\u00e7\u00e3o useCallback \u00e9 utilizada para memoizar a fun\u00e7\u00e3o \"filtrarItens\", que filtra a lista de itens com base no filtro digitado pelo usu\u00e1rio. A fun\u00e7\u00e3o recebe o array de itens e o filtro como argumentos e retorna uma nova lista filtrada.</p> <p>O useCallback \u00e9 utilizado para evitar que a fun\u00e7\u00e3o seja recriada sempre que o estado de \"itens\" ou \"filtro\" for atualizado. Isso ajuda a melhorar o desempenho do componente, pois a mesma inst\u00e2ncia da fun\u00e7\u00e3o \u00e9 reutilizada em v\u00e1rias renderiza\u00e7\u00f5es, a menos que seus argumentos tenham mudado.</p>"},{"location":"reactJS/_05_ReactHooks/#usememo","title":"useMemo","text":"<p>O useMemo \u00e9 um hook do React que permite que os valores computados sejam armazenados em cache, evitando o rec\u00e1lculo desnecess\u00e1rio desses valores toda vez que o componente \u00e9 renderizado novamente. Esse rec\u00e1lculo desnecess\u00e1rio pode resultar em um desempenho inadequado, especialmente em componentes complexos que precisam renderizar muitas vezes.</p> <p>Ao memorizar valores, o useMemo otimiza o desempenho do componente, garantindo que os valores computados sejam reutilizados em v\u00e1rias renderiza\u00e7\u00f5es, a menos que as depend\u00eancias tenham mudado. Isso permite que o React evite a execu\u00e7\u00e3o de c\u00e1lculos adicionais desnecess\u00e1rios e ajuda a garantir que o componente seja atualizado apenas quando necess\u00e1rio.</p> <p>Um exemplo de uso do useMemo seria para criar um valor computado em um componente funcional.</p> <pre><code>import React, { useState, useMemo } from 'react';\n\nfunction Calculadora() {\nconst [valor1, setValor1] = useState(0);\nconst [valor2, setValor2] = useState(0);\n\nconst resultado = useMemo(() =&gt; {\nconsole.log('Calculando resultado...');\nreturn valor1 + valor2;\n}, [valor1, valor2]);\n\nreturn (\n&lt;div&gt;\n&lt;input type=\"number\" value={valor1} onChange={(e) =&gt; setValor1(Number(e.target.value))} /&gt;\n&lt;input type=\"number\" value={valor2} onChange={(e) =&gt; setValor2(Number(e.target.value))} /&gt;\n&lt;p&gt;Resultado: {resultado}&lt;/p&gt;\n&lt;/div&gt;\n);\n}\n</code></pre> <p>Nesse exemplo, a fun\u00e7\u00e3o useMemo \u00e9 utilizada para memoizar o valor computado \"resultado\", que \u00e9 a soma dos valores de \"valor1\" e \"valor2\". A fun\u00e7\u00e3o recebe os valores de \"valor1\" e \"valor2\" como argumentos e retorna a soma dos dois valores.</p> <p>O useMemo \u00e9 utilizado para evitar que o valor de \"resultado\" seja recalculado sempre que o componente \u00e9 renderizado novamente. Isso ajuda a melhorar o desempenho do componente, pois o mesmo valor \u00e9 reutilizado em v\u00e1rias renderiza\u00e7\u00f5es, a menos que as suas depend\u00eancias tenham mudado.</p>"},{"location":"reactJS/_05_ReactHooks/#useeffect","title":"useEffect","text":"<p>O useEffect \u00e9 um hook do React que permite que voc\u00ea execute efeitos colaterais em componentes funcionais. De forma cient\u00edfica, podemos dizer que o useEffect \u00e9 um m\u00e9todo que permite que voc\u00ea execute efeitos colaterais em componentes funcionais, como manipula\u00e7\u00e3o do DOM, chamadas a APIs externas ou atualiza\u00e7\u00f5es de estado.</p> <p>O useEffect \u00e9 executado ap\u00f3s cada renderiza\u00e7\u00e3o do componente e pode ser configurado para executar somente quando certas depend\u00eancias s\u00e3o atualizadas. Isso permite que voc\u00ea controle quando o efeito \u00e9 executado e garanta que ele seja executado apenas quando necess\u00e1rio.</p> <pre><code>  import React, { useState, useEffect } from 'react';\n\nfunction ExemploUseEffect() {\nconst [count, setCount] = useState(0);\n\nuseEffect(() =&gt; {\nconst intervalId = setInterval(() =&gt; {\nsetCount(count + 1);\n}, 1000);\n\nreturn () =&gt; {\nclearInterval(intervalId);\n};\n}, [count]);\n\nreturn (\n&lt;div&gt;\n&lt;p&gt;O contador est\u00e1 em: {count}&lt;/p&gt;\n&lt;/div&gt;\n);\n}\n</code></pre> <p>Ao executar esse c\u00f3digo, voc\u00ea ver\u00e1 que o valor do estado count \u00e9 atualizado a cada segundo. O useEffect garante que o intervalo de tempo seja definido apenas uma vez e que seja limpo antes da pr\u00f3xima atualiza\u00e7\u00e3o do componente. Isso ajuda a evitar poss\u00edveis problemas de desempenho ou vazamentos de mem\u00f3ria.</p>"},{"location":"reactJS/_06_RouterGuards/","title":"06 RouterGuards","text":""},{"location":"reactJS/_06_RouterGuards/#router-guards","title":"Router Guards","text":"<p>Os Router Guards s\u00e3o mecanismos utilizados para garantir que o acesso a determinadas rotas em uma aplica\u00e7\u00e3o ocorra apenas quando certas condi\u00e7\u00f5es s\u00e3o satisfeitas. Essas condi\u00e7\u00f5es podem incluir a autentica\u00e7\u00e3o do usu\u00e1rio, n\u00edvel de acesso, permiss\u00f5es, entre outros.</p> <p>No React, \u00e9 poss\u00edvel implementar Router Guards por meio de bibliotecas de roteamento, como o React Router. Essas bibliotecas fornecem mecanismos para definir fun\u00e7\u00f5es de valida\u00e7\u00e3o que ser\u00e3o executadas antes de renderizar uma determinada rota. Se a valida\u00e7\u00e3o n\u00e3o for bem-sucedida, a rota n\u00e3o ser\u00e1 renderizada e o usu\u00e1rio ser\u00e1 redirecionado para outra p\u00e1gina.</p> <pre><code>  import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';\n\nfunction App() {\nconst isAuthenticated = false;\n\nfunction PrivateRoute({ element: Component, ...rest }) {\nreturn (\n&lt;Route\n{...rest}\nelement={isAuthenticated ? (\n&lt;Component /&gt;\n) : (\n&lt;Navigate to=\"/login\" replace /&gt;\n)}\n/&gt;\n);\n}\n\nreturn (\n&lt;BrowserRouter&gt;\n&lt;Routes&gt;\n&lt;Route path=\"/login\" element={&lt;LoginPage /&gt;} /&gt;\n&lt;PrivateRoute path=\"/\" element={&lt;HomePage /&gt;} /&gt;\n&lt;/Routes&gt;\n&lt;/BrowserRouter&gt;\n);\n}\n</code></pre> <p>Neste exemplo, definimos a fun\u00e7\u00e3o PrivateRoute que recebe o componente que deve ser renderizado como elemento (element) e outras propriedades para a rota. Dentro desta fun\u00e7\u00e3o, usamos o elemento tern\u00e1rio para validar se o usu\u00e1rio est\u00e1 autenticado.</p> <p>Se o usu\u00e1rio estiver autenticado, o componente filho \u00e9 renderizado. Caso contr\u00e1rio, o usu\u00e1rio \u00e9 redirecionado para a p\u00e1gina de login usando o elemento Navigate com a propriedade to definida para \"/login\" e a propriedade replace definida como true.</p> <p>Em seguida, usamos a fun\u00e7\u00e3o PrivateRoute para renderizar a p\u00e1gina inicial (<code>&lt;HomePage /&gt;</code>) somente se o usu\u00e1rio estiver autenticado. Se o usu\u00e1rio n\u00e3o estiver autenticado, ele ser\u00e1 redirecionado para a p\u00e1gina de login.</p>"},{"location":"reactJS/_07_ReactContext/","title":"07 ReactContext","text":""},{"location":"reactJS/_07_ReactContext/#react-context","title":"React Context","text":"<p>React Context \u00e9 um recurso do React que permite o compartilhamento de dados entre componentes em uma \u00e1rvore de componentes, sem a necessidade de passar props manualmente em cada n\u00edvel da \u00e1rvore. Isso pode melhorar significativamente a efici\u00eancia e a escalabilidade do aplicativo, permitindo que os dados sejam acessados e atualizados facilmente em qualquer parte da \u00e1rvore.</p> <p>O React Context \u00e9 composto por um objeto Provider e um objeto Consumer. O Provider \u00e9 respons\u00e1vel por fornecer o contexto aos componentes filhos, enquanto o Consumer \u00e9 respons\u00e1vel por consumir os dados do contexto.</p> <p>Por exemplo, imagine uma aplica\u00e7\u00e3o em que diferentes componentes precisam acessar informa\u00e7\u00f5es do usu\u00e1rio, como o nome e o endere\u00e7o. Em vez de passar essas informa\u00e7\u00f5es manualmente para cada componente, pode-se usar o React Context para fornecer acesso a esses dados em toda a \u00e1rvore de componentes.</p> <p>Para criar um contexto no React, \u00e9 poss\u00edvel utilizar a fun\u00e7\u00e3o createContext(). Esta fun\u00e7\u00e3o retorna um objeto com dois elementos: Provider e Consumer. O Provider \u00e9 utilizado para prover o contexto para os componentes filhos, enquanto o Consumer \u00e9 utilizado para consumir os dados do contexto.</p> <pre><code>  import React, { createContext, useState } from 'react';\n\n// Criando um contexto com informa\u00e7\u00f5es de usu\u00e1rio\nexport const UserContext = createContext();\n\nconst App = () =&gt; {\nconst [user, setUser] = useState({\nname: 'John Doe',\naddress: '123 Main Street'\n});\n\n// Utilizando o Provider para prover o contexto para os componentes filhos\nreturn (\n&lt;UserContext.Provider value={user}&gt;\n&lt;div&gt;\n&lt;Component1 /&gt;\n&lt;Component2 /&gt;\n&lt;/div&gt;\n&lt;/UserContext.Provider&gt;\n);\n};\n\n// Utilizando o Consumer para consumir os dados do contexto\nconst Component1 = () =&gt; {\nreturn (\n&lt;UserContext.Consumer&gt;\n{user =&gt; (\n&lt;div&gt;\n&lt;p&gt;{user.name}&lt;/p&gt;\n&lt;p&gt;{user.address}&lt;/p&gt;\n&lt;/div&gt;\n)}\n&lt;/UserContext.Consumer&gt;\n);\n};\n\nconst Component2 = () =&gt; {\nreturn (\n&lt;UserContext.Consumer&gt;\n{user =&gt; (\n&lt;div&gt;\n&lt;p&gt;{user.name}&lt;/p&gt;\n&lt;p&gt;{user.address}&lt;/p&gt;\n&lt;/div&gt;\n)}\n&lt;/UserContext.Consumer&gt;\n);\n};\n</code></pre> <p>Nesse exemplo, a fun\u00e7\u00e3o createContext() \u00e9 utilizada para criar um contexto chamado UserContext, que cont\u00e9m informa\u00e7\u00f5es de usu\u00e1rio. Essas informa\u00e7\u00f5es s\u00e3o fornecidas pelo componente App, que utiliza o Provider para prover o contexto para os componentes filhos Component1 e Component2. Esses componentes, por sua vez, utilizam o Consumer para consumir os dados do contexto e exibir as informa\u00e7\u00f5es do usu\u00e1rio.</p>"}]}